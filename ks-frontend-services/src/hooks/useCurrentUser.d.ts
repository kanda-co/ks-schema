import { useDispatch } from 'react-redux';
import type { ThunkDispatch } from '@reduxjs/toolkit';
import type { AuthSlice, createSelectors } from '../store';
import { AuthState } from '../store/slices/auth';
export interface CurrentUserHook {
    user?: AuthState['user'];
    firebaseUser?: AuthState['firebaseUser'];
    isUserLoggedIn: boolean;
    revalidate: () => Promise<unknown>;
    logout: () => void;
}
export declare const createCurrentUserHook: <State extends AuthSlice, Dispatch extends ThunkDispatch<State, unknown, any>, Pages>(dispatch: Dispatch, selectors: {
    getAuth: (state: State) => AuthState;
    getUser: (state: State) => import("..").AuthUser;
    getFirebaseUser: (state: State) => import("@firebase/auth").User;
    getAuthIsLoading: (state: State) => boolean;
    getIsUserLoggedIn: (state: State) => boolean;
    getRoot: (state: State) => State;
    getApp: (state: State) => State["app"];
    getPathKey: (state: State) => import("..").PathKey<Pages>;
    getIsLoading: (state: State) => boolean;
    authUser: import("../store/types").Selectors<import("..").AuthUser, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").AuthUser>>>;
    company: import("../store/types").Selectors<import("..").Company, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Company>>>;
    credit: import("../store/types").Selectors<import("..").Credit, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Credit>>>;
    document: import("../store/types").Selectors<import("..").Document, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Document>>>;
    enterprise: import("../store/types").Selectors<import("..").Enterprise, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Enterprise>>>;
    event: import("../store/types").Selectors<import("..").Event, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Event>>>;
    infoAuth: import("../store/types").Selectors<import("..").InfoAuth, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoAuth>>>;
    infoCompany: import("../store/types").Selectors<import("..").InfoCompany, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoCompany>>>;
    infoEnterprise: import("../store/types").Selectors<import("..").Enterprise, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Enterprise>>>;
    infoEntity: import("../store/types").Selectors<import("..").InfoEntity, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoEntity>>>;
    infoGhost: import("../store/types").Selectors<import("..").InfoGhost, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoGhost>>>;
    infoIP: import("../store/types").Selectors<import("..").InfoIP, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoIP>>>;
    infoLead: import("../store/types").Selectors<import("..").InfoLead, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoLead>>>;
    infoOnboarding: import("../store/types").Selectors<import("..").InfoOnboarding, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoOnboarding>>>;
    infoQuery: import("../store/types").Selectors<import("..").InfoQuery, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoQuery>>>;
    infoStats: import("../store/types").Selectors<import("..").InfoStats, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoStats>>>;
    job: import("../store/types").Selectors<import("..").Job, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Job>>>;
    lead: import("../store/types").Selectors<import("..").Lead, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Lead>>>;
    monitor: import("../store/types").Selectors<import("..").Monitor, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Monitor>>>;
    onboarding: import("../store/types").Selectors<import("..").Onboarding, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Onboarding>>>;
    partner: import("../store/types").Selectors<import("..").Partner, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Partner>>>;
    payment: import("../store/types").Selectors<import("..").Payment, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Payment>>>;
    rate: import("../store/types").Selectors<import("..").Rate, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Rate>>>;
    subscription: import("../store/types").Selectors<import("..").Subscription, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Subscription>>>;
    tradeSummary: import("../store/types").Selectors<import("..").TradeSummary, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").TradeSummary>>>;
    training: import("../store/types").Selectors<import("..").Training, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Training>>>;
    jobCompanyInfo: import("../store/types").Selectors<import("..").JobCompanyInfo, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").JobCompanyInfo>>>;
    checkJob: import("../store/types").Selectors<import("..").JobCreditState, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").JobCreditState>>>;
    tradeQuoteApprovalLead: import("../store/types").Selectors<import("..").Job, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Job>>>;
    connectTradesLead: import("../store/types").Selectors<import("..").TradeSummary, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").TradeSummary>>>;
    matchTradesLead: import("../store/types").Selectors<import("..").TradeSummary, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").TradeSummary>>>;
    acceptedJobSummaryLead: import("../store/types").Selectors<import("..").LeadJobSummary, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").LeadJobSummary>>>;
    postCompanyDirectorVerification: import("../store/types").Selectors<import("..").InfoCompany, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoCompany>>>;
    getCompanyDirectorVerification: import("../store/types").Selectors<import("..").InfoCompany, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").InfoCompany>>>;
    postCompanyBilling: import("../store/types").Selectors<import("..").RedirectURLs, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").RedirectURLs>>>;
    postCompanyReferrals: import("../store/types").Selectors<import("..").Referral, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").Referral>>>;
    infoEnterpriseRole: import("../store/types").Selectors<import("..").EnterpriseUserRole, import("../types").StringIndexedObject<import("../store/types").GeneratedState<import("..").EnterpriseUserRole>>>;
}) => (() => CurrentUserHook);
