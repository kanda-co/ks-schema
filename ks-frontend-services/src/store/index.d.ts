import { PreloadedState, type Reducer } from '@reduxjs/toolkit';
import type { AuthState } from './slices/auth';
type ReducerMap<M> = {
    [K in keyof M]: Reducer<M[K]>;
};
export declare function createStore<PageKeys extends string, ExtraState = {}>(extraReducers?: ReducerMap<ExtraState>, extraPreloadedState?: PreloadedState<Partial<ExtraState>>): import("@reduxjs/toolkit/dist/configureStore").ToolkitStore<{
    audit: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Audit>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    authUser: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").AuthUser>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    company: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Company>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    credit: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Credit>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    document: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Document>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    enquiry: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enquiry>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    enrolment: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enrolment>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    enterprise: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enterprise>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    event: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Event>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoAuth: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoAuth>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCompany: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCompany>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEnquiry: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoEnquiry>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEntity: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoEntity>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoGhost: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoGhost>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoIP: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoIP>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoIntroductionStats: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoIntroductionStats>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoLead>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoOnboarding: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoOnboarding>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoQuery: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoQuery>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoRelation: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoRelation>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoSearch: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoSearch>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoStats: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoStats>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoTag: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoTag>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoWorkType: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoWorkType>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    introduction: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Introduction>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    job: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Job>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    lead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Lead>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    monitor: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Monitor>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    onboarding: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Onboarding>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    partner: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Partner>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    payment: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Payment>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    rate: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Rate>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    subscription: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Subscription>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    tag: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Tag>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    tradeSummary: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").TradeSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    training: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Training>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    transaction: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Transaction>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    userProfile: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").UserProfile>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    postCompanyBilling: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").RedirectURLs>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    getCompanyDirectorVerification: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCompany>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    postCompanyDirectorVerification: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCompany>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    getCompanyReferrals: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Referral>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    postCompanyReferrals: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Referral>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    exportFcaApproved: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportCSV>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    importFcaApproved: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportCSV>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    exportEnterpriseDailyReport: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportJSON>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoSession: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoSession>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoGetCache: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Cache>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoPutCache: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Cache>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoDeleteCache: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Cache>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCampaign: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Campaign>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCustomer: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Customer>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoDirector: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").OwnerReport>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEnterpriseRole: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").EnterpriseUserRole>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEnterprise: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enterprise>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoHealth: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Error>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoKagent: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").KagentChat>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoPartnerBranding: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoPartnerBranding>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoLegacyRedirect: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoLegacyRedirect>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCheckoutRedirect: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCheckoutRedirect>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoValidateEmail: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoValidationEmail>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    checkJob: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").JobCreditState>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    payoutsJob: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Tally>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    jobCheckoutLink: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").RedirectURLs>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    jobCompanyInfo: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").JobCompanyInfo>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    exportJobPayouts: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportCSV>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    tradeQuoteApprovalLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Job>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    matchTradesLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").TradeSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    connectTradesLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").TradeSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    acceptedJobSummaryLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").LeadJobSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    app: import("./slices/app").AppState<PageKeys>;
    auth: AuthState;
}, import("redux").AnyAction, import("@reduxjs/toolkit").MiddlewareArray<[import("@reduxjs/toolkit").ThunkMiddleware<{
    audit: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Audit>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    authUser: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").AuthUser>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    company: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Company>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    credit: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Credit>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    document: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Document>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    enquiry: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enquiry>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    enrolment: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enrolment>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    enterprise: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enterprise>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    event: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Event>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoAuth: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoAuth>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCompany: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCompany>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEnquiry: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoEnquiry>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEntity: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoEntity>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoGhost: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoGhost>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoIP: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoIP>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoIntroductionStats: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoIntroductionStats>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoLead>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoOnboarding: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoOnboarding>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoQuery: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoQuery>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoRelation: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoRelation>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoSearch: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoSearch>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoStats: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoStats>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoTag: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoTag>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoWorkType: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoWorkType>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    introduction: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Introduction>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    job: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Job>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    lead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Lead>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    monitor: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Monitor>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    onboarding: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Onboarding>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    partner: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Partner>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    payment: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Payment>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    rate: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Rate>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    subscription: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Subscription>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    tag: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Tag>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    tradeSummary: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").TradeSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    training: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Training>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    transaction: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Transaction>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    userProfile: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").UserProfile>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    postCompanyBilling: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").RedirectURLs>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    getCompanyDirectorVerification: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCompany>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    postCompanyDirectorVerification: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCompany>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    getCompanyReferrals: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Referral>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    postCompanyReferrals: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Referral>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    exportFcaApproved: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportCSV>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    importFcaApproved: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportCSV>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    exportEnterpriseDailyReport: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportJSON>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoSession: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoSession>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoGetCache: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Cache>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoPutCache: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Cache>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoDeleteCache: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Cache>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCampaign: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Campaign>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCustomer: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Customer>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoDirector: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").OwnerReport>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEnterpriseRole: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").EnterpriseUserRole>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoEnterprise: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Enterprise>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoHealth: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Error>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoKagent: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").KagentChat>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoPartnerBranding: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoPartnerBranding>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoLegacyRedirect: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoLegacyRedirect>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoCheckoutRedirect: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoCheckoutRedirect>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    infoValidateEmail: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").InfoValidationEmail>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    checkJob: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").JobCreditState>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    payoutsJob: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Tally>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    jobCheckoutLink: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").RedirectURLs>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    jobCompanyInfo: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").JobCompanyInfo>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    exportJobPayouts: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").ExportCSV>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    tradeQuoteApprovalLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").Job>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    matchTradesLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").TradeSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    connectTradesLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").TradeSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    acceptedJobSummaryLead: {
        ids: import("@reduxjs/toolkit").EntityId[];
        entities: import("@reduxjs/toolkit").Dictionary<import("..").LeadJobSummary>;
        raw?: {} | {}[];
        error?: import("../types").ExtractedError;
        hasFetched: boolean;
        fetchedList: boolean;
        chainedRequest: boolean;
        isLoading: boolean;
        isSubmitting: boolean;
    };
    app: import("./slices/app").AppState<PageKeys>;
    auth: AuthState;
}, import("redux").AnyAction, undefined>]>>;
export type AuthSlice = {
    auth: AuthState;
};
export declare function createSelectors<State extends AuthSlice, Pages>(): {
    getAuth: (state: State) => AuthState;
    getUser: (state: State) => import("..").AuthUser;
    getFirebaseUser: (state: State) => import("@firebase/auth").User;
    getAuthIsLoading: (state: State) => boolean;
    getIsUserLoggedIn: (state: State) => boolean;
    getRoot: (state: State) => State;
    getApp: (state: State) => State["app"];
    getPathKey: (state: State) => import("./types").PathKey<Pages>;
    getIsLoading: (state: State) => boolean;
    audit: import("./types").Selectors<import("..").Audit, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Audit>>>;
    authUser: import("./types").Selectors<import("..").AuthUser, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").AuthUser>>>;
    company: import("./types").Selectors<import("..").Company, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Company>>>;
    credit: import("./types").Selectors<import("..").Credit, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Credit>>>;
    document: import("./types").Selectors<import("..").Document, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Document>>>;
    enquiry: import("./types").Selectors<import("..").Enquiry, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Enquiry>>>;
    enrolment: import("./types").Selectors<import("..").Enrolment, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Enrolment>>>;
    enterprise: import("./types").Selectors<import("..").Enterprise, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Enterprise>>>;
    event: import("./types").Selectors<import("..").Event, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Event>>>;
    infoAuth: import("./types").Selectors<import("..").InfoAuth, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoAuth>>>;
    infoCompany: import("./types").Selectors<import("..").InfoCompany, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoCompany>>>;
    infoEnquiry: import("./types").Selectors<import("..").InfoEnquiry, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoEnquiry>>>;
    infoEntity: import("./types").Selectors<import("..").InfoEntity, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoEntity>>>;
    infoGhost: import("./types").Selectors<import("..").InfoGhost, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoGhost>>>;
    infoIP: import("./types").Selectors<import("..").InfoIP, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoIP>>>;
    infoIntroductionStats: import("./types").Selectors<import("..").InfoIntroductionStats, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoIntroductionStats>>>;
    infoLead: import("./types").Selectors<import("..").InfoLead, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoLead>>>;
    infoOnboarding: import("./types").Selectors<import("..").InfoOnboarding, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoOnboarding>>>;
    infoQuery: import("./types").Selectors<import("..").InfoQuery, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoQuery>>>;
    infoRelation: import("./types").Selectors<import("..").InfoRelation, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoRelation>>>;
    infoSearch: import("./types").Selectors<import("..").InfoSearch, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoSearch>>>;
    infoStats: import("./types").Selectors<import("..").InfoStats, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoStats>>>;
    infoTag: import("./types").Selectors<import("..").InfoTag, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoTag>>>;
    infoWorkType: import("./types").Selectors<import("..").InfoWorkType, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoWorkType>>>;
    introduction: import("./types").Selectors<import("..").Introduction, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Introduction>>>;
    job: import("./types").Selectors<import("..").Job, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Job>>>;
    lead: import("./types").Selectors<import("..").Lead, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Lead>>>;
    monitor: import("./types").Selectors<import("..").Monitor, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Monitor>>>;
    onboarding: import("./types").Selectors<import("..").Onboarding, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Onboarding>>>;
    partner: import("./types").Selectors<import("..").Partner, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Partner>>>;
    payment: import("./types").Selectors<import("..").Payment, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Payment>>>;
    rate: import("./types").Selectors<import("..").Rate, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Rate>>>;
    subscription: import("./types").Selectors<import("..").Subscription, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Subscription>>>;
    tag: import("./types").Selectors<import("..").Tag, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Tag>>>;
    tradeSummary: import("./types").Selectors<import("..").TradeSummary, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").TradeSummary>>>;
    training: import("./types").Selectors<import("..").Training, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Training>>>;
    transaction: import("./types").Selectors<import("..").Transaction, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Transaction>>>;
    userProfile: import("./types").Selectors<import("..").UserProfile, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").UserProfile>>>;
    postCompanyBilling: import("./types").Selectors<import("..").RedirectURLs, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").RedirectURLs>>>;
    getCompanyDirectorVerification: import("./types").Selectors<import("..").InfoCompany, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoCompany>>>;
    postCompanyDirectorVerification: import("./types").Selectors<import("..").InfoCompany, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoCompany>>>;
    getCompanyReferrals: import("./types").Selectors<import("..").Referral, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Referral>>>;
    postCompanyReferrals: import("./types").Selectors<import("..").Referral, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Referral>>>;
    exportFcaApproved: import("./types").Selectors<import("..").ExportCSV, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").ExportCSV>>>;
    importFcaApproved: import("./types").Selectors<import("..").ExportCSV, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").ExportCSV>>>;
    exportEnterpriseDailyReport: import("./types").Selectors<import("..").ExportJSON, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").ExportJSON>>>;
    infoSession: import("./types").Selectors<import("..").InfoSession, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoSession>>>;
    infoGetCache: import("./types").Selectors<import("..").Cache, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Cache>>>;
    infoPutCache: import("./types").Selectors<import("..").Cache, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Cache>>>;
    infoDeleteCache: import("./types").Selectors<import("..").Cache, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Cache>>>;
    infoCampaign: import("./types").Selectors<import("..").Campaign, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Campaign>>>;
    infoCustomer: import("./types").Selectors<import("..").Customer, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Customer>>>;
    infoDirector: import("./types").Selectors<import("..").OwnerReport, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").OwnerReport>>>;
    infoEnterpriseRole: import("./types").Selectors<import("..").EnterpriseUserRole, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").EnterpriseUserRole>>>;
    infoEnterprise: import("./types").Selectors<import("..").Enterprise, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Enterprise>>>;
    infoHealth: import("./types").Selectors<import("..").Error, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Error>>>;
    infoKagent: import("./types").Selectors<import("..").KagentChat, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").KagentChat>>>;
    infoPartnerBranding: import("./types").Selectors<import("..").InfoPartnerBranding, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoPartnerBranding>>>;
    infoLegacyRedirect: import("./types").Selectors<import("..").InfoLegacyRedirect, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoLegacyRedirect>>>;
    infoCheckoutRedirect: import("./types").Selectors<import("..").InfoCheckoutRedirect, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoCheckoutRedirect>>>;
    infoValidateEmail: import("./types").Selectors<import("..").InfoValidationEmail, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").InfoValidationEmail>>>;
    checkJob: import("./types").Selectors<import("..").JobCreditState, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").JobCreditState>>>;
    payoutsJob: import("./types").Selectors<import("..").Tally, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Tally>>>;
    jobCheckoutLink: import("./types").Selectors<import("..").RedirectURLs, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").RedirectURLs>>>;
    jobCompanyInfo: import("./types").Selectors<import("..").JobCompanyInfo, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").JobCompanyInfo>>>;
    exportJobPayouts: import("./types").Selectors<import("..").ExportCSV, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").ExportCSV>>>;
    tradeQuoteApprovalLead: import("./types").Selectors<import("..").Job, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").Job>>>;
    matchTradesLead: import("./types").Selectors<import("..").TradeSummary, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").TradeSummary>>>;
    connectTradesLead: import("./types").Selectors<import("..").TradeSummary, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").TradeSummary>>>;
    acceptedJobSummaryLead: import("./types").Selectors<import("..").LeadJobSummary, import("../types").StringIndexedObject<import("./types").GeneratedState<import("..").LeadJobSummary>>>;
};
export {};
