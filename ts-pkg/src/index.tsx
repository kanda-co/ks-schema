export { useFormContext } from "react-hook-form";

import React from "react";
import FormTheme from "./components/FormTheme";
import FormWrapper from "./components/FormWrapper";
import Field, { type FieldProps } from "~/field";
export { default as ButtonText } from "./components/Button/Text";

export { Field, FormTheme, FormWrapper };

export { type FieldProps };

export * from "./components";

// @ts-ignore

export const InfoValidationEmailEmailValidation = {
  disabled: { value: true, message: "Email input is read only or disabled" },
};

export function InfoValidationEmailEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoValidationEmailEmailValidation}>
      <Field.Input
        name="info_validation_email.email"
        label="Email"
        placeholder="email"
        validation={InfoValidationEmailEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoValidationEmailSourceValidation = {
  disabled: { value: true, message: "Source input is read only or disabled" },
};

export function InfoValidationEmailSource(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoValidationEmailSourceValidation}>
      <Field.Input
        name="info_validation_email.source"
        label="Source"
        placeholder="source"
        validation={InfoValidationEmailSourceValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoValidationEmailSuggestionValidation = {
  disabled: {
    value: true,
    message: "Suggestion input is read only or disabled",
  },
};

export function InfoValidationEmailSuggestion(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoValidationEmailSuggestionValidation}>
      <Field.Input
        name="info_validation_email.suggestion"
        label="Suggestion"
        placeholder="suggestion"
        validation={InfoValidationEmailSuggestionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoValidationEmailVerdictValidation = {
  disabled: { value: true, message: "Verdict input is read only or disabled" },
};

export function InfoValidationEmailVerdict(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={InfoValidationEmailVerdictValidation}>
      <Field.RadioSelect
        name="info_validation_email.verdict"
        label="Verdict"
        placeholder="verdict"
        options={[
          { name: "Valid", value: "valid" },
          { name: "Risky", value: "risky" },
          { name: "Invalid", value: "invalid" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function InfoValidationEmailForm(props: any) {
  return (
    <>
      <InfoValidationEmailEmail {...props} />
      <InfoValidationEmailSource {...props} />
      <InfoValidationEmailSuggestion {...props} />
      <InfoValidationEmailVerdict {...props} />
    </>
  );
}

export const SelfEmployedDetailsBusinessNameValidation = {
  required: { value: true, message: "Business Name is required." },
  minLength: {
    value: 1,
    message: "Business Name requires minimum length of 1",
  },
};

export function SelfEmployedDetailsBusinessName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SelfEmployedDetailsBusinessNameValidation}>
      <Field.Input
        name="self_employed_details.business_name"
        label="Business Name"
        placeholder="business name"
        validation={SelfEmployedDetailsBusinessNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SelfEmployedDetailsMonthsSelfEmployedValidation = {
  required: { value: true, message: "Months Self Employed is required." },
  min: { value: 1, message: "Months Self Employed must be great than 1" },
  max: {
    value: 2147483647,
    message: "Months Self Employed must be smaller than 2.147483647e+09",
  },
};

export function SelfEmployedDetailsMonthsSelfEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={SelfEmployedDetailsMonthsSelfEmployedValidation}
    >
      <Field.NumberFormatInput
        name="self_employed_details.months_self_employed"
        label="Months Self Employed"
        placeholder="months self employed"
        validation={SelfEmployedDetailsMonthsSelfEmployedValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SelfEmployedDetailsTypeOfBusinessValidation = {
  required: { value: true, message: "Type Of Business is required." },
  minLength: {
    value: 1,
    message: "Type Of Business requires minimum length of 1",
  },
};

export function SelfEmployedDetailsTypeOfBusiness(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SelfEmployedDetailsTypeOfBusinessValidation}>
      <Field.Input
        name="self_employed_details.type_of_business"
        label="Type Of Business"
        placeholder="type of business"
        validation={SelfEmployedDetailsTypeOfBusinessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function SelfEmployedDetailsForm(props: any) {
  return (
    <>
      <SelfEmployedDetailsBusinessName {...props} />
      <SelfEmployedDetailsMonthsSelfEmployed {...props} />
      <SelfEmployedDetailsTypeOfBusiness {...props} />
    </>
  );
}

export const CompanyAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CompanyAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyAidValidation}>
      <Field.Input
        name="company.aid"
        label="Author Id"
        placeholder="author id"
        validation={CompanyAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyAvailableRatesEnabledArrayInputValidation = {
  required: { value: true, message: "Enabled is required." },
};

export function CompanyAvailableRatesEnabledArrayInput(props: any) {
  return (
    <Field.Array.Input name="enabled">
      <Field.Validator
        validation={CompanyAvailableRatesEnabledArrayInputValidation}
      >
        <Field.BooleanInput
          label="Enabled"
          placeholder="Enabled"
          label="Enabled?"
          placeholder="enabled?"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyAvailableRatesFeeArrayInputValidation = {
  required: { value: true, message: "Fee is required." },
  min: { value: 0, message: "Fee must be great than 0" },
  max: {
    value: 2147483647,
    message: "Fee must be smaller than 2.147483647e+09",
  },
};

export function CompanyAvailableRatesFeeArrayInput(props: any) {
  return (
    <Field.Array.Input name="fee">
      <Field.Validator
        validation={CompanyAvailableRatesFeeArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Fee"
          placeholder="Fee"
          label="Fee"
          placeholder="fee"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyAvailableRatesNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CompanyAvailableRatesNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={CompanyAvailableRatesNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Name"
          placeholder="name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyAvailableRatesValidation = {};

export function CompanyAvailableRatesArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="company.available_rates"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const CompanyBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function CompanyBankAccountAccountName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyBankAccountAccountNameValidation}>
      <Field.Input
        name="company.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={CompanyBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function CompanyBankAccountAccountNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyBankAccountAccountNumberValidation}>
      <Field.Input
        name="company.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={CompanyBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function CompanyBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CompanyBankAccountMonthsHeldValidation}>
      <Field.NumberFormatInput
        name="company.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={CompanyBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function CompanyBankAccountSortCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyBankAccountSortCodeValidation}>
      <Field.Input
        name="company.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={CompanyBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyBillingValidation = {
  disabled: { value: true, message: "Billing input is read only or disabled" },
};

export function CompanyBilling(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyBillingValidation}>
      <Field.Select
        name="company.billing"
        label="Company Billing"
        placeholder="company billing"
        options={[
          { name: "Legacy", value: "legacy" },
          { name: "Trial", value: "trial" },
          { name: "Pending", value: "pending" },
          { name: "Referred", value: "referred" },
          { name: "Subscribed", value: "subscribed" },
          {
            name: "Recurring Payment Failed 1",
            value: "recurring_payment_failed_1",
          },
          {
            name: "Recurring Payment Failed 2",
            value: "recurring_payment_failed_2",
          },
          {
            name: "Recurring Payment Failed 3",
            value: "recurring_payment_failed_3",
          },
          { name: "Suspended", value: "suspended" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CompanyCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCidValidation}>
      <Field.Input
        name="company.cid"
        label="Company Id"
        placeholder="company id"
        validation={CompanyCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoAverageJobValueValidation = {
  required: { value: true, message: "Average Job Value is required." },
  min: { value: 0, message: "Average Job Value must be great than 0" },
  max: {
    value: 2147483647,
    message: "Average Job Value must be smaller than 2.147483647e+09",
  },
};

export function CompanyCompanyInfoAverageJobValue(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CompanyCompanyInfoAverageJobValueValidation}>
      <Field.NumberFormatInput
        name="company.company_info.average_job_value"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CompanyCompanyInfoAverageJobValueValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoAverageMonthlyJobsValidation = {
  required: { value: true, message: "Average Monthly Jobs is required." },
  min: { value: 1, message: "Average Monthly Jobs must be great than 1" },
  max: {
    value: 2147483647,
    message: "Average Monthly Jobs must be smaller than 2.147483647e+09",
  },
};

export function CompanyCompanyInfoAverageMonthlyJobs(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoAverageMonthlyJobsValidation}
    >
      <Field.NumberFormatInput
        name="company.company_info.average_monthly_jobs"
        label="Average Monthly Jobs"
        placeholder="average monthly jobs"
        validation={CompanyCompanyInfoAverageMonthlyJobsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementAgreedTermsAndConditionsValidation =
  {};

export function CompanyCompanyInfoContractAgreementAgreedTermsAndConditions(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoContractAgreementAgreedTermsAndConditionsValidation
      }
    >
      <Field.RadioSelect
        name="company.company_info.contract_agreement.agreed_terms_and_conditions"
        label="Agreed Terms And Conditions"
        placeholder="agreed terms and conditions"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation =
  {};

export function CompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKanda(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation
      }
    >
      <Field.RadioSelect
        name="company.company_info.contract_agreement.agreed_to_become_iar_of_kanda"
        label="Agreed To Become IAR Of Kanda"
        placeholder="agreed to become IAR of Kanda"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CompanyCompanyInfoContractAgreementContractAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractAidValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.aid"
        label="Author Id"
        placeholder="author id"
        validation={CompanyCompanyInfoContractAgreementContractAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CompanyCompanyInfoContractAgreementContractCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractCidValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.cid"
        label="Company Id"
        placeholder="company id"
        validation={CompanyCompanyInfoContractAgreementContractCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function CompanyCompanyInfoContractAgreementContractContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractContentValidation}
    >
      <Field.File
        name="company.company_info.contract_agreement.contract.content"
        label="Document Content"
        placeholder="document content"
        validation={
          CompanyCompanyInfoContractAgreementContractContentValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CompanyCompanyInfoContractAgreementContractId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractIdValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.id"
        label="Document Id"
        placeholder="document id"
        validation={CompanyCompanyInfoContractAgreementContractIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function CompanyCompanyInfoContractAgreementContractMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          CompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractMetadataLivenessValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function CompanyCompanyInfoContractAgreementContractMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoContractAgreementContractMetadataLivenessValidation
      }
    >
      <Field.BooleanInput
        name="company.company_info.contract_agreement.contract.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          CompanyCompanyInfoContractAgreementContractMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function CompanyCompanyInfoContractAgreementContractMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          CompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function CompanyCompanyInfoContractAgreementContractMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractMimetypeValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={
          CompanyCompanyInfoContractAgreementContractMimetypeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CompanyCompanyInfoContractAgreementContractName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractNameValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.name"
        label="Document Name"
        placeholder="document name"
        validation={CompanyCompanyInfoContractAgreementContractNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementContractOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CompanyCompanyInfoContractAgreementContractOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementContractOidValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.contract.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CompanyCompanyInfoContractAgreementContractOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementPrintNameValidation = {
  minLength: { value: 1, message: "Print Name requires minimum length of 1" },
};

export function CompanyCompanyInfoContractAgreementPrintName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementPrintNameValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.print_name"
        label="Print Name"
        placeholder="print name"
        validation={CompanyCompanyInfoContractAgreementPrintNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoContractAgreementSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function CompanyCompanyInfoContractAgreementSignedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoContractAgreementSignedAtValidation}
    >
      <Field.Input
        name="company.company_info.contract_agreement.signed_at"
        label="Signed At"
        placeholder="signed at"
        validation={CompanyCompanyInfoContractAgreementSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CompanyCompanyInfoInsuranceDocumentAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentAidValidation}
    >
      <Field.Input
        name="company.company_info.insurance_document.aid"
        label="Author Id"
        placeholder="author id"
        validation={CompanyCompanyInfoInsuranceDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CompanyCompanyInfoInsuranceDocumentCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentCidValidation}
    >
      <Field.Input
        name="company.company_info.insurance_document.cid"
        label="Company Id"
        placeholder="company id"
        validation={CompanyCompanyInfoInsuranceDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function CompanyCompanyInfoInsuranceDocumentContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentContentValidation}
    >
      <Field.File
        name="company.company_info.insurance_document.content"
        label="Document Content"
        placeholder="document content"
        validation={CompanyCompanyInfoInsuranceDocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CompanyCompanyInfoInsuranceDocumentId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentIdValidation}
    >
      <Field.Input
        name="company.company_info.insurance_document.id"
        label="Document Id"
        placeholder="document id"
        validation={CompanyCompanyInfoInsuranceDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CompanyCompanyInfoInsuranceDocumentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="company.company_info.insurance_document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          CompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CompanyCompanyInfoInsuranceDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="company.company_info.insurance_document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          CompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CompanyCompanyInfoInsuranceDocumentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="company.company_info.insurance_document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          CompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function CompanyCompanyInfoInsuranceDocumentMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentMimetypeValidation}
    >
      <Field.Input
        name="company.company_info.insurance_document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={CompanyCompanyInfoInsuranceDocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CompanyCompanyInfoInsuranceDocumentName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentNameValidation}
    >
      <Field.Input
        name="company.company_info.insurance_document.name"
        label="Document Name"
        placeholder="document name"
        validation={CompanyCompanyInfoInsuranceDocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoInsuranceDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CompanyCompanyInfoInsuranceDocumentOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyCompanyInfoInsuranceDocumentOidValidation}
    >
      <Field.Input
        name="company.company_info.insurance_document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CompanyCompanyInfoInsuranceDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoTradeBodyNameValidation = {
  required: { value: true, message: "Trade Body Name is required." },
  minLength: {
    value: 1,
    message: "Trade Body Name requires minimum length of 1",
  },
};

export function CompanyCompanyInfoTradeBodyName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyInfoTradeBodyNameValidation}>
      <Field.Input
        name="company.company_info.trade_body_name"
        label="Trade Body Name"
        placeholder="trade body name"
        validation={CompanyCompanyInfoTradeBodyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoTradeBodyNumberValidation = {
  minLength: {
    value: 1,
    message: "Trade Body Number requires minimum length of 1",
  },
};

export function CompanyCompanyInfoTradeBodyNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyInfoTradeBodyNumberValidation}>
      <Field.Input
        name="company.company_info.trade_body_number"
        label="Trade Body Number"
        placeholder="trade body number"
        validation={CompanyCompanyInfoTradeBodyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoTradeBodyValidation = {
  required: { value: true, message: "Trade Body is required." },
};

export function CompanyCompanyInfoTradeBody(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyCompanyInfoTradeBodyValidation}>
      <Field.Select
        name="company.company_info.trade_body"
        label="Trade Body"
        placeholder="trade body"
        options={[
          { name: "None", value: "none" },
          { name: "Acrib", value: "acrib" },
          { name: "Aphc", value: "aphc" },
          { name: "Assure", value: "assure" },
          { name: "Certass", value: "certass" },
          { name: "Elecsa", value: "elecsa" },
          { name: "Fensa", value: "fensa" },
          { name: "Feta", value: "feta" },
          { name: "Gas Safe", value: "gas_safe" },
          { name: "Hetas", value: "hetas" },
          { name: "Napit", value: "napit" },
          { name: "Nfrc", value: "nfrc" },
          { name: "Niceic", value: "niceic" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoTradeTypeNameValidation = {
  required: { value: true, message: "Trade Type Name is required." },
  minLength: {
    value: 1,
    message: "Trade Type Name requires minimum length of 1",
  },
};

export function CompanyCompanyInfoTradeTypeName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyInfoTradeTypeNameValidation}>
      <Field.Input
        name="company.company_info.trade_type_name"
        label="Trade Type Name"
        placeholder="trade type name"
        validation={CompanyCompanyInfoTradeTypeNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoTradeTypeValidation = {
  required: { value: true, message: "Trade Type is required." },
};

export function CompanyCompanyInfoTradeType(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyCompanyInfoTradeTypeValidation}>
      <Field.Select
        name="company.company_info.trade_type"
        label="Trade Type"
        placeholder="trade type"
        options={[
          { name: "Air Conditioning", value: "air_conditioning" },
          { name: "Bathrooms", value: "bathrooms" },
          { name: "Battery Storage", value: "battery_storage" },
          { name: "Blinds And Shutters", value: "blinds_and_shutters" },
          { name: "Carpentry", value: "carpentry" },
          {
            name: "Cctv And Security Installations",
            value: "cctv_and_security_installations",
          },
          { name: "Conservatories", value: "conservatories" },
          { name: "Decking", value: "decking" },
          { name: "Driveways And Patios", value: "driveways_and_patios" },
          { name: "Electrician", value: "electrician" },
          { name: "Ev Charger Installer", value: "ev_charger_installer" },
          { name: "Fencing", value: "fencing" },
          { name: "Fireplaces", value: "fireplaces" },
          {
            name: "Fitted Bedroom Furniture",
            value: "fitted_bedroom_furniture",
          },
          { name: "Floor Layer", value: "floor_layer" },
          { name: "Garage Doors", value: "garage_doors" },
          { name: "Garden Rooms", value: "garden_rooms" },
          { name: "Gas Engineer", value: "gas_engineer" },
          { name: "Gates", value: "gates" },
          { name: "Heat Pumps", value: "heat_pumps" },
          { name: "Heating Systems", value: "heating_systems" },
          { name: "Kitchen Fitter", value: "kitchen_fitter" },
          { name: "Landscaping", value: "landscaping" },
          { name: "Plumbing", value: "plumbing" },
          { name: "Resin Driveways", value: "resin_driveways" },
          {
            name: "Roofing  Excluding Flat Roofs",
            value: "roofing__excluding_flat_roofs",
          },
          { name: "Security Systems", value: "security_systems" },
          { name: "Tiler", value: "tiler" },
          { name: "Verandas", value: "verandas" },
          { name: "Windows And Doors", value: "windows_and_doors" },
          { name: "Multi Trade", value: "multi_trade" },
          { name: "Other Trade", value: "other_trade" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoUseSubcontractorValidation = {
  required: { value: true, message: "Use Subcontractor is required." },
};

export function CompanyCompanyInfoUseSubcontractor(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyCompanyInfoUseSubcontractorValidation}>
      <Field.Select
        name="company.company_info.use_subcontractor"
        label="Use Subcontractor?"
        placeholder="use subcontractor?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyInfoWarrantyLengthValidation = {
  required: { value: true, message: "Warranty Length is required." },
  min: { value: 1, message: "Warranty Length must be great than 1" },
};

export function CompanyCompanyInfoWarrantyLength(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CompanyCompanyInfoWarrantyLengthValidation}>
      <Field.NumberFormatInput
        name="company.company_info.warranty_length"
        label="Warranty Length"
        placeholder="warranty length"
        validation={CompanyCompanyInfoWarrantyLengthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CompanyCompanyLogoAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoAidValidation}>
      <Field.Input
        name="company.company_logo.aid"
        label="Author Id"
        placeholder="author id"
        validation={CompanyCompanyLogoAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CompanyCompanyLogoCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoCidValidation}>
      <Field.Input
        name="company.company_logo.cid"
        label="Company Id"
        placeholder="company id"
        validation={CompanyCompanyLogoCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function CompanyCompanyLogoContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoContentValidation}>
      <Field.File
        name="company.company_logo.content"
        label="Document Content"
        placeholder="document content"
        validation={CompanyCompanyLogoContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CompanyCompanyLogoId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoIdValidation}>
      <Field.Input
        name="company.company_logo.id"
        label="Document Id"
        placeholder="document id"
        validation={CompanyCompanyLogoIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CompanyCompanyLogoMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={CompanyCompanyLogoMetadataCreatedAtValidation}>
      <Field.Input
        name="company.company_logo.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={CompanyCompanyLogoMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CompanyCompanyLogoMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={CompanyCompanyLogoMetadataLivenessValidation}>
      <Field.BooleanInput
        name="company.company_logo.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={CompanyCompanyLogoMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CompanyCompanyLogoMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={CompanyCompanyLogoMetadataUpdatedAtValidation}>
      <Field.Input
        name="company.company_logo.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={CompanyCompanyLogoMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function CompanyCompanyLogoMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoMimetypeValidation}>
      <Field.Input
        name="company.company_logo.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={CompanyCompanyLogoMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CompanyCompanyLogoName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoNameValidation}>
      <Field.Input
        name="company.company_logo.name"
        label="Document Name"
        placeholder="document name"
        validation={CompanyCompanyLogoNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyLogoOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CompanyCompanyLogoOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyCompanyLogoOidValidation}>
      <Field.Input
        name="company.company_logo.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CompanyCompanyLogoOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyCompanyTypeValidation = {
  required: { value: true, message: "Company Type is required." },
};

export function CompanyCompanyType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CompanyCompanyTypeValidation}>
      <Field.RadioSelect
        name="company.company_type"
        label="Company Type"
        placeholder="company type"
        options={[
          { name: "Limited Company", value: "limited_company" },
          { name: "Sole Trader", value: "sole_trader" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CompanyContactInfoContactAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressBuildingNameValidation}
    >
      <Field.Input
        name="company.contact_info.contact_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CompanyContactInfoContactAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CompanyContactInfoContactAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressBuildingNumberValidation}
    >
      <Field.Input
        name="company.contact_info.contact_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CompanyContactInfoContactAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CompanyContactInfoContactAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressCityValidation}
    >
      <Field.Input
        name="company.contact_info.contact_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CompanyContactInfoContactAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CompanyContactInfoContactAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressCountryValidation}
    >
      <Field.Input
        name="company.contact_info.contact_address.country"
        label="Country"
        placeholder="country"
        validation={CompanyContactInfoContactAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CompanyContactInfoContactAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressCountyValidation}
    >
      <Field.Input
        name="company.contact_info.contact_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CompanyContactInfoContactAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CompanyContactInfoContactAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressLine1Validation}
    >
      <Field.Input
        name="company.contact_info.contact_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CompanyContactInfoContactAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CompanyContactInfoContactAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressLine2Validation}
    >
      <Field.Input
        name="company.contact_info.contact_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CompanyContactInfoContactAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CompanyContactInfoContactAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="company.contact_info.contact_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={CompanyContactInfoContactAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CompanyContactInfoContactAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CompanyContactInfoContactAddressPostcodeValidation}
    >
      <Field.Postcode
        name="company.contact_info.contact_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CompanyContactInfoContactAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactEmailValidation = {};

export function CompanyContactInfoContactEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyContactInfoContactEmailValidation}>
      <Field.Input
        name="company.contact_info.contact_email"
        label="Contact Email"
        placeholder="contact email"
        validation={CompanyContactInfoContactEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactNameValidation = {};

export function CompanyContactInfoContactName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyContactInfoContactNameValidation}>
      <Field.Input
        name="company.contact_info.contact_name"
        label="Contact Name"
        placeholder="contact name"
        validation={CompanyContactInfoContactNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoContactPhoneValidation = {};

export function CompanyContactInfoContactPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyContactInfoContactPhoneValidation}>
      <Field.Input
        name="company.contact_info.contact_phone"
        label="Contact Phone Number"
        placeholder="contact phone number"
        validation={CompanyContactInfoContactPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyContactInfoTradingNameValidation = {};

export function CompanyContactInfoTradingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyContactInfoTradingNameValidation}>
      <Field.Input
        name="company.contact_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={CompanyContactInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyEmailsValidation = {
  disabled: { value: true, message: "Emails input is read only or disabled" },
};

export function CompanyEmailsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper arrayName="company.emails" initialData={initialData}>
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const CompanyIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CompanyId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyIdValidation}>
      <Field.Input
        name="company.id"
        label="Company Unique Id"
        placeholder="company unique id"
        validation={CompanyIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLifecycleValidation = {
  disabled: {
    value: true,
    message: "Lifecycle input is read only or disabled",
  },
};

export function CompanyLifecycle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyLifecycleValidation}>
      <Field.Select
        name="company.lifecycle"
        label="Company Lifecycle State"
        placeholder="company lifecycle state"
        options={[
          { name: "Registered", value: "registered" },
          { name: "Subscribed", value: "subscribed" },
          { name: "Director Info Provided", value: "director_info_provided" },
          { name: "Onboarded", value: "onboarded" },
          { name: "Insurance Uploaded", value: "insurance_uploaded" },
          { name: "Completed Setup", value: "completed_setup" },
          { name: "Verified", value: "verified" },
          { name: "Declined", value: "declined" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CompanyLimitedCompanyInfoCompanyAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation}
    >
      <Field.Input
        name="company.limited_company_info.company_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          CompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CompanyLimitedCompanyInfoCompanyAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="company.limited_company_info.company_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          CompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoCompanyAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressCityValidation}
    >
      <Field.Input
        name="company.limited_company_info.company_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CompanyLimitedCompanyInfoCompanyAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoCompanyAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressCountryValidation}
    >
      <Field.Input
        name="company.limited_company_info.company_address.country"
        label="Country"
        placeholder="country"
        validation={CompanyLimitedCompanyInfoCompanyAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoCompanyAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressCountyValidation}
    >
      <Field.Input
        name="company.limited_company_info.company_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CompanyLimitedCompanyInfoCompanyAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoCompanyAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressLine1Validation}
    >
      <Field.Input
        name="company.limited_company_info.company_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CompanyLimitedCompanyInfoCompanyAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoCompanyAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressLine2Validation}
    >
      <Field.Input
        name="company.limited_company_info.company_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CompanyLimitedCompanyInfoCompanyAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CompanyLimitedCompanyInfoCompanyAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="company.limited_company_info.company_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CompanyLimitedCompanyInfoCompanyAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyAddressPostcodeValidation}
    >
      <Field.Postcode
        name="company.limited_company_info.company_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CompanyLimitedCompanyInfoCompanyAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyNameValidation = {
  required: { value: true, message: "Company Name is required." },
  minLength: { value: 1, message: "Company Name requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoCompanyName(
  props: FieldProps["Company"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyNameValidation}
    >
      <Field.Company
        name="company.limited_company_info.company_name"
        label="Company Name"
        placeholder="company name"
        validation={CompanyLimitedCompanyInfoCompanyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoCompanyNumberValidation = {
  required: { value: true, message: "Company Number is required." },
  minLength: {
    value: 1,
    message: "Company Number requires minimum length of 1",
  },
};

export function CompanyLimitedCompanyInfoCompanyNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoCompanyNumberValidation}
    >
      <Field.Input
        name="company.limited_company_info.company_number"
        label="Company Number"
        placeholder="company number"
        validation={CompanyLimitedCompanyInfoCompanyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CompanyLimitedCompanyInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressBuildingNameValidation}
    >
      <Field.Input
        name="company.limited_company_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          CompanyLimitedCompanyInfoTradingAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CompanyLimitedCompanyInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="company.limited_company_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          CompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressCityValidation}
    >
      <Field.Input
        name="company.limited_company_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CompanyLimitedCompanyInfoTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressCountryValidation}
    >
      <Field.Input
        name="company.limited_company_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={CompanyLimitedCompanyInfoTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressCountyValidation}
    >
      <Field.Input
        name="company.limited_company_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CompanyLimitedCompanyInfoTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressLine1Validation}
    >
      <Field.Input
        name="company.limited_company_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CompanyLimitedCompanyInfoTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CompanyLimitedCompanyInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressLine2Validation}
    >
      <Field.Input
        name="company.limited_company_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CompanyLimitedCompanyInfoTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CompanyLimitedCompanyInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="company.limited_company_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CompanyLimitedCompanyInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CompanyLimitedCompanyInfoTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="company.limited_company_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CompanyLimitedCompanyInfoTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyLimitedCompanyInfoVatNumberValidation = {
  minLength: { value: 1, message: "Vat Number requires minimum length of 1" },
  pattern: {
    value: /^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/,
    message: "Vat Number input is invalid",
  },
};

export function CompanyLimitedCompanyInfoVatNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyLimitedCompanyInfoVatNumberValidation}>
      <Field.Input
        name="company.limited_company_info.vat_number"
        label="Vat Number"
        placeholder="vat number"
        validation={CompanyLimitedCompanyInfoVatNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CompanyMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyMetadataCreatedAtValidation}>
      <Field.Input
        name="company.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={CompanyMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CompanyMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={CompanyMetadataLivenessValidation}>
      <Field.BooleanInput
        name="company.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={CompanyMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CompanyMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyMetadataUpdatedAtValidation}>
      <Field.Input
        name="company.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={CompanyMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CompanyOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyOidValidation}>
      <Field.Input
        name="company.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CompanyOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyQuotePreferenceValidation = {};

export function CompanyQuotePreference(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CompanyQuotePreferenceValidation}>
      <Field.RadioSelect
        name="company.quote_preference"
        label="Quote Preference"
        placeholder="quote preference"
        options={[
          { name: "No Preference", value: "no_preference" },
          { name: "Kanda", value: "kanda" },
          { name: "Custom", value: "custom" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyReferralCodeValidation = {};

export function CompanyReferralCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyReferralCodeValidation}>
      <Field.Input
        name="company.referral_code"
        label="Optional Referral Code Used For The Sign Up"
        placeholder="optional referral code used for the sign up"
        validation={CompanyReferralCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySkipDepositValidation = {};

export function CompanySkipDeposit(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CompanySkipDepositValidation}>
      <Field.RadioSelect
        name="company.skip_deposit"
        label="Company Is Allowed To Take Own Deposit"
        placeholder="company is allowed to take own deposit"
        options={[
          { name: "Yes", value: "Yes" },
          { name: "No", value: "No" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySolarCompanyInfoElectricalTradeAssociationNumberValidation =
  {
    minLength: {
      value: 1,
      message:
        "Electrical Trade Association Number requires minimum length of 1",
    },
  };

export function CompanySolarCompanyInfoElectricalTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanySolarCompanyInfoElectricalTradeAssociationNumberValidation
      }
    >
      <Field.Input
        name="company.solar_company_info.electrical_trade_association_number"
        label="Electrical Trade Association Number"
        placeholder="electrical trade association number"
        validation={
          CompanySolarCompanyInfoElectricalTradeAssociationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySolarCompanyInfoElectricalTradeAssociationValidation = {
  required: {
    value: true,
    message: "Electrical Trade Association is required.",
  },
};

export function CompanySolarCompanyInfoElectricalTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={CompanySolarCompanyInfoElectricalTradeAssociationValidation}
    >
      <Field.Select
        name="company.solar_company_info.electrical_trade_association"
        label="Electrical Trade Association"
        placeholder="electrical trade association"
        options={[
          { name: "Niceic", value: "niceic" },
          { name: "Napit", value: "napit" },
          { name: "None", value: "none" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySolarCompanyInfoEpvsRegistrationNumberValidation = {
  required: { value: true, message: "Epvs Registration Number is required." },
  minLength: {
    value: 1,
    message: "Epvs Registration Number requires minimum length of 1",
  },
};

export function CompanySolarCompanyInfoEpvsRegistrationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySolarCompanyInfoEpvsRegistrationNumberValidation}
    >
      <Field.Input
        name="company.solar_company_info.epvs_registration_number"
        label="EPVS Registration Number"
        placeholder="EPVS registration number"
        validation={CompanySolarCompanyInfoEpvsRegistrationNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySolarCompanyInfoSolarTradeAssociationNumberValidation = {
  required: {
    value: true,
    message: "Solar Trade Association Number is required.",
  },
  minLength: {
    value: 1,
    message: "Solar Trade Association Number requires minimum length of 1",
  },
};

export function CompanySolarCompanyInfoSolarTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySolarCompanyInfoSolarTradeAssociationNumberValidation}
    >
      <Field.Input
        name="company.solar_company_info.solar_trade_association_number"
        label="Solar Trade Association Number"
        placeholder="solar trade association number"
        validation={
          CompanySolarCompanyInfoSolarTradeAssociationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySolarCompanyInfoSolarTradeAssociationValidation = {
  required: { value: true, message: "Solar Trade Association is required." },
};

export function CompanySolarCompanyInfoSolarTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={CompanySolarCompanyInfoSolarTradeAssociationValidation}
    >
      <Field.Select
        name="company.solar_company_info.solar_trade_association"
        label="Solar Trade Association"
        placeholder="solar trade association"
        options={[
          { name: "Msc", value: "msc" },
          { name: "Heis", value: "heis" },
          { name: "Recc", value: "recc" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoNationalInsuranceNumberValidation = {
  minLength: {
    value: 1,
    message: "National Insurance Number requires minimum length of 1",
  },
};

export function CompanySoleTraderInfoNationalInsuranceNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoNationalInsuranceNumberValidation}
    >
      <Field.Input
        name="company.sole_trader_info.national_insurance_number"
        label="National Insurance Number"
        placeholder="national insurance number"
        validation={CompanySoleTraderInfoNationalInsuranceNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CompanySoleTraderInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressBuildingNameValidation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CompanySoleTraderInfoTradingAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CompanySoleTraderInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressBuildingNumberValidation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CompanySoleTraderInfoTradingAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CompanySoleTraderInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressCityValidation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CompanySoleTraderInfoTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CompanySoleTraderInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressCountryValidation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={CompanySoleTraderInfoTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CompanySoleTraderInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressCountyValidation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CompanySoleTraderInfoTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CompanySoleTraderInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressLine1Validation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CompanySoleTraderInfoTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CompanySoleTraderInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressLine2Validation}
    >
      <Field.Input
        name="company.sole_trader_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CompanySoleTraderInfoTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CompanySoleTraderInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="company.sole_trader_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CompanySoleTraderInfoTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CompanySoleTraderInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CompanySoleTraderInfoTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="company.sole_trader_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CompanySoleTraderInfoTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanySoleTraderInfoTradingNameValidation = {
  required: { value: true, message: "Trading Name is required." },
  minLength: { value: 1, message: "Trading Name requires minimum length of 1" },
};

export function CompanySoleTraderInfoTradingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanySoleTraderInfoTradingNameValidation}>
      <Field.Input
        name="company.sole_trader_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={CompanySoleTraderInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyUsersDirectorInfoDateOfBirthArrayInputValidation = {};

export function CompanyUsersDirectorInfoDateOfBirthArrayInput(props: any) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={CompanyUsersDirectorInfoDateOfBirthArrayInputValidation}
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="date of birth"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function CompanyUsersDirectorInfoHomeAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function CompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressCityArrayInputValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CompanyUsersDirectorInfoHomeAddressCityArrayInput(props: any) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={CompanyUsersDirectorInfoHomeAddressCityArrayInputValidation}
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressCountryArrayInputValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CompanyUsersDirectorInfoHomeAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressCountyArrayInputValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CompanyUsersDirectorInfoHomeAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressLine1ArrayInputValidation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CompanyUsersDirectorInfoHomeAddressLine1ArrayInput(props: any) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressLine2ArrayInputValidation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CompanyUsersDirectorInfoHomeAddressLine2ArrayInput(props: any) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoHomeAddressPostcodeArrayInputValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CompanyUsersDirectorInfoHomeAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoHomeAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersDirectorInfoVerificationStatusArraySelectValidation = {
  disabled: {
    value: true,
    message: "Verification Status input is read only or disabled",
  },
};

export function CompanyUsersDirectorInfoVerificationStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="verification_status">
      <Field.Validator
        validation={
          CompanyUsersDirectorInfoVerificationStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Verification Status"
          placeholder="Verification Status"
          label="Verification Status"
          placeholder="verification status"
          options={[
            { name: "Not Verified", value: "not_verified" },
            { name: "Verification Submitted", value: "verification_submitted" },
            { name: "Verification Declined", value: "verification_declined" },
            { name: "Verified", value: "verified" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersEmailArrayInputValidation = {
  required: { value: true, message: "Email is required." },
};

export function CompanyUsersEmailArrayInput(props: any) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator validation={CompanyUsersEmailArrayInputValidation}>
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersFirstNameArrayInputValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function CompanyUsersFirstNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator validation={CompanyUsersFirstNameArrayInputValidation}>
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersLastNameArrayInputValidation = {
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function CompanyUsersLastNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator validation={CompanyUsersLastNameArrayInputValidation}>
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersMobileArrayInputValidation = {
  minLength: { value: 1, message: "Mobile requires minimum length of 1" },
};

export function CompanyUsersMobileArrayInput(props: any) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator validation={CompanyUsersMobileArrayInputValidation}>
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersRoleArraySelectValidation = {
  required: { value: true, message: "Role is required." },
};

export function CompanyUsersRoleArraySelect(props: any) {
  return (
    <Field.Array.Input name="role">
      <Field.Validator validation={CompanyUsersRoleArrayInputValidation}>
        <Field.RadioSelect
          label="Role"
          placeholder="Role"
          label="Company Role"
          placeholder="company role"
          options={[
            { name: "Company-Admin", value: "company-admin" },
            { name: "Company-Manager", value: "company-manager" },
            { name: "Company-Staff", value: "company-staff" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CompanyUsersValidation = {};

export function CompanyUsersArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper arrayName="company.users" initialData={initialData}>
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export function CompanyForm(props: any) {
  return (
    <>
      <CompanyAid {...props} />
      <CompanyBankAccountAccountName {...props} />
      <CompanyBankAccountAccountNumber {...props} />
      <CompanyBankAccountMonthsHeld {...props} />
      <CompanyBankAccountSortCode {...props} />
      <CompanyBilling {...props} />
      <CompanyCid {...props} />
      <CompanyCompanyInfoAverageJobValue {...props} />
      <CompanyCompanyInfoAverageMonthlyJobs {...props} />
      <CompanyCompanyInfoContractAgreementAgreedTermsAndConditions {...props} />
      <CompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKanda {...props} />
      <CompanyCompanyInfoContractAgreementContractAid {...props} />
      <CompanyCompanyInfoContractAgreementContractCid {...props} />
      <CompanyCompanyInfoContractAgreementContractContent {...props} />
      <CompanyCompanyInfoContractAgreementContractId {...props} />
      <CompanyCompanyInfoContractAgreementContractMetadataCreatedAt
        {...props}
      />
      <CompanyCompanyInfoContractAgreementContractMetadataLiveness {...props} />
      <CompanyCompanyInfoContractAgreementContractMetadataUpdatedAt
        {...props}
      />
      <CompanyCompanyInfoContractAgreementContractMimetype {...props} />
      <CompanyCompanyInfoContractAgreementContractName {...props} />
      <CompanyCompanyInfoContractAgreementContractOid {...props} />
      <CompanyCompanyInfoContractAgreementPrintName {...props} />
      <CompanyCompanyInfoContractAgreementSignedAt {...props} />
      <CompanyCompanyInfoInsuranceDocumentAid {...props} />
      <CompanyCompanyInfoInsuranceDocumentCid {...props} />
      <CompanyCompanyInfoInsuranceDocumentContent {...props} />
      <CompanyCompanyInfoInsuranceDocumentId {...props} />
      <CompanyCompanyInfoInsuranceDocumentMetadataCreatedAt {...props} />
      <CompanyCompanyInfoInsuranceDocumentMetadataLiveness {...props} />
      <CompanyCompanyInfoInsuranceDocumentMetadataUpdatedAt {...props} />
      <CompanyCompanyInfoInsuranceDocumentMimetype {...props} />
      <CompanyCompanyInfoInsuranceDocumentName {...props} />
      <CompanyCompanyInfoInsuranceDocumentOid {...props} />
      <CompanyCompanyInfoTradeBodyName {...props} />
      <CompanyCompanyInfoTradeBodyNumber {...props} />
      <CompanyCompanyInfoTradeBody {...props} />
      <CompanyCompanyInfoTradeTypeName {...props} />
      <CompanyCompanyInfoTradeType {...props} />
      <CompanyCompanyInfoUseSubcontractor {...props} />
      <CompanyCompanyInfoWarrantyLength {...props} />
      <CompanyCompanyLogoAid {...props} />
      <CompanyCompanyLogoCid {...props} />
      <CompanyCompanyLogoContent {...props} />
      <CompanyCompanyLogoId {...props} />
      <CompanyCompanyLogoMetadataCreatedAt {...props} />
      <CompanyCompanyLogoMetadataLiveness {...props} />
      <CompanyCompanyLogoMetadataUpdatedAt {...props} />
      <CompanyCompanyLogoMimetype {...props} />
      <CompanyCompanyLogoName {...props} />
      <CompanyCompanyLogoOid {...props} />
      <CompanyCompanyType {...props} />
      <CompanyContactInfoContactAddressBuildingName {...props} />
      <CompanyContactInfoContactAddressBuildingNumber {...props} />
      <CompanyContactInfoContactAddressCity {...props} />
      <CompanyContactInfoContactAddressCountry {...props} />
      <CompanyContactInfoContactAddressCounty {...props} />
      <CompanyContactInfoContactAddressLine1 {...props} />
      <CompanyContactInfoContactAddressLine2 {...props} />
      <CompanyContactInfoContactAddressMonthsAtAddress {...props} />
      <CompanyContactInfoContactAddressPostcode {...props} />
      <CompanyContactInfoContactEmail {...props} />
      <CompanyContactInfoContactName {...props} />
      <CompanyContactInfoContactPhone {...props} />
      <CompanyContactInfoTradingName {...props} />
      <CompanyId {...props} />
      <CompanyLifecycle {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressBuildingName {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressBuildingNumber {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressCity {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressCountry {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressCounty {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressLine1 {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressLine2 {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressMonthsAtAddress {...props} />
      <CompanyLimitedCompanyInfoCompanyAddressPostcode {...props} />
      <CompanyLimitedCompanyInfoCompanyName {...props} />
      <CompanyLimitedCompanyInfoCompanyNumber {...props} />
      <CompanyLimitedCompanyInfoTradingAddressBuildingName {...props} />
      <CompanyLimitedCompanyInfoTradingAddressBuildingNumber {...props} />
      <CompanyLimitedCompanyInfoTradingAddressCity {...props} />
      <CompanyLimitedCompanyInfoTradingAddressCountry {...props} />
      <CompanyLimitedCompanyInfoTradingAddressCounty {...props} />
      <CompanyLimitedCompanyInfoTradingAddressLine1 {...props} />
      <CompanyLimitedCompanyInfoTradingAddressLine2 {...props} />
      <CompanyLimitedCompanyInfoTradingAddressMonthsAtAddress {...props} />
      <CompanyLimitedCompanyInfoTradingAddressPostcode {...props} />
      <CompanyLimitedCompanyInfoVatNumber {...props} />
      <CompanyMetadataCreatedAt {...props} />
      <CompanyMetadataLiveness {...props} />
      <CompanyMetadataUpdatedAt {...props} />
      <CompanyOid {...props} />
      <CompanyQuotePreference {...props} />
      <CompanyReferralCode {...props} />
      <CompanySkipDeposit {...props} />
      <CompanySolarCompanyInfoElectricalTradeAssociationNumber {...props} />
      <CompanySolarCompanyInfoElectricalTradeAssociation {...props} />
      <CompanySolarCompanyInfoEpvsRegistrationNumber {...props} />
      <CompanySolarCompanyInfoSolarTradeAssociationNumber {...props} />
      <CompanySolarCompanyInfoSolarTradeAssociation {...props} />
      <CompanySoleTraderInfoNationalInsuranceNumber {...props} />
      <CompanySoleTraderInfoTradingAddressBuildingName {...props} />
      <CompanySoleTraderInfoTradingAddressBuildingNumber {...props} />
      <CompanySoleTraderInfoTradingAddressCity {...props} />
      <CompanySoleTraderInfoTradingAddressCountry {...props} />
      <CompanySoleTraderInfoTradingAddressCounty {...props} />
      <CompanySoleTraderInfoTradingAddressLine1 {...props} />
      <CompanySoleTraderInfoTradingAddressLine2 {...props} />
      <CompanySoleTraderInfoTradingAddressMonthsAtAddress {...props} />
      <CompanySoleTraderInfoTradingAddressPostcode {...props} />
      <CompanySoleTraderInfoTradingName {...props} />
    </>
  );
}

export const EmployedDetailsEmployerNameValidation = {
  required: { value: true, message: "Employer Name is required." },
  minLength: {
    value: 1,
    message: "Employer Name requires minimum length of 1",
  },
};

export function EmployedDetailsEmployerName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EmployedDetailsEmployerNameValidation}>
      <Field.Input
        name="employed_details.employer_name"
        label="Employer Name"
        placeholder="employer name"
        validation={EmployedDetailsEmployerNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmployedDetailsMainOccupationValidation = {
  required: { value: true, message: "Main Occupation is required." },
  minLength: {
    value: 1,
    message: "Main Occupation requires minimum length of 1",
  },
};

export function EmployedDetailsMainOccupation(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EmployedDetailsMainOccupationValidation}>
      <Field.Input
        name="employed_details.main_occupation"
        label="Main Occupation"
        placeholder="main occupation"
        validation={EmployedDetailsMainOccupationValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmployedDetailsMonthsEmployedValidation = {
  required: { value: true, message: "Months Employed is required." },
  min: { value: 1, message: "Months Employed must be great than 1" },
  max: {
    value: 2147483647,
    message: "Months Employed must be smaller than 2.147483647e+09",
  },
};

export function EmployedDetailsMonthsEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EmployedDetailsMonthsEmployedValidation}>
      <Field.NumberFormatInput
        name="employed_details.months_employed"
        label="Months Employed"
        placeholder="months employed"
        validation={EmployedDetailsMonthsEmployedValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function EmployedDetailsForm(props: any) {
  return (
    <>
      <EmployedDetailsEmployerName {...props} />
      <EmployedDetailsMainOccupation {...props} />
      <EmployedDetailsMonthsEmployed {...props} />
    </>
  );
}

export const FinanceDetailsBankrupcyOrIvaInLast5YearsValidation = {};

export function FinanceDetailsBankrupcyOrIvaInLast5Years(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={FinanceDetailsBankrupcyOrIvaInLast5YearsValidation}
    >
      <Field.RadioSelect
        name="finance_details.bankrupcy_or_iva_in_last_5_years"
        label="Any Bankrupcy Or IVA In The Last 5 Years?"
        placeholder="any bankrupcy or IVA in the last 5 years?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const FinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function FinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          FinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const FinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function FinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          FinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const FinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function FinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          FinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const FinanceDetailsExpendituresValidation = {};

export function FinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export function FinanceDetailsForm(props: any) {
  return (
    <>
      <FinanceDetailsBankrupcyOrIvaInLast5Years {...props} />
    </>
  );
}

export const IdentityDateOfBirthValidation = {};

export function IdentityDateOfBirth(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityDateOfBirthValidation}>
      <Field.Input
        name="identity.date_of_birth"
        label="Date Of Birth"
        placeholder="date of birth"
        validation={IdentityDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function IdentityEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityEmailValidation}>
      <Field.Input
        name="identity.email"
        label="Email"
        placeholder="email"
        validation={IdentityEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function IdentityFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityFirstNameValidation}>
      <Field.Input
        name="identity.first_name"
        label="First Name"
        placeholder="first name"
        validation={IdentityFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function IdentityHomeAddressBuildingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressBuildingNameValidation}>
      <Field.Input
        name="identity.home_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={IdentityHomeAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function IdentityHomeAddressBuildingNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressBuildingNumberValidation}>
      <Field.Input
        name="identity.home_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={IdentityHomeAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function IdentityHomeAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressCityValidation}>
      <Field.Input
        name="identity.home_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={IdentityHomeAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function IdentityHomeAddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressCountryValidation}>
      <Field.Input
        name="identity.home_address.country"
        label="Country"
        placeholder="country"
        validation={IdentityHomeAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function IdentityHomeAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressCountyValidation}>
      <Field.Input
        name="identity.home_address.county"
        label="County / State"
        placeholder="county / state"
        validation={IdentityHomeAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function IdentityHomeAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressLine1Validation}>
      <Field.Input
        name="identity.home_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={IdentityHomeAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function IdentityHomeAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressLine2Validation}>
      <Field.Input
        name="identity.home_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={IdentityHomeAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function IdentityHomeAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={IdentityHomeAddressMonthsAtAddressValidation}>
      <Field.NumberFormatInput
        name="identity.home_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={IdentityHomeAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityHomeAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function IdentityHomeAddressPostcode(props: FieldProps["Postcode"]) {
  return (
    <Field.Validator validation={IdentityHomeAddressPostcodeValidation}>
      <Field.Postcode
        name="identity.home_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={IdentityHomeAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function IdentityLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityLastNameValidation}>
      <Field.Input
        name="identity.last_name"
        label="Last Name"
        placeholder="last name"
        validation={IdentityLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const IdentityMobileValidation = {
  required: { value: true, message: "Mobile is required." },
  minLength: { value: 1, message: "Mobile requires minimum length of 1" },
};

export function IdentityMobile(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={IdentityMobileValidation}>
      <Field.Input
        name="identity.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={IdentityMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function IdentityForm(props: any) {
  return (
    <>
      <IdentityDateOfBirth {...props} />
      <IdentityEmail {...props} />
      <IdentityFirstName {...props} />
      <IdentityHomeAddressBuildingName {...props} />
      <IdentityHomeAddressBuildingNumber {...props} />
      <IdentityHomeAddressCity {...props} />
      <IdentityHomeAddressCountry {...props} />
      <IdentityHomeAddressCounty {...props} />
      <IdentityHomeAddressLine1 {...props} />
      <IdentityHomeAddressLine2 {...props} />
      <IdentityHomeAddressMonthsAtAddress {...props} />
      <IdentityHomeAddressPostcode {...props} />
      <IdentityLastName {...props} />
      <IdentityMobile {...props} />
    </>
  );
}

export const EmploymentDetailsEmployedDetailsEmployerNameValidation = {
  required: { value: true, message: "Employer Name is required." },
  minLength: {
    value: 1,
    message: "Employer Name requires minimum length of 1",
  },
};

export function EmploymentDetailsEmployedDetailsEmployerName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsEmployedDetailsEmployerNameValidation}
    >
      <Field.Input
        name="employment_details.employed_details.employer_name"
        label="Employer Name"
        placeholder="employer name"
        validation={EmploymentDetailsEmployedDetailsEmployerNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsEmployedDetailsMainOccupationValidation = {
  required: { value: true, message: "Main Occupation is required." },
  minLength: {
    value: 1,
    message: "Main Occupation requires minimum length of 1",
  },
};

export function EmploymentDetailsEmployedDetailsMainOccupation(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsEmployedDetailsMainOccupationValidation}
    >
      <Field.Input
        name="employment_details.employed_details.main_occupation"
        label="Main Occupation"
        placeholder="main occupation"
        validation={EmploymentDetailsEmployedDetailsMainOccupationValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsEmployedDetailsMonthsEmployedValidation = {
  required: { value: true, message: "Months Employed is required." },
  min: { value: 1, message: "Months Employed must be great than 1" },
  max: {
    value: 2147483647,
    message: "Months Employed must be smaller than 2.147483647e+09",
  },
};

export function EmploymentDetailsEmployedDetailsMonthsEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsEmployedDetailsMonthsEmployedValidation}
    >
      <Field.NumberFormatInput
        name="employment_details.employed_details.months_employed"
        label="Months Employed"
        placeholder="months employed"
        validation={EmploymentDetailsEmployedDetailsMonthsEmployedValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsEmploymentStatusValidation = {
  required: { value: true, message: "Employment Status is required." },
};

export function EmploymentDetailsEmploymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EmploymentDetailsEmploymentStatusValidation}>
      <Field.Select
        name="employment_details.employment_status"
        label="Employment Status"
        placeholder="employment status"
        options={[
          { name: "Employed", value: "employed" },
          { name: "Self Employed", value: "self_employed" },
          { name: "Not Employed", value: "not_employed" },
          { name: "Retired", value: "retired" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsGrossAnnualIncomeAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EmploymentDetailsGrossAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsGrossAnnualIncomeAmountValidation}
    >
      <Field.NumberFormatInput
        name="employment_details.gross_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EmploymentDetailsGrossAnnualIncomeAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsGrossAnnualIncomeCurrencyValidation = {};

export function EmploymentDetailsGrossAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EmploymentDetailsGrossAnnualIncomeCurrencyValidation}
    >
      <Field.RadioSelect
        name="employment_details.gross_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsHouseholdAnnualIncomeAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EmploymentDetailsHouseholdAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsHouseholdAnnualIncomeAmountValidation}
    >
      <Field.NumberFormatInput
        name="employment_details.household_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EmploymentDetailsHouseholdAnnualIncomeAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsHouseholdAnnualIncomeCurrencyValidation = {};

export function EmploymentDetailsHouseholdAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EmploymentDetailsHouseholdAnnualIncomeCurrencyValidation}
    >
      <Field.RadioSelect
        name="employment_details.household_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation = {
  required: { value: true, message: "Source Of Income is required." },
};

export function EmploymentDetailsNotEmployedDetailsSourceOfIncome(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation}
    >
      <Field.Select
        name="employment_details.not_employed_details.source_of_income"
        label="Source Of Income"
        placeholder="source of income"
        options={[
          { name: "Partner", value: "partner" },
          { name: "Benefits", value: "benefits" },
          { name: "Maintenance", value: "maintenance" },
          { name: "Disabled", value: "disabled" },
          { name: "Full-Time Carer", value: "full-time carer" },
          { name: "Homemaker", value: "homemaker" },
          { name: "Permanent Dla", value: "permanent dla" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsSelfEmployedDetailsBusinessNameValidation = {
  required: { value: true, message: "Business Name is required." },
  minLength: {
    value: 1,
    message: "Business Name requires minimum length of 1",
  },
};

export function EmploymentDetailsSelfEmployedDetailsBusinessName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsSelfEmployedDetailsBusinessNameValidation}
    >
      <Field.Input
        name="employment_details.self_employed_details.business_name"
        label="Business Name"
        placeholder="business name"
        validation={EmploymentDetailsSelfEmployedDetailsBusinessNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function EmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="employment_details.self_employed_details.months_self_employed"
        label="Months Self Employed"
        placeholder="months self employed"
        validation={
          EmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation = {
  required: { value: true, message: "Type Of Business is required." },
  minLength: {
    value: 1,
    message: "Type Of Business requires minimum length of 1",
  },
};

export function EmploymentDetailsSelfEmployedDetailsTypeOfBusiness(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation}
    >
      <Field.Input
        name="employment_details.self_employed_details.type_of_business"
        label="Type Of Business"
        placeholder="type of business"
        validation={
          EmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export function EmploymentDetailsForm(props: any) {
  return (
    <>
      <EmploymentDetailsEmployedDetailsEmployerName {...props} />
      <EmploymentDetailsEmployedDetailsMainOccupation {...props} />
      <EmploymentDetailsEmployedDetailsMonthsEmployed {...props} />
      <EmploymentDetailsEmploymentStatus {...props} />
      <EmploymentDetailsGrossAnnualIncomeAmount {...props} />
      <EmploymentDetailsGrossAnnualIncomeCurrency {...props} />
      <EmploymentDetailsHouseholdAnnualIncomeAmount {...props} />
      <EmploymentDetailsHouseholdAnnualIncomeCurrency {...props} />
      <EmploymentDetailsNotEmployedDetailsSourceOfIncome {...props} />
      <EmploymentDetailsSelfEmployedDetailsBusinessName {...props} />
      <EmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed {...props} />
      <EmploymentDetailsSelfEmployedDetailsTypeOfBusiness {...props} />
    </>
  );
}

export const JobCreditStateCurrentStatusValidation = {
  disabled: {
    value: true,
    message: "Current Status input is read only or disabled",
  },
};

export function JobCreditStateCurrentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobCreditStateCurrentStatusValidation}>
      <Field.Select
        name="job_credit_state.current_status"
        label="Job Credit State Current Status"
        placeholder="job credit state current status"
        options={[
          { name: "Not Submitted", value: "not_submitted" },
          { name: "Accepted Sign Document", value: "accepted_sign_document" },
          {
            name: "Accepted Deposit Required",
            value: "accepted_deposit_required",
          },
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Referred", value: "referred" },
          { name: "Action Lender", value: "action_lender" },
          { name: "Action Customer", value: "action_customer" },
          { name: "Pending", value: "pending" },
          { name: "Finished", value: "finished" },
          { name: "Paid Out", value: "paid_out" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCreditStateHasFinanceApplicationValidation = {
  disabled: {
    value: true,
    message: "Has Finance Application input is read only or disabled",
  },
};

export function JobCreditStateHasFinanceApplication(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={JobCreditStateHasFinanceApplicationValidation}>
      <Field.BooleanInput
        name="job_credit_state.has_finance_application"
        label="Job Has Finance Application"
        placeholder="job has finance application"
        validation={JobCreditStateHasFinanceApplicationValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCreditStateIdValidation = {
  required: { value: true, message: "Id is required." },
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobCreditStateId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCreditStateIdValidation}>
      <Field.Input
        name="job_credit_state.id"
        label="Job Id"
        placeholder="job id"
        validation={JobCreditStateIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function JobCreditStateForm(props: any) {
  return (
    <>
      <JobCreditStateCurrentStatus {...props} />
      <JobCreditStateHasFinanceApplication {...props} />
      <JobCreditStateId {...props} />
    </>
  );
}

export const MoneyTotalAmountVatAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function MoneyTotalAmountVatAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={MoneyTotalAmountVatAmountValidation}>
      <Field.NumberFormatInput
        name="money_total.amount_vat.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={MoneyTotalAmountVatAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const MoneyTotalAmountVatCurrencyValidation = {};

export function MoneyTotalAmountVatCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={MoneyTotalAmountVatCurrencyValidation}>
      <Field.RadioSelect
        name="money_total.amount_vat.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const MoneyTotalAmountVatExclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function MoneyTotalAmountVatExclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={MoneyTotalAmountVatExclusiveAmountValidation}>
      <Field.NumberFormatInput
        name="money_total.amount_vat_exclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={MoneyTotalAmountVatExclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const MoneyTotalAmountVatExclusiveCurrencyValidation = {};

export function MoneyTotalAmountVatExclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={MoneyTotalAmountVatExclusiveCurrencyValidation}
    >
      <Field.RadioSelect
        name="money_total.amount_vat_exclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const MoneyTotalAmountVatInclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function MoneyTotalAmountVatInclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={MoneyTotalAmountVatInclusiveAmountValidation}>
      <Field.NumberFormatInput
        name="money_total.amount_vat_inclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={MoneyTotalAmountVatInclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const MoneyTotalAmountVatInclusiveCurrencyValidation = {};

export function MoneyTotalAmountVatInclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={MoneyTotalAmountVatInclusiveCurrencyValidation}
    >
      <Field.RadioSelect
        name="money_total.amount_vat_inclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export function MoneyTotalForm(props: any) {
  return (
    <>
      <MoneyTotalAmountVatAmount {...props} />
      <MoneyTotalAmountVatCurrency {...props} />
      <MoneyTotalAmountVatExclusiveAmount {...props} />
      <MoneyTotalAmountVatExclusiveCurrency {...props} />
      <MoneyTotalAmountVatInclusiveAmount {...props} />
      <MoneyTotalAmountVatInclusiveCurrency {...props} />
    </>
  );
}

export const SoleTraderInfoNationalInsuranceNumberValidation = {
  minLength: {
    value: 1,
    message: "National Insurance Number requires minimum length of 1",
  },
};

export function SoleTraderInfoNationalInsuranceNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={SoleTraderInfoNationalInsuranceNumberValidation}
    >
      <Field.Input
        name="sole_trader_info.national_insurance_number"
        label="National Insurance Number"
        placeholder="national insurance number"
        validation={SoleTraderInfoNationalInsuranceNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function SoleTraderInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={SoleTraderInfoTradingAddressBuildingNameValidation}
    >
      <Field.Input
        name="sole_trader_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={SoleTraderInfoTradingAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function SoleTraderInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={SoleTraderInfoTradingAddressBuildingNumberValidation}
    >
      <Field.Input
        name="sole_trader_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={SoleTraderInfoTradingAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function SoleTraderInfoTradingAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SoleTraderInfoTradingAddressCityValidation}>
      <Field.Input
        name="sole_trader_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={SoleTraderInfoTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function SoleTraderInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={SoleTraderInfoTradingAddressCountryValidation}>
      <Field.Input
        name="sole_trader_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={SoleTraderInfoTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function SoleTraderInfoTradingAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SoleTraderInfoTradingAddressCountyValidation}>
      <Field.Input
        name="sole_trader_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={SoleTraderInfoTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function SoleTraderInfoTradingAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SoleTraderInfoTradingAddressLine1Validation}>
      <Field.Input
        name="sole_trader_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={SoleTraderInfoTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function SoleTraderInfoTradingAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SoleTraderInfoTradingAddressLine2Validation}>
      <Field.Input
        name="sole_trader_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={SoleTraderInfoTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function SoleTraderInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={SoleTraderInfoTradingAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="sole_trader_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={SoleTraderInfoTradingAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function SoleTraderInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={SoleTraderInfoTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="sole_trader_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={SoleTraderInfoTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SoleTraderInfoTradingNameValidation = {
  required: { value: true, message: "Trading Name is required." },
  minLength: { value: 1, message: "Trading Name requires minimum length of 1" },
};

export function SoleTraderInfoTradingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SoleTraderInfoTradingNameValidation}>
      <Field.Input
        name="sole_trader_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={SoleTraderInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function SoleTraderInfoForm(props: any) {
  return (
    <>
      <SoleTraderInfoNationalInsuranceNumber {...props} />
      <SoleTraderInfoTradingAddressBuildingName {...props} />
      <SoleTraderInfoTradingAddressBuildingNumber {...props} />
      <SoleTraderInfoTradingAddressCity {...props} />
      <SoleTraderInfoTradingAddressCountry {...props} />
      <SoleTraderInfoTradingAddressCounty {...props} />
      <SoleTraderInfoTradingAddressLine1 {...props} />
      <SoleTraderInfoTradingAddressLine2 {...props} />
      <SoleTraderInfoTradingAddressMonthsAtAddress {...props} />
      <SoleTraderInfoTradingAddressPostcode {...props} />
      <SoleTraderInfoTradingName {...props} />
    </>
  );
}

export const AddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function AddressBuildingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressBuildingNameValidation}>
      <Field.Input
        name="address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={AddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function AddressBuildingNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressBuildingNumberValidation}>
      <Field.Input
        name="address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={AddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function AddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressCityValidation}>
      <Field.Input
        name="address.city"
        label="City / Town"
        placeholder="city / town"
        validation={AddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function AddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressCountryValidation}>
      <Field.Input
        name="address.country"
        label="Country"
        placeholder="country"
        validation={AddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function AddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressCountyValidation}>
      <Field.Input
        name="address.county"
        label="County / State"
        placeholder="county / state"
        validation={AddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function AddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressLine1Validation}>
      <Field.Input
        name="address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={AddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function AddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AddressLine2Validation}>
      <Field.Input
        name="address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={AddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function AddressMonthsAtAddress(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={AddressMonthsAtAddressValidation}>
      <Field.NumberFormatInput
        name="address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={AddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function AddressPostcode(props: FieldProps["Postcode"]) {
  return (
    <Field.Validator validation={AddressPostcodeValidation}>
      <Field.Postcode
        name="address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={AddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function AddressForm(props: any) {
  return (
    <>
      <AddressBuildingName {...props} />
      <AddressBuildingNumber {...props} />
      <AddressCity {...props} />
      <AddressCountry {...props} />
      <AddressCounty {...props} />
      <AddressLine1 {...props} />
      <AddressLine2 {...props} />
      <AddressMonthsAtAddress {...props} />
      <AddressPostcode {...props} />
    </>
  );
}

export const CompanyInfoAverageJobValueValidation = {
  required: { value: true, message: "Average Job Value is required." },
  min: { value: 0, message: "Average Job Value must be great than 0" },
  max: {
    value: 2147483647,
    message: "Average Job Value must be smaller than 2.147483647e+09",
  },
};

export function CompanyInfoAverageJobValue(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CompanyInfoAverageJobValueValidation}>
      <Field.NumberFormatInput
        name="company_info.average_job_value"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CompanyInfoAverageJobValueValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoAverageMonthlyJobsValidation = {
  required: { value: true, message: "Average Monthly Jobs is required." },
  min: { value: 1, message: "Average Monthly Jobs must be great than 1" },
  max: {
    value: 2147483647,
    message: "Average Monthly Jobs must be smaller than 2.147483647e+09",
  },
};

export function CompanyInfoAverageMonthlyJobs(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CompanyInfoAverageMonthlyJobsValidation}>
      <Field.NumberFormatInput
        name="company_info.average_monthly_jobs"
        label="Average Monthly Jobs"
        placeholder="average monthly jobs"
        validation={CompanyInfoAverageMonthlyJobsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementAgreedTermsAndConditionsValidation =
  {};

export function CompanyInfoContractAgreementAgreedTermsAndConditions(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        CompanyInfoContractAgreementAgreedTermsAndConditionsValidation
      }
    >
      <Field.RadioSelect
        name="company_info.contract_agreement.agreed_terms_and_conditions"
        label="Agreed Terms And Conditions"
        placeholder="agreed terms and conditions"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation =
  {};

export function CompanyInfoContractAgreementAgreedToBecomeIarOfKanda(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        CompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation
      }
    >
      <Field.RadioSelect
        name="company_info.contract_agreement.agreed_to_become_iar_of_kanda"
        label="Agreed To Become IAR Of Kanda"
        placeholder="agreed to become IAR of Kanda"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CompanyInfoContractAgreementContractAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractAidValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.contract.aid"
        label="Author Id"
        placeholder="author id"
        validation={CompanyInfoContractAgreementContractAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CompanyInfoContractAgreementContractCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractCidValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.contract.cid"
        label="Company Id"
        placeholder="company id"
        validation={CompanyInfoContractAgreementContractCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function CompanyInfoContractAgreementContractContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractContentValidation}
    >
      <Field.File
        name="company_info.contract_agreement.contract.content"
        label="Document Content"
        placeholder="document content"
        validation={CompanyInfoContractAgreementContractContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CompanyInfoContractAgreementContractId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractIdValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.contract.id"
        label="Document Id"
        placeholder="document id"
        validation={CompanyInfoContractAgreementContractIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CompanyInfoContractAgreementContractMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyInfoContractAgreementContractMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="company_info.contract_agreement.contract.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          CompanyInfoContractAgreementContractMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CompanyInfoContractAgreementContractMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={
        CompanyInfoContractAgreementContractMetadataLivenessValidation
      }
    >
      <Field.BooleanInput
        name="company_info.contract_agreement.contract.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          CompanyInfoContractAgreementContractMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CompanyInfoContractAgreementContractMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CompanyInfoContractAgreementContractMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="company_info.contract_agreement.contract.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          CompanyInfoContractAgreementContractMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function CompanyInfoContractAgreementContractMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractMimetypeValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.contract.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={CompanyInfoContractAgreementContractMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CompanyInfoContractAgreementContractName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractNameValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.contract.name"
        label="Document Name"
        placeholder="document name"
        validation={CompanyInfoContractAgreementContractNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementContractOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CompanyInfoContractAgreementContractOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementContractOidValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.contract.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CompanyInfoContractAgreementContractOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementPrintNameValidation = {
  minLength: { value: 1, message: "Print Name requires minimum length of 1" },
};

export function CompanyInfoContractAgreementPrintName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementPrintNameValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.print_name"
        label="Print Name"
        placeholder="print name"
        validation={CompanyInfoContractAgreementPrintNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoContractAgreementSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function CompanyInfoContractAgreementSignedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoContractAgreementSignedAtValidation}
    >
      <Field.Input
        name="company_info.contract_agreement.signed_at"
        label="Signed At"
        placeholder="signed at"
        validation={CompanyInfoContractAgreementSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CompanyInfoInsuranceDocumentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoInsuranceDocumentAidValidation}>
      <Field.Input
        name="company_info.insurance_document.aid"
        label="Author Id"
        placeholder="author id"
        validation={CompanyInfoInsuranceDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CompanyInfoInsuranceDocumentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoInsuranceDocumentCidValidation}>
      <Field.Input
        name="company_info.insurance_document.cid"
        label="Company Id"
        placeholder="company id"
        validation={CompanyInfoInsuranceDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function CompanyInfoInsuranceDocumentContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={CompanyInfoInsuranceDocumentContentValidation}>
      <Field.File
        name="company_info.insurance_document.content"
        label="Document Content"
        placeholder="document content"
        validation={CompanyInfoInsuranceDocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CompanyInfoInsuranceDocumentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoInsuranceDocumentIdValidation}>
      <Field.Input
        name="company_info.insurance_document.id"
        label="Document Id"
        placeholder="document id"
        validation={CompanyInfoInsuranceDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CompanyInfoInsuranceDocumentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoInsuranceDocumentMetadataCreatedAtValidation}
    >
      <Field.Input
        name="company_info.insurance_document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={CompanyInfoInsuranceDocumentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CompanyInfoInsuranceDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoInsuranceDocumentMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="company_info.insurance_document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={CompanyInfoInsuranceDocumentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CompanyInfoInsuranceDocumentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoInsuranceDocumentMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="company_info.insurance_document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={CompanyInfoInsuranceDocumentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function CompanyInfoInsuranceDocumentMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CompanyInfoInsuranceDocumentMimetypeValidation}
    >
      <Field.Input
        name="company_info.insurance_document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={CompanyInfoInsuranceDocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CompanyInfoInsuranceDocumentName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoInsuranceDocumentNameValidation}>
      <Field.Input
        name="company_info.insurance_document.name"
        label="Document Name"
        placeholder="document name"
        validation={CompanyInfoInsuranceDocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoInsuranceDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CompanyInfoInsuranceDocumentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoInsuranceDocumentOidValidation}>
      <Field.Input
        name="company_info.insurance_document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CompanyInfoInsuranceDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoTradeBodyNameValidation = {
  required: { value: true, message: "Trade Body Name is required." },
  minLength: {
    value: 1,
    message: "Trade Body Name requires minimum length of 1",
  },
};

export function CompanyInfoTradeBodyName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoTradeBodyNameValidation}>
      <Field.Input
        name="company_info.trade_body_name"
        label="Trade Body Name"
        placeholder="trade body name"
        validation={CompanyInfoTradeBodyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoTradeBodyNumberValidation = {
  minLength: {
    value: 1,
    message: "Trade Body Number requires minimum length of 1",
  },
};

export function CompanyInfoTradeBodyNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoTradeBodyNumberValidation}>
      <Field.Input
        name="company_info.trade_body_number"
        label="Trade Body Number"
        placeholder="trade body number"
        validation={CompanyInfoTradeBodyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoTradeBodyValidation = {
  required: { value: true, message: "Trade Body is required." },
};

export function CompanyInfoTradeBody(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyInfoTradeBodyValidation}>
      <Field.Select
        name="company_info.trade_body"
        label="Trade Body"
        placeholder="trade body"
        options={[
          { name: "None", value: "none" },
          { name: "Acrib", value: "acrib" },
          { name: "Aphc", value: "aphc" },
          { name: "Assure", value: "assure" },
          { name: "Certass", value: "certass" },
          { name: "Elecsa", value: "elecsa" },
          { name: "Fensa", value: "fensa" },
          { name: "Feta", value: "feta" },
          { name: "Gas Safe", value: "gas_safe" },
          { name: "Hetas", value: "hetas" },
          { name: "Napit", value: "napit" },
          { name: "Nfrc", value: "nfrc" },
          { name: "Niceic", value: "niceic" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoTradeTypeNameValidation = {
  required: { value: true, message: "Trade Type Name is required." },
  minLength: {
    value: 1,
    message: "Trade Type Name requires minimum length of 1",
  },
};

export function CompanyInfoTradeTypeName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CompanyInfoTradeTypeNameValidation}>
      <Field.Input
        name="company_info.trade_type_name"
        label="Trade Type Name"
        placeholder="trade type name"
        validation={CompanyInfoTradeTypeNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoTradeTypeValidation = {
  required: { value: true, message: "Trade Type is required." },
};

export function CompanyInfoTradeType(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyInfoTradeTypeValidation}>
      <Field.Select
        name="company_info.trade_type"
        label="Trade Type"
        placeholder="trade type"
        options={[
          { name: "Air Conditioning", value: "air_conditioning" },
          { name: "Bathrooms", value: "bathrooms" },
          { name: "Battery Storage", value: "battery_storage" },
          { name: "Blinds And Shutters", value: "blinds_and_shutters" },
          { name: "Carpentry", value: "carpentry" },
          {
            name: "Cctv And Security Installations",
            value: "cctv_and_security_installations",
          },
          { name: "Conservatories", value: "conservatories" },
          { name: "Decking", value: "decking" },
          { name: "Driveways And Patios", value: "driveways_and_patios" },
          { name: "Electrician", value: "electrician" },
          { name: "Ev Charger Installer", value: "ev_charger_installer" },
          { name: "Fencing", value: "fencing" },
          { name: "Fireplaces", value: "fireplaces" },
          {
            name: "Fitted Bedroom Furniture",
            value: "fitted_bedroom_furniture",
          },
          { name: "Floor Layer", value: "floor_layer" },
          { name: "Garage Doors", value: "garage_doors" },
          { name: "Garden Rooms", value: "garden_rooms" },
          { name: "Gas Engineer", value: "gas_engineer" },
          { name: "Gates", value: "gates" },
          { name: "Heat Pumps", value: "heat_pumps" },
          { name: "Heating Systems", value: "heating_systems" },
          { name: "Kitchen Fitter", value: "kitchen_fitter" },
          { name: "Landscaping", value: "landscaping" },
          { name: "Plumbing", value: "plumbing" },
          { name: "Resin Driveways", value: "resin_driveways" },
          {
            name: "Roofing  Excluding Flat Roofs",
            value: "roofing__excluding_flat_roofs",
          },
          { name: "Security Systems", value: "security_systems" },
          { name: "Tiler", value: "tiler" },
          { name: "Verandas", value: "verandas" },
          { name: "Windows And Doors", value: "windows_and_doors" },
          { name: "Multi Trade", value: "multi_trade" },
          { name: "Other Trade", value: "other_trade" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoUseSubcontractorValidation = {
  required: { value: true, message: "Use Subcontractor is required." },
};

export function CompanyInfoUseSubcontractor(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CompanyInfoUseSubcontractorValidation}>
      <Field.Select
        name="company_info.use_subcontractor"
        label="Use Subcontractor?"
        placeholder="use subcontractor?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CompanyInfoWarrantyLengthValidation = {
  required: { value: true, message: "Warranty Length is required." },
  min: { value: 1, message: "Warranty Length must be great than 1" },
};

export function CompanyInfoWarrantyLength(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CompanyInfoWarrantyLengthValidation}>
      <Field.NumberFormatInput
        name="company_info.warranty_length"
        label="Warranty Length"
        placeholder="warranty length"
        validation={CompanyInfoWarrantyLengthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function CompanyInfoForm(props: any) {
  return (
    <>
      <CompanyInfoAverageJobValue {...props} />
      <CompanyInfoAverageMonthlyJobs {...props} />
      <CompanyInfoContractAgreementAgreedTermsAndConditions {...props} />
      <CompanyInfoContractAgreementAgreedToBecomeIarOfKanda {...props} />
      <CompanyInfoContractAgreementContractAid {...props} />
      <CompanyInfoContractAgreementContractCid {...props} />
      <CompanyInfoContractAgreementContractContent {...props} />
      <CompanyInfoContractAgreementContractId {...props} />
      <CompanyInfoContractAgreementContractMetadataCreatedAt {...props} />
      <CompanyInfoContractAgreementContractMetadataLiveness {...props} />
      <CompanyInfoContractAgreementContractMetadataUpdatedAt {...props} />
      <CompanyInfoContractAgreementContractMimetype {...props} />
      <CompanyInfoContractAgreementContractName {...props} />
      <CompanyInfoContractAgreementContractOid {...props} />
      <CompanyInfoContractAgreementPrintName {...props} />
      <CompanyInfoContractAgreementSignedAt {...props} />
      <CompanyInfoInsuranceDocumentAid {...props} />
      <CompanyInfoInsuranceDocumentCid {...props} />
      <CompanyInfoInsuranceDocumentContent {...props} />
      <CompanyInfoInsuranceDocumentId {...props} />
      <CompanyInfoInsuranceDocumentMetadataCreatedAt {...props} />
      <CompanyInfoInsuranceDocumentMetadataLiveness {...props} />
      <CompanyInfoInsuranceDocumentMetadataUpdatedAt {...props} />
      <CompanyInfoInsuranceDocumentMimetype {...props} />
      <CompanyInfoInsuranceDocumentName {...props} />
      <CompanyInfoInsuranceDocumentOid {...props} />
      <CompanyInfoTradeBodyName {...props} />
      <CompanyInfoTradeBodyNumber {...props} />
      <CompanyInfoTradeBody {...props} />
      <CompanyInfoTradeTypeName {...props} />
      <CompanyInfoTradeType {...props} />
      <CompanyInfoUseSubcontractor {...props} />
      <CompanyInfoWarrantyLength {...props} />
    </>
  );
}

export const ContractAgreementAgreedTermsAndConditionsValidation = {};

export function ContractAgreementAgreedTermsAndConditions(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={ContractAgreementAgreedTermsAndConditionsValidation}
    >
      <Field.RadioSelect
        name="contract_agreement.agreed_terms_and_conditions"
        label="Agreed Terms And Conditions"
        placeholder="agreed terms and conditions"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementAgreedToBecomeIarOfKandaValidation = {};

export function ContractAgreementAgreedToBecomeIarOfKanda(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={ContractAgreementAgreedToBecomeIarOfKandaValidation}
    >
      <Field.RadioSelect
        name="contract_agreement.agreed_to_become_iar_of_kanda"
        label="Agreed To Become IAR Of Kanda"
        placeholder="agreed to become IAR of Kanda"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function ContractAgreementContractAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementContractAidValidation}>
      <Field.Input
        name="contract_agreement.contract.aid"
        label="Author Id"
        placeholder="author id"
        validation={ContractAgreementContractAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function ContractAgreementContractCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementContractCidValidation}>
      <Field.Input
        name="contract_agreement.contract.cid"
        label="Company Id"
        placeholder="company id"
        validation={ContractAgreementContractCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function ContractAgreementContractContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={ContractAgreementContractContentValidation}>
      <Field.File
        name="contract_agreement.contract.content"
        label="Document Content"
        placeholder="document content"
        validation={ContractAgreementContractContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function ContractAgreementContractId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementContractIdValidation}>
      <Field.Input
        name="contract_agreement.contract.id"
        label="Document Id"
        placeholder="document id"
        validation={ContractAgreementContractIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function ContractAgreementContractMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ContractAgreementContractMetadataCreatedAtValidation}
    >
      <Field.Input
        name="contract_agreement.contract.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={ContractAgreementContractMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function ContractAgreementContractMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={ContractAgreementContractMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="contract_agreement.contract.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={ContractAgreementContractMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function ContractAgreementContractMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ContractAgreementContractMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="contract_agreement.contract.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={ContractAgreementContractMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function ContractAgreementContractMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementContractMimetypeValidation}>
      <Field.Input
        name="contract_agreement.contract.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={ContractAgreementContractMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function ContractAgreementContractName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementContractNameValidation}>
      <Field.Input
        name="contract_agreement.contract.name"
        label="Document Name"
        placeholder="document name"
        validation={ContractAgreementContractNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementContractOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function ContractAgreementContractOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementContractOidValidation}>
      <Field.Input
        name="contract_agreement.contract.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={ContractAgreementContractOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementPrintNameValidation = {
  minLength: { value: 1, message: "Print Name requires minimum length of 1" },
};

export function ContractAgreementPrintName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementPrintNameValidation}>
      <Field.Input
        name="contract_agreement.print_name"
        label="Print Name"
        placeholder="print name"
        validation={ContractAgreementPrintNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContractAgreementSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function ContractAgreementSignedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContractAgreementSignedAtValidation}>
      <Field.Input
        name="contract_agreement.signed_at"
        label="Signed At"
        placeholder="signed at"
        validation={ContractAgreementSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function ContractAgreementForm(props: any) {
  return (
    <>
      <ContractAgreementAgreedTermsAndConditions {...props} />
      <ContractAgreementAgreedToBecomeIarOfKanda {...props} />
      <ContractAgreementContractAid {...props} />
      <ContractAgreementContractCid {...props} />
      <ContractAgreementContractContent {...props} />
      <ContractAgreementContractId {...props} />
      <ContractAgreementContractMetadataCreatedAt {...props} />
      <ContractAgreementContractMetadataLiveness {...props} />
      <ContractAgreementContractMetadataUpdatedAt {...props} />
      <ContractAgreementContractMimetype {...props} />
      <ContractAgreementContractName {...props} />
      <ContractAgreementContractOid {...props} />
      <ContractAgreementPrintName {...props} />
      <ContractAgreementSignedAt {...props} />
    </>
  );
}

export const CustomerOptionsCheckoutOptionValidation = {
  required: { value: true, message: "Checkout Option is required." },
};

export function CustomerOptionsCheckoutOption(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CustomerOptionsCheckoutOptionValidation}>
      <Field.RadioSelect
        name="customer_options.checkout_option"
        label="Checkout Option"
        placeholder="checkout option picked by customer, updated only via custom action"
        options={[
          { name: "Apply For Finance", value: "apply_for_finance" },
          { name: "Decline Job", value: "decline_job" },
          { name: "Pay On Completion", value: "pay_on_completion" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerOptionsDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CustomerOptionsDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CustomerOptionsDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="customer_options.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CustomerOptionsDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerOptionsDepositValueCurrencyValidation = {};

export function CustomerOptionsDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CustomerOptionsDepositValueCurrencyValidation}>
      <Field.RadioSelect
        name="customer_options.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerOptionsFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
};

export function CustomerOptionsFinanceOption(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerOptionsFinanceOptionValidation}>
      <Field.Input
        name="customer_options.finance_option"
        label="Finance Option Selected By Customer"
        placeholder="finance option"
        validation={CustomerOptionsFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function CustomerOptionsForm(props: any) {
  return (
    <>
      <CustomerOptionsCheckoutOption {...props} />
      <CustomerOptionsDepositValueAmount {...props} />
      <CustomerOptionsDepositValueCurrency {...props} />
      <CustomerOptionsFinanceOption {...props} />
    </>
  );
}

export const JobAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobAidValidation}>
      <Field.Input
        name="job.aid"
        label="Author Id"
        placeholder="author id"
        validation={JobAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobArchivedValidation = {
  disabled: { value: true, message: "Archived input is read only or disabled" },
};

export function JobArchived(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobArchivedValidation}>
      <Field.RadioSelect
        name="job.archived"
        label="Job Is Archived?"
        placeholder="job is archived?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCheckoutOptionsArraySelectValidation = {};

export function JobCheckoutOptionsArraySelect(props: any) {
  return (
    <Field.Array.Input name="">
      <Field.Validator validation={JobCheckoutOptionsArrayInputValidation}>
        <Field.RadioSelect
          label=""
          placeholder=""
          label="Checkout Option"
          placeholder="checkout option picked by customer, updated only via custom action"
          options={[
            { name: "Apply For Finance", value: "apply_for_finance" },
            { name: "Decline Job", value: "decline_job" },
            { name: "Pay On Completion", value: "pay_on_completion" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobCheckoutOptionsValidation = {
  minLength: {
    value: 1,
    message: "Checkout Options requires minimum length of 1",
  },
};

export function JobCheckoutOptionsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="job.checkout_options"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const JobCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCidValidation}>
      <Field.Input
        name="job.cid"
        label="Company Id"
        placeholder="company id"
        validation={JobCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function JobCustomerAddressBuildingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressBuildingNameValidation}>
      <Field.Input
        name="job.customer.address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={JobCustomerAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function JobCustomerAddressBuildingNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressBuildingNumberValidation}>
      <Field.Input
        name="job.customer.address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={JobCustomerAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function JobCustomerAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressCityValidation}>
      <Field.Input
        name="job.customer.address.city"
        label="City / Town"
        placeholder="city / town"
        validation={JobCustomerAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function JobCustomerAddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressCountryValidation}>
      <Field.Input
        name="job.customer.address.country"
        label="Country"
        placeholder="country"
        validation={JobCustomerAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function JobCustomerAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressCountyValidation}>
      <Field.Input
        name="job.customer.address.county"
        label="County / State"
        placeholder="county / state"
        validation={JobCustomerAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function JobCustomerAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressLine1Validation}>
      <Field.Input
        name="job.customer.address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={JobCustomerAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function JobCustomerAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerAddressLine2Validation}>
      <Field.Input
        name="job.customer.address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={JobCustomerAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function JobCustomerAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={JobCustomerAddressMonthsAtAddressValidation}>
      <Field.NumberFormatInput
        name="job.customer.address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={JobCustomerAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function JobCustomerAddressPostcode(props: FieldProps["Postcode"]) {
  return (
    <Field.Validator validation={JobCustomerAddressPostcodeValidation}>
      <Field.Postcode
        name="job.customer.address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={JobCustomerAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function JobCustomerEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerEmailValidation}>
      <Field.Input
        name="job.customer.email"
        label="Email"
        placeholder="email"
        validation={JobCustomerEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function JobCustomerFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerFirstNameValidation}>
      <Field.Input
        name="job.customer.first_name"
        label="First Name"
        placeholder="first name"
        validation={JobCustomerFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function JobCustomerLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerLastNameValidation}>
      <Field.Input
        name="job.customer.last_name"
        label="Last Name"
        placeholder="last name"
        validation={JobCustomerLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerPhoneValidation = {
  required: { value: true, message: "Phone is required." },
  minLength: { value: 1, message: "Phone requires minimum length of 1" },
};

export function JobCustomerPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerPhoneValidation}>
      <Field.Input
        name="job.customer.phone"
        label="Phone Number"
        placeholder="phone number"
        validation={JobCustomerPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerOptionsCheckoutOptionValidation = {
  required: { value: true, message: "Checkout Option is required." },
};

export function JobCustomerOptionsCheckoutOption(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobCustomerOptionsCheckoutOptionValidation}>
      <Field.RadioSelect
        name="job.customer_options.checkout_option"
        label="Checkout Option"
        placeholder="checkout option picked by customer, updated only via custom action"
        options={[
          { name: "Apply For Finance", value: "apply_for_finance" },
          { name: "Decline Job", value: "decline_job" },
          { name: "Pay On Completion", value: "pay_on_completion" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerOptionsDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobCustomerOptionsDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={JobCustomerOptionsDepositValueAmountValidation}
    >
      <Field.NumberFormatInput
        name="job.customer_options.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobCustomerOptionsDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerOptionsDepositValueCurrencyValidation = {};

export function JobCustomerOptionsDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={JobCustomerOptionsDepositValueCurrencyValidation}
    >
      <Field.RadioSelect
        name="job.customer_options.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCustomerOptionsFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
};

export function JobCustomerOptionsFinanceOption(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCustomerOptionsFinanceOptionValidation}>
      <Field.Input
        name="job.customer_options.finance_option"
        label="Finance Option Selected By Customer"
        placeholder="finance option"
        validation={JobCustomerOptionsFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobDepositTypeValidation = {
  required: { value: true, message: "Deposit Type is required." },
};

export function JobDepositType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobDepositTypeValidation}>
      <Field.RadioSelect
        name="job.deposit_type"
        label="Deposit Type"
        placeholder="deposit type"
        options={[
          { name: "No Deposit", value: "no_deposit" },
          { name: "Partial Deposit", value: "partial_deposit" },
          { name: "Fixed Deposit", value: "fixed_deposit" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobDepositValueAmount(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={JobDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="job.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobDepositValueCurrencyValidation = {};

export function JobDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobDepositValueCurrencyValidation}>
      <Field.RadioSelect
        name="job.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobDescriptionValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function JobDescription(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobDescriptionValidation}>
      <Field.Input
        name="job.description"
        label="Job Description"
        placeholder="job description"
        validation={JobDescriptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobFinanceOptionsValidation = {};

export function JobFinanceOptionsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="job.finance_options"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const JobFinanceStatusValidation = {
  disabled: {
    value: true,
    message: "Finance Status input is read only or disabled",
  },
};

export function JobFinanceStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobFinanceStatusValidation}>
      <Field.Select
        name="job.finance_status"
        label="Finance Status"
        placeholder="finance status"
        options={[
          { name: "Not Applied", value: "not_applied" },
          { name: "Under Review", value: "under_review" },
          { name: "Applied For Finance", value: "applied_for_finance" },
          { name: "Finance Not Approved", value: "finance_not_approved" },
          { name: "Financed", value: "financed" },
          { name: "Sat Note Sent", value: "sat_note_sent" },
          { name: "Sat Note Viewed", value: "sat_note_viewed" },
          { name: "Sat Note Signed", value: "sat_note_signed" },
          { name: "Payout Pending", value: "payout_pending" },
          { name: "Paid", value: "paid" },
          { name: "Finance Cancelled", value: "finance_cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobIdValidation}>
      <Field.Input
        name="job.id"
        label="Job Id"
        placeholder="job id"
        validation={JobIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobJobDocumentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobJobDocumentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator validation={JobJobDocumentsAidArrayInputValidation}>
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobJobDocumentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator validation={JobJobDocumentsCidArrayInputValidation}>
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function JobJobDocumentsContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator validation={JobJobDocumentsContentArrayInputValidation}>
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobJobDocumentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator validation={JobJobDocumentsIdArrayInputValidation}>
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobJobDocumentsMetadataCreatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={JobJobDocumentsMetadataCreatedAtArrayInputValidation}
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobJobDocumentsMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={JobJobDocumentsMetadataLivenessArrayInputValidation}
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobJobDocumentsMetadataUpdatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={JobJobDocumentsMetadataUpdatedAtArrayInputValidation}
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function JobJobDocumentsMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator validation={JobJobDocumentsMimetypeArrayInputValidation}>
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function JobJobDocumentsNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator validation={JobJobDocumentsNameArrayInputValidation}>
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobJobDocumentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator validation={JobJobDocumentsOidArrayInputValidation}>
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobDocumentsValidation = {};

export function JobJobDocumentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="job.job_documents"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const JobJobItemsDescriptionArrayInputValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function JobJobItemsDescriptionArrayInput(props: any) {
  return (
    <Field.Array.Input name="description">
      <Field.Validator validation={JobJobItemsDescriptionArrayInputValidation}>
        <Field.Input
          label="Description"
          placeholder="Description"
          label="Job Item Description"
          placeholder="job item description"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsPriceAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobJobItemsPriceAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator validation={JobJobItemsPriceAmountArrayInputValidation}>
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsPriceCurrencyArraySelectValidation = {};

export function JobJobItemsPriceCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={JobJobItemsPriceCurrencyArrayInputValidation}
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuantityArrayInputValidation = {
  required: { value: true, message: "Quantity is required." },
  min: { value: 0, message: "Quantity must be great than 0" },
  max: {
    value: 2147483647,
    message: "Quantity must be smaller than 2.147483647e+09",
  },
};

export function JobJobItemsQuantityArrayInput(props: any) {
  return (
    <Field.Array.Input name="quantity">
      <Field.Validator validation={JobJobItemsQuantityArrayInputValidation}>
        <Field.NumberFormatInput
          label="Quantity"
          placeholder="Quantity"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobJobItemsQuoteDocumentAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobJobItemsQuoteDocumentCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function JobJobItemsQuoteDocumentContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobJobItemsQuoteDocumentIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobJobItemsQuoteDocumentMetadataCreatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={
          JobJobItemsQuoteDocumentMetadataCreatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobJobItemsQuoteDocumentMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={
          JobJobItemsQuoteDocumentMetadataLivenessArrayInputValidation
        }
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobJobItemsQuoteDocumentMetadataUpdatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={
          JobJobItemsQuoteDocumentMetadataUpdatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function JobJobItemsQuoteDocumentMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentMimetypeArrayInputValidation}
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function JobJobItemsQuoteDocumentNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsQuoteDocumentOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobJobItemsQuoteDocumentOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={JobJobItemsQuoteDocumentOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsStyleArraySelectValidation = {
  disabled: { value: true, message: "Style input is read only or disabled" },
};

export function JobJobItemsStyleArraySelect(props: any) {
  return (
    <Field.Array.Input name="style">
      <Field.Validator validation={JobJobItemsStyleArrayInputValidation}>
        <Field.RadioSelect
          label="Style"
          placeholder="Style"
          label="Style"
          placeholder="style"
          options={[
            { name: "Kanda", value: "kanda" },
            { name: "Custom", value: "custom" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsTitleArrayInputValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function JobJobItemsTitleArrayInput(props: any) {
  return (
    <Field.Array.Input name="title">
      <Field.Validator validation={JobJobItemsTitleArrayInputValidation}>
        <Field.Input
          label="Title"
          placeholder="Title"
          label="Job Item Title"
          placeholder="job item title"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsVatAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobJobItemsVatAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator validation={JobJobItemsVatAmountArrayInputValidation}>
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsVatCurrencyArraySelectValidation = {};

export function JobJobItemsVatCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator validation={JobJobItemsVatCurrencyArrayInputValidation}>
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsVatRateArraySelectValidation = {};

export function JobJobItemsVatRateArraySelect(props: any) {
  return (
    <Field.Array.Input name="vat_rate">
      <Field.Validator validation={JobJobItemsVatRateArrayInputValidation}>
        <Field.Select
          label="Vat Rate"
          placeholder="Vat Rate"
          label="Vat Applicable Rate"
          placeholder="vat applicable rate"
          options={[
            { name: "Vat Not Set", value: "vat_not_set" },
            { name: "Exempted", value: "exempted" },
            { name: "0%", value: "0%" },
            { name: "5%", value: "5%" },
            { name: "20%", value: "20%" },
            { name: "Custom", value: "custom" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobJobItemsValidation = {
  required: { value: true, message: "Job Items is required." },
  minLength: { value: 1, message: "Job Items requires minimum length of 1" },
};

export function JobJobItemsArrayWrapper({ children, initialData = null }: any) {
  return (
    <Field.Array.Wrapper arrayName="job.job_items" initialData={initialData}>
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const JobJobTypeValidation = {};

export function JobJobType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobJobTypeValidation}>
      <Field.RadioSelect
        name="job.job_type"
        label="Job Type"
        placeholder="job type"
        options={[
          { name: "Standard", value: "standard" },
          { name: "Solar", value: "solar" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobMetadataCreatedAtValidation}>
      <Field.Input
        name="job.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={JobMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={JobMetadataLivenessValidation}>
      <Field.BooleanInput
        name="job.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={JobMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobMetadataUpdatedAtValidation}>
      <Field.Input
        name="job.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={JobMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobNotesValidation = {};

export function JobNotesArrayWrapper({ children, initialData = null }: any) {
  return (
    <Field.Array.Wrapper arrayName="job.notes" initialData={initialData}>
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const JobOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobOidValidation}>
      <Field.Input
        name="job.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={JobOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobPaymentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobPaymentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator validation={JobPaymentsAidArrayInputValidation}>
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobPaymentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator validation={JobPaymentsCidArrayInputValidation}>
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobPaymentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator validation={JobPaymentsIdArrayInputValidation}>
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Payment Id"
          placeholder="payment id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsKidArrayInputValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function JobPaymentsKidArrayInput(props: any) {
  return (
    <Field.Array.Input name="kid">
      <Field.Validator validation={JobPaymentsKidArrayInputValidation}>
        <Field.Input
          label="Kid"
          placeholder="Kid"
          label="Internal Kind Id"
          placeholder="internal kind id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsKindArraySelectValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function JobPaymentsKindArraySelect(props: any) {
  return (
    <Field.Array.Input name="kind">
      <Field.Validator validation={JobPaymentsKindArrayInputValidation}>
        <Field.RadioSelect
          label="Kind"
          placeholder="Kind"
          label="Internal Kind"
          placeholder="internal kind"
          options={[
            { name: "Job", value: "job" },
            { name: "Charge", value: "charge" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobPaymentsMetadataCreatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={JobPaymentsMetadataCreatedAtArrayInputValidation}
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobPaymentsMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={JobPaymentsMetadataLivenessArrayInputValidation}
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobPaymentsMetadataUpdatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={JobPaymentsMetadataUpdatedAtArrayInputValidation}
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobPaymentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator validation={JobPaymentsOidArrayInputValidation}>
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsPaymentOptionAmountAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobPaymentsPaymentOptionAmountAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={JobPaymentsPaymentOptionAmountAmountArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsPaymentOptionAmountCurrencyArraySelectValidation = {};

export function JobPaymentsPaymentOptionAmountCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={JobPaymentsPaymentOptionAmountCurrencyArrayInputValidation}
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsPaymentOptionPaymentMethodArraySelectValidation = {
  required: { value: true, message: "Payment Method is required." },
};

export function JobPaymentsPaymentOptionPaymentMethodArraySelect(props: any) {
  return (
    <Field.Array.Input name="payment_method">
      <Field.Validator
        validation={JobPaymentsPaymentOptionPaymentMethodArrayInputValidation}
      >
        <Field.RadioSelect
          label="Payment Method"
          placeholder="Payment Method"
          label="Payment Method"
          placeholder="payment method"
          options={[
            { name: "Cash", value: "cash" },
            { name: "Card", value: "card" },
            { name: "Loan", value: "loan" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsStatusArraySelectValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function JobPaymentsStatusArraySelect(props: any) {
  return (
    <Field.Array.Input name="status">
      <Field.Validator validation={JobPaymentsStatusArrayInputValidation}>
        <Field.Select
          label="Status"
          placeholder="Status"
          label="Payment Status"
          placeholder="payment status"
          options={[
            { name: "Unpaid", value: "unpaid" },
            { name: "Pending", value: "pending" },
            { name: "Paid", value: "paid" },
            { name: "Disputed", value: "disputed" },
            { name: "Cancelled", value: "cancelled" },
            { name: "Refunded", value: "refunded" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsXidArrayInputValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function JobPaymentsXidArrayInput(props: any) {
  return (
    <Field.Array.Input name="xid">
      <Field.Validator validation={JobPaymentsXidArrayInputValidation}>
        <Field.Input
          label="Xid"
          placeholder="Xid"
          label="External Reference Id"
          placeholder="external reference id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsXrefArrayInputValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function JobPaymentsXrefArrayInput(props: any) {
  return (
    <Field.Array.Input name="xref">
      <Field.Validator validation={JobPaymentsXrefArrayInputValidation}>
        <Field.Input
          label="Xref"
          placeholder="Xref"
          label="External Reference"
          placeholder="external reference"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const JobPaymentsValidation = {
  disabled: { value: true, message: "Payments input is read only or disabled" },
};

export function JobPaymentsArrayWrapper({ children, initialData = null }: any) {
  return (
    <Field.Array.Wrapper arrayName="job.payments" initialData={initialData}>
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const JobSatNoteCertificateAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobSatNoteCertificateAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateAidValidation}>
      <Field.Input
        name="job.sat_note.certificate.aid"
        label="Author Id"
        placeholder="author id"
        validation={JobSatNoteCertificateAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobSatNoteCertificateCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateCidValidation}>
      <Field.Input
        name="job.sat_note.certificate.cid"
        label="Company Id"
        placeholder="company id"
        validation={JobSatNoteCertificateCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function JobSatNoteCertificateContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateContentValidation}>
      <Field.File
        name="job.sat_note.certificate.content"
        label="Document Content"
        placeholder="document content"
        validation={JobSatNoteCertificateContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobSatNoteCertificateId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateIdValidation}>
      <Field.Input
        name="job.sat_note.certificate.id"
        label="Document Id"
        placeholder="document id"
        validation={JobSatNoteCertificateIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobSatNoteCertificateMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobSatNoteCertificateMetadataCreatedAtValidation}
    >
      <Field.Input
        name="job.sat_note.certificate.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={JobSatNoteCertificateMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobSatNoteCertificateMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={JobSatNoteCertificateMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="job.sat_note.certificate.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={JobSatNoteCertificateMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobSatNoteCertificateMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobSatNoteCertificateMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="job.sat_note.certificate.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={JobSatNoteCertificateMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function JobSatNoteCertificateMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateMimetypeValidation}>
      <Field.Input
        name="job.sat_note.certificate.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={JobSatNoteCertificateMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function JobSatNoteCertificateName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateNameValidation}>
      <Field.Input
        name="job.sat_note.certificate.name"
        label="Document Name"
        placeholder="document name"
        validation={JobSatNoteCertificateNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteCertificateOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobSatNoteCertificateOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteCertificateOidValidation}>
      <Field.Input
        name="job.sat_note.certificate.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={JobSatNoteCertificateOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteQAdviceValidation = {
  required: { value: true, message: "Q Advice is required." },
};

export function JobSatNoteQAdvice(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobSatNoteQAdviceValidation}>
      <Field.Select
        name="job.sat_note.q_advice"
        label="What Advice Did The Installer Give You On Your Finance Application?"
        placeholder="What advice did the installer give you on your finance application?"
        options={[
          {
            name: "They Just Sent Me A Link To Apply",
            value: "They just sent me a link to apply",
          },
          {
            name: "They Told Me What Rates Where Available",
            value: "They told me what rates where available",
          },
          {
            name: "They Helped Me Work Out My Potential Repayments",
            value: "They helped me work out my potential repayments",
          },
          {
            name: "They Completed The Application For Me",
            value: "They completed the application for me",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteQApplicationValidation = {
  required: { value: true, message: "Q Application is required." },
};

export function JobSatNoteQApplication(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobSatNoteQApplicationValidation}>
      <Field.Select
        name="job.sat_note.q_application"
        label="Who Completed Your Application For Finance?"
        placeholder="Who completed your application for finance?"
        options={[
          {
            name: "I Completed The Application Myself",
            value: "I completed the application myself",
          },
          {
            name: "Someone Completed The Appliation On My Behalf",
            value: "Someone completed the appliation on my behalf",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteQAvailabilityValidation = {
  required: { value: true, message: "Q Availability is required." },
};

export function JobSatNoteQAvailability(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobSatNoteQAvailabilityValidation}>
      <Field.Select
        name="job.sat_note.q_availability"
        label="How Did You First Become Aware That Finance Was Available?"
        placeholder="How did you first become aware that finance was available?"
        options={[
          {
            name: "The Installer Told Me When Quoting Me",
            value: "The installer told me when quoting me",
          },
          {
            name: "I Saw It Advertised By The Installer",
            value: "I saw it advertised by the installer",
          },
          {
            name: "I Found Out When The Installer Sent Me A Link Via Kanda",
            value: "I found out when the installer sent me a link via Kanda",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteQEasinessValidation = {
  required: { value: true, message: "Q Easiness is required." },
};

export function JobSatNoteQEasiness(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobSatNoteQEasinessValidation}>
      <Field.Select
        name="job.sat_note.q_easiness"
        label="Do You Find It Hard To Apply For Finance With Kanda?"
        placeholder="Do you find it hard to apply for finance with Kanda?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteQPressureValidation = {
  required: { value: true, message: "Q Pressure is required." },
};

export function JobSatNoteQPressure(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobSatNoteQPressureValidation}>
      <Field.Select
        name="job.sat_note.q_pressure"
        label="Did The Installer Pressure You To Apply For Finance?"
        placeholder="Did the installer pressure you to apply for finance?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteQSavingValidation = {};

export function JobSatNoteQSaving(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobSatNoteQSavingValidation}>
      <Field.RadioSelect
        name="job.sat_note.q_saving"
        label="Were You Told About Any Potential Feed In Tariffs, Savings, Returns Or Renewable Heat Incentive And Do You Understand That The Actual Amounts  You  Receive, And Your Estimated Returns/Savings Were Based On Varying Factors Including You Own Energy Consumption And Any Returns/Savings/Payback Periods Are Not Linked To Your Repayments On This Agreement."
        placeholder="Were you told about any potential feed in tariffs, savings, returns or Renewable Heat incentive and do you understand that the actual amounts  you  receive, and your estimated returns/savings were based on varying factors including you own energy consumption and any returns/savings/payback periods are not linked to your repayments on this agreement."
        options={[
          { name: "Yes I Understand", value: "Yes I understand" },
          { name: "No I Don'T Understand", value: "No I don't understand" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function JobSatNoteSignatureFingerprint(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteSignatureFingerprintValidation}>
      <Field.Input
        name="job.sat_note.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={JobSatNoteSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function JobSatNoteSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobSatNoteSignatureSignedValidation}>
      <Field.RadioSelect
        name="job.sat_note.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteTimelineSentAtValidation = {
  disabled: { value: true, message: "Sent At input is read only or disabled" },
};

export function JobSatNoteTimelineSentAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteTimelineSentAtValidation}>
      <Field.Input
        name="job.sat_note_timeline.sent_at"
        label="Timestamp Sat Note Is Sent"
        placeholder="timestamp sat note is sent"
        validation={JobSatNoteTimelineSentAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteTimelineSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function JobSatNoteTimelineSignedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteTimelineSignedAtValidation}>
      <Field.Input
        name="job.sat_note_timeline.signed_at"
        label="Timestamp Sat Note Is Signed"
        placeholder="timestamp sat note is signed"
        validation={JobSatNoteTimelineSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobSatNoteTimelineViewedAtValidation = {
  disabled: {
    value: true,
    message: "Viewed At input is read only or disabled",
  },
};

export function JobSatNoteTimelineViewedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobSatNoteTimelineViewedAtValidation}>
      <Field.Input
        name="job.sat_note_timeline.viewed_at"
        label="Timestamp Sat Note Is Viewed"
        placeholder="timestamp sat note is viewed"
        validation={JobSatNoteTimelineViewedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobStatusValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function JobStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobStatusValidation}>
      <Field.Select
        name="job.status"
        label="Job Status"
        placeholder="job status"
        options={[
          { name: "Draft", value: "draft" },
          { name: "Sent", value: "sent" },
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Finished", value: "finished" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTitleValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function JobTitle(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobTitleValidation}>
      <Field.Input
        name="job.title"
        label="Job Title"
        placeholder="job title"
        validation={JobTitleValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTotalAmountVatAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobTotalAmountVatAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={JobTotalAmountVatAmountValidation}>
      <Field.NumberFormatInput
        name="job.total.amount_vat.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobTotalAmountVatAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTotalAmountVatCurrencyValidation = {};

export function JobTotalAmountVatCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobTotalAmountVatCurrencyValidation}>
      <Field.RadioSelect
        name="job.total.amount_vat.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTotalAmountVatExclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobTotalAmountVatExclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={JobTotalAmountVatExclusiveAmountValidation}>
      <Field.NumberFormatInput
        name="job.total.amount_vat_exclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobTotalAmountVatExclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTotalAmountVatExclusiveCurrencyValidation = {};

export function JobTotalAmountVatExclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobTotalAmountVatExclusiveCurrencyValidation}>
      <Field.RadioSelect
        name="job.total.amount_vat_exclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTotalAmountVatInclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobTotalAmountVatInclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={JobTotalAmountVatInclusiveAmountValidation}>
      <Field.NumberFormatInput
        name="job.total.amount_vat_inclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobTotalAmountVatInclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobTotalAmountVatInclusiveCurrencyValidation = {};

export function JobTotalAmountVatInclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobTotalAmountVatInclusiveCurrencyValidation}>
      <Field.RadioSelect
        name="job.total.amount_vat_inclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export function JobForm(props: any) {
  return (
    <>
      <JobAid {...props} />
      <JobArchived {...props} />
      <JobCid {...props} />
      <JobCustomerAddressBuildingName {...props} />
      <JobCustomerAddressBuildingNumber {...props} />
      <JobCustomerAddressCity {...props} />
      <JobCustomerAddressCountry {...props} />
      <JobCustomerAddressCounty {...props} />
      <JobCustomerAddressLine1 {...props} />
      <JobCustomerAddressLine2 {...props} />
      <JobCustomerAddressMonthsAtAddress {...props} />
      <JobCustomerAddressPostcode {...props} />
      <JobCustomerEmail {...props} />
      <JobCustomerFirstName {...props} />
      <JobCustomerLastName {...props} />
      <JobCustomerPhone {...props} />
      <JobCustomerOptionsCheckoutOption {...props} />
      <JobCustomerOptionsDepositValueAmount {...props} />
      <JobCustomerOptionsDepositValueCurrency {...props} />
      <JobCustomerOptionsFinanceOption {...props} />
      <JobDepositType {...props} />
      <JobDepositValueAmount {...props} />
      <JobDepositValueCurrency {...props} />
      <JobDescription {...props} />
      <JobFinanceStatus {...props} />
      <JobId {...props} />
      <JobJobType {...props} />
      <JobMetadataCreatedAt {...props} />
      <JobMetadataLiveness {...props} />
      <JobMetadataUpdatedAt {...props} />
      <JobOid {...props} />
      <JobSatNoteCertificateAid {...props} />
      <JobSatNoteCertificateCid {...props} />
      <JobSatNoteCertificateContent {...props} />
      <JobSatNoteCertificateId {...props} />
      <JobSatNoteCertificateMetadataCreatedAt {...props} />
      <JobSatNoteCertificateMetadataLiveness {...props} />
      <JobSatNoteCertificateMetadataUpdatedAt {...props} />
      <JobSatNoteCertificateMimetype {...props} />
      <JobSatNoteCertificateName {...props} />
      <JobSatNoteCertificateOid {...props} />
      <JobSatNoteQAdvice {...props} />
      <JobSatNoteQApplication {...props} />
      <JobSatNoteQAvailability {...props} />
      <JobSatNoteQEasiness {...props} />
      <JobSatNoteQPressure {...props} />
      <JobSatNoteQSaving {...props} />
      <JobSatNoteSignatureFingerprint {...props} />
      <JobSatNoteSignatureSigned {...props} />
      <JobSatNoteTimelineSentAt {...props} />
      <JobSatNoteTimelineSignedAt {...props} />
      <JobSatNoteTimelineViewedAt {...props} />
      <JobStatus {...props} />
      <JobTitle {...props} />
      <JobTotalAmountVatAmount {...props} />
      <JobTotalAmountVatCurrency {...props} />
      <JobTotalAmountVatExclusiveAmount {...props} />
      <JobTotalAmountVatExclusiveCurrency {...props} />
      <JobTotalAmountVatInclusiveAmount {...props} />
      <JobTotalAmountVatInclusiveCurrency {...props} />
    </>
  );
}

export const PaymentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function PaymentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentAidValidation}>
      <Field.Input
        name="payment.aid"
        label="Author Id"
        placeholder="author id"
        validation={PaymentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function PaymentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentCidValidation}>
      <Field.Input
        name="payment.cid"
        label="Company Id"
        placeholder="company id"
        validation={PaymentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function PaymentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentIdValidation}>
      <Field.Input
        name="payment.id"
        label="Payment Id"
        placeholder="payment id"
        validation={PaymentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentKidValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function PaymentKid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentKidValidation}>
      <Field.Input
        name="payment.kid"
        label="Internal Kind Id"
        placeholder="internal kind id"
        validation={PaymentKidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentKindValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function PaymentKind(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={PaymentKindValidation}>
      <Field.RadioSelect
        name="payment.kind"
        label="Internal Kind"
        placeholder="internal kind"
        options={[
          { name: "Job", value: "job" },
          { name: "Charge", value: "charge" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function PaymentMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentMetadataCreatedAtValidation}>
      <Field.Input
        name="payment.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={PaymentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function PaymentMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={PaymentMetadataLivenessValidation}>
      <Field.BooleanInput
        name="payment.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={PaymentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function PaymentMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentMetadataUpdatedAtValidation}>
      <Field.Input
        name="payment.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={PaymentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function PaymentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentOidValidation}>
      <Field.Input
        name="payment.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={PaymentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentPaymentOptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function PaymentPaymentOptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={PaymentPaymentOptionAmountAmountValidation}>
      <Field.NumberFormatInput
        name="payment.payment_option.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={PaymentPaymentOptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentPaymentOptionAmountCurrencyValidation = {};

export function PaymentPaymentOptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={PaymentPaymentOptionAmountCurrencyValidation}>
      <Field.RadioSelect
        name="payment.payment_option.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentPaymentOptionPaymentMethodValidation = {
  required: { value: true, message: "Payment Method is required." },
};

export function PaymentPaymentOptionPaymentMethod(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={PaymentPaymentOptionPaymentMethodValidation}>
      <Field.RadioSelect
        name="payment.payment_option.payment_method"
        label="Payment Method"
        placeholder="payment method"
        options={[
          { name: "Cash", value: "cash" },
          { name: "Card", value: "card" },
          { name: "Loan", value: "loan" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentStatusValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function PaymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={PaymentStatusValidation}>
      <Field.Select
        name="payment.status"
        label="Payment Status"
        placeholder="payment status"
        options={[
          { name: "Unpaid", value: "unpaid" },
          { name: "Pending", value: "pending" },
          { name: "Paid", value: "paid" },
          { name: "Disputed", value: "disputed" },
          { name: "Cancelled", value: "cancelled" },
          { name: "Refunded", value: "refunded" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function PaymentXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentXidValidation}>
      <Field.Input
        name="payment.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={PaymentXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function PaymentXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={PaymentXrefValidation}>
      <Field.Input
        name="payment.xref"
        label="External Reference"
        placeholder="external reference"
        validation={PaymentXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function PaymentForm(props: any) {
  return (
    <>
      <PaymentAid {...props} />
      <PaymentCid {...props} />
      <PaymentId {...props} />
      <PaymentKid {...props} />
      <PaymentKind {...props} />
      <PaymentMetadataCreatedAt {...props} />
      <PaymentMetadataLiveness {...props} />
      <PaymentMetadataUpdatedAt {...props} />
      <PaymentOid {...props} />
      <PaymentPaymentOptionAmountAmount {...props} />
      <PaymentPaymentOptionAmountCurrency {...props} />
      <PaymentPaymentOptionPaymentMethod {...props} />
      <PaymentStatus {...props} />
      <PaymentXid {...props} />
      <PaymentXref {...props} />
    </>
  );
}

export const PaymentOptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function PaymentOptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={PaymentOptionAmountAmountValidation}>
      <Field.NumberFormatInput
        name="payment_option.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={PaymentOptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentOptionAmountCurrencyValidation = {};

export function PaymentOptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={PaymentOptionAmountCurrencyValidation}>
      <Field.RadioSelect
        name="payment_option.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const PaymentOptionPaymentMethodValidation = {
  required: { value: true, message: "Payment Method is required." },
};

export function PaymentOptionPaymentMethod(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={PaymentOptionPaymentMethodValidation}>
      <Field.RadioSelect
        name="payment_option.payment_method"
        label="Payment Method"
        placeholder="payment method"
        options={[
          { name: "Cash", value: "cash" },
          { name: "Card", value: "card" },
          { name: "Loan", value: "loan" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function PaymentOptionForm(props: any) {
  return (
    <>
      <PaymentOptionAmountAmount {...props} />
      <PaymentOptionAmountCurrency {...props} />
      <PaymentOptionPaymentMethod {...props} />
    </>
  );
}

export const SignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function SignatureFingerprint(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignatureFingerprintValidation}>
      <Field.Input
        name="signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={SignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function SignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={SignatureSignedValidation}>
      <Field.RadioSelect
        name="signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function SignatureForm(props: any) {
  return (
    <>
      <SignatureFingerprint {...props} />
      <SignatureSigned {...props} />
    </>
  );
}

export const EntityJobAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityJobAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobAidValidation}>
      <Field.Input
        name="entity.job.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityJobAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobArchivedValidation = {
  disabled: { value: true, message: "Archived input is read only or disabled" },
};

export function EntityJobArchived(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobArchivedValidation}>
      <Field.RadioSelect
        name="entity.job.archived"
        label="Job Is Archived?"
        placeholder="job is archived?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCheckoutOptionsArraySelectValidation = {};

export function EntityJobCheckoutOptionsArraySelect(props: any) {
  return (
    <Field.Array.Input name="">
      <Field.Validator
        validation={EntityJobCheckoutOptionsArrayInputValidation}
      >
        <Field.RadioSelect
          label=""
          placeholder=""
          label="Checkout Option"
          placeholder="checkout option picked by customer, updated only via custom action"
          options={[
            { name: "Apply For Finance", value: "apply_for_finance" },
            { name: "Decline Job", value: "decline_job" },
            { name: "Pay On Completion", value: "pay_on_completion" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobCheckoutOptionsValidation = {
  minLength: {
    value: 1,
    message: "Checkout Options requires minimum length of 1",
  },
};

export function EntityJobCheckoutOptionsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.job.checkout_options"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityJobCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityJobCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCidValidation}>
      <Field.Input
        name="entity.job.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityJobCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function EntityJobCustomerAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityJobCustomerAddressBuildingNameValidation}
    >
      <Field.Input
        name="entity.job.customer.address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={EntityJobCustomerAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function EntityJobCustomerAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityJobCustomerAddressBuildingNumberValidation}
    >
      <Field.Input
        name="entity.job.customer.address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={EntityJobCustomerAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityJobCustomerAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerAddressCityValidation}>
      <Field.Input
        name="entity.job.customer.address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityJobCustomerAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityJobCustomerAddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerAddressCountryValidation}>
      <Field.Input
        name="entity.job.customer.address.country"
        label="Country"
        placeholder="country"
        validation={EntityJobCustomerAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityJobCustomerAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerAddressCountyValidation}>
      <Field.Input
        name="entity.job.customer.address.county"
        label="County / State"
        placeholder="county / state"
        validation={EntityJobCustomerAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityJobCustomerAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerAddressLine1Validation}>
      <Field.Input
        name="entity.job.customer.address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={EntityJobCustomerAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityJobCustomerAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerAddressLine2Validation}>
      <Field.Input
        name="entity.job.customer.address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={EntityJobCustomerAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function EntityJobCustomerAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityJobCustomerAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="entity.job.customer.address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={EntityJobCustomerAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityJobCustomerAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator validation={EntityJobCustomerAddressPostcodeValidation}>
      <Field.Postcode
        name="entity.job.customer.address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={EntityJobCustomerAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function EntityJobCustomerEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerEmailValidation}>
      <Field.Input
        name="entity.job.customer.email"
        label="Email"
        placeholder="email"
        validation={EntityJobCustomerEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function EntityJobCustomerFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerFirstNameValidation}>
      <Field.Input
        name="entity.job.customer.first_name"
        label="First Name"
        placeholder="first name"
        validation={EntityJobCustomerFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function EntityJobCustomerLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerLastNameValidation}>
      <Field.Input
        name="entity.job.customer.last_name"
        label="Last Name"
        placeholder="last name"
        validation={EntityJobCustomerLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerPhoneValidation = {
  required: { value: true, message: "Phone is required." },
  minLength: { value: 1, message: "Phone requires minimum length of 1" },
};

export function EntityJobCustomerPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobCustomerPhoneValidation}>
      <Field.Input
        name="entity.job.customer.phone"
        label="Phone Number"
        placeholder="phone number"
        validation={EntityJobCustomerPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerOptionsCheckoutOptionValidation = {
  required: { value: true, message: "Checkout Option is required." },
};

export function EntityJobCustomerOptionsCheckoutOption(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EntityJobCustomerOptionsCheckoutOptionValidation}
    >
      <Field.RadioSelect
        name="entity.job.customer_options.checkout_option"
        label="Checkout Option"
        placeholder="checkout option picked by customer, updated only via custom action"
        options={[
          { name: "Apply For Finance", value: "apply_for_finance" },
          { name: "Decline Job", value: "decline_job" },
          { name: "Pay On Completion", value: "pay_on_completion" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerOptionsDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobCustomerOptionsDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityJobCustomerOptionsDepositValueAmountValidation}
    >
      <Field.NumberFormatInput
        name="entity.job.customer_options.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityJobCustomerOptionsDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerOptionsDepositValueCurrencyValidation = {};

export function EntityJobCustomerOptionsDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EntityJobCustomerOptionsDepositValueCurrencyValidation}
    >
      <Field.RadioSelect
        name="entity.job.customer_options.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobCustomerOptionsFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
};

export function EntityJobCustomerOptionsFinanceOption(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityJobCustomerOptionsFinanceOptionValidation}
    >
      <Field.Input
        name="entity.job.customer_options.finance_option"
        label="Finance Option Selected By Customer"
        placeholder="finance option"
        validation={EntityJobCustomerOptionsFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobDepositTypeValidation = {
  required: { value: true, message: "Deposit Type is required." },
};

export function EntityJobDepositType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobDepositTypeValidation}>
      <Field.RadioSelect
        name="entity.job.deposit_type"
        label="Deposit Type"
        placeholder="deposit type"
        options={[
          { name: "No Deposit", value: "no_deposit" },
          { name: "Partial Deposit", value: "partial_deposit" },
          { name: "Fixed Deposit", value: "fixed_deposit" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntityJobDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="entity.job.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityJobDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobDepositValueCurrencyValidation = {};

export function EntityJobDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobDepositValueCurrencyValidation}>
      <Field.RadioSelect
        name="entity.job.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobDescriptionValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function EntityJobDescription(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobDescriptionValidation}>
      <Field.Input
        name="entity.job.description"
        label="Job Description"
        placeholder="job description"
        validation={EntityJobDescriptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobFinanceOptionsValidation = {};

export function EntityJobFinanceOptionsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.job.finance_options"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityJobFinanceStatusValidation = {
  disabled: {
    value: true,
    message: "Finance Status input is read only or disabled",
  },
};

export function EntityJobFinanceStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobFinanceStatusValidation}>
      <Field.Select
        name="entity.job.finance_status"
        label="Finance Status"
        placeholder="finance status"
        options={[
          { name: "Not Applied", value: "not_applied" },
          { name: "Under Review", value: "under_review" },
          { name: "Applied For Finance", value: "applied_for_finance" },
          { name: "Finance Not Approved", value: "finance_not_approved" },
          { name: "Financed", value: "financed" },
          { name: "Sat Note Sent", value: "sat_note_sent" },
          { name: "Sat Note Viewed", value: "sat_note_viewed" },
          { name: "Sat Note Signed", value: "sat_note_signed" },
          { name: "Payout Pending", value: "payout_pending" },
          { name: "Paid", value: "paid" },
          { name: "Finance Cancelled", value: "finance_cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityJobId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobIdValidation}>
      <Field.Input
        name="entity.job.id"
        label="Job Id"
        placeholder="job id"
        validation={EntityJobIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobJobDocumentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityJobJobDocumentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EntityJobJobDocumentsAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityJobJobDocumentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EntityJobJobDocumentsCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityJobJobDocumentsContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={EntityJobJobDocumentsContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityJobJobDocumentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator validation={EntityJobJobDocumentsIdArrayInputValidation}>
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityJobJobDocumentsMetadataCreatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={EntityJobJobDocumentsMetadataCreatedAtArrayInputValidation}
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityJobJobDocumentsMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={EntityJobJobDocumentsMetadataLivenessArrayInputValidation}
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityJobJobDocumentsMetadataUpdatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={EntityJobJobDocumentsMetadataUpdatedAtArrayInputValidation}
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityJobJobDocumentsMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={EntityJobJobDocumentsMimetypeArrayInputValidation}
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityJobJobDocumentsNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EntityJobJobDocumentsNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityJobJobDocumentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EntityJobJobDocumentsOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobDocumentsValidation = {};

export function EntityJobJobDocumentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.job.job_documents"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityJobJobItemsDescriptionArrayInputValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function EntityJobJobItemsDescriptionArrayInput(props: any) {
  return (
    <Field.Array.Input name="description">
      <Field.Validator
        validation={EntityJobJobItemsDescriptionArrayInputValidation}
      >
        <Field.Input
          label="Description"
          placeholder="Description"
          label="Job Item Description"
          placeholder="job item description"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsPriceAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobJobItemsPriceAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={EntityJobJobItemsPriceAmountArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsPriceCurrencyArraySelectValidation = {};

export function EntityJobJobItemsPriceCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={EntityJobJobItemsPriceCurrencyArrayInputValidation}
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuantityArrayInputValidation = {
  required: { value: true, message: "Quantity is required." },
  min: { value: 0, message: "Quantity must be great than 0" },
  max: {
    value: 2147483647,
    message: "Quantity must be smaller than 2.147483647e+09",
  },
};

export function EntityJobJobItemsQuantityArrayInput(props: any) {
  return (
    <Field.Array.Input name="quantity">
      <Field.Validator
        validation={EntityJobJobItemsQuantityArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Quantity"
          placeholder="Quantity"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityJobJobItemsQuoteDocumentAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityJobJobItemsQuoteDocumentCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityJobJobItemsQuoteDocumentContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityJobJobItemsQuoteDocumentIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentMetadataCreatedAtArrayInputValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EntityJobJobItemsQuoteDocumentMetadataCreatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={
          EntityJobJobItemsQuoteDocumentMetadataCreatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentMetadataLivenessArrayInputValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EntityJobJobItemsQuoteDocumentMetadataLivenessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={
          EntityJobJobItemsQuoteDocumentMetadataLivenessArrayInputValidation
        }
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentMetadataUpdatedAtArrayInputValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EntityJobJobItemsQuoteDocumentMetadataUpdatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={
          EntityJobJobItemsQuoteDocumentMetadataUpdatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityJobJobItemsQuoteDocumentMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentMimetypeArrayInputValidation}
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityJobJobItemsQuoteDocumentNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsQuoteDocumentOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityJobJobItemsQuoteDocumentOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EntityJobJobItemsQuoteDocumentOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsStyleArraySelectValidation = {
  disabled: { value: true, message: "Style input is read only or disabled" },
};

export function EntityJobJobItemsStyleArraySelect(props: any) {
  return (
    <Field.Array.Input name="style">
      <Field.Validator validation={EntityJobJobItemsStyleArrayInputValidation}>
        <Field.RadioSelect
          label="Style"
          placeholder="Style"
          label="Style"
          placeholder="style"
          options={[
            { name: "Kanda", value: "kanda" },
            { name: "Custom", value: "custom" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsTitleArrayInputValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function EntityJobJobItemsTitleArrayInput(props: any) {
  return (
    <Field.Array.Input name="title">
      <Field.Validator validation={EntityJobJobItemsTitleArrayInputValidation}>
        <Field.Input
          label="Title"
          placeholder="Title"
          label="Job Item Title"
          placeholder="job item title"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsVatAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobJobItemsVatAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={EntityJobJobItemsVatAmountArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsVatCurrencyArraySelectValidation = {};

export function EntityJobJobItemsVatCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={EntityJobJobItemsVatCurrencyArrayInputValidation}
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsVatRateArraySelectValidation = {};

export function EntityJobJobItemsVatRateArraySelect(props: any) {
  return (
    <Field.Array.Input name="vat_rate">
      <Field.Validator
        validation={EntityJobJobItemsVatRateArrayInputValidation}
      >
        <Field.Select
          label="Vat Rate"
          placeholder="Vat Rate"
          label="Vat Applicable Rate"
          placeholder="vat applicable rate"
          options={[
            { name: "Vat Not Set", value: "vat_not_set" },
            { name: "Exempted", value: "exempted" },
            { name: "0%", value: "0%" },
            { name: "5%", value: "5%" },
            { name: "20%", value: "20%" },
            { name: "Custom", value: "custom" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobJobItemsValidation = {
  required: { value: true, message: "Job Items is required." },
  minLength: { value: 1, message: "Job Items requires minimum length of 1" },
};

export function EntityJobJobItemsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.job.job_items"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityJobJobTypeValidation = {};

export function EntityJobJobType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobJobTypeValidation}>
      <Field.RadioSelect
        name="entity.job.job_type"
        label="Job Type"
        placeholder="job type"
        options={[
          { name: "Standard", value: "standard" },
          { name: "Solar", value: "solar" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityJobMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobMetadataCreatedAtValidation}>
      <Field.Input
        name="entity.job.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityJobMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityJobMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={EntityJobMetadataLivenessValidation}>
      <Field.BooleanInput
        name="entity.job.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityJobMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityJobMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobMetadataUpdatedAtValidation}>
      <Field.Input
        name="entity.job.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityJobMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobNotesValidation = {};

export function EntityJobNotesArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper arrayName="entity.job.notes" initialData={initialData}>
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityJobOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityJobOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobOidValidation}>
      <Field.Input
        name="entity.job.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityJobOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobPaymentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityJobPaymentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator validation={EntityJobPaymentsAidArrayInputValidation}>
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityJobPaymentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator validation={EntityJobPaymentsCidArrayInputValidation}>
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityJobPaymentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator validation={EntityJobPaymentsIdArrayInputValidation}>
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Payment Id"
          placeholder="payment id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsKidArrayInputValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function EntityJobPaymentsKidArrayInput(props: any) {
  return (
    <Field.Array.Input name="kid">
      <Field.Validator validation={EntityJobPaymentsKidArrayInputValidation}>
        <Field.Input
          label="Kid"
          placeholder="Kid"
          label="Internal Kind Id"
          placeholder="internal kind id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsKindArraySelectValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function EntityJobPaymentsKindArraySelect(props: any) {
  return (
    <Field.Array.Input name="kind">
      <Field.Validator validation={EntityJobPaymentsKindArrayInputValidation}>
        <Field.RadioSelect
          label="Kind"
          placeholder="Kind"
          label="Internal Kind"
          placeholder="internal kind"
          options={[
            { name: "Job", value: "job" },
            { name: "Charge", value: "charge" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityJobPaymentsMetadataCreatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={EntityJobPaymentsMetadataCreatedAtArrayInputValidation}
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityJobPaymentsMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={EntityJobPaymentsMetadataLivenessArrayInputValidation}
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityJobPaymentsMetadataUpdatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={EntityJobPaymentsMetadataUpdatedAtArrayInputValidation}
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityJobPaymentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator validation={EntityJobPaymentsOidArrayInputValidation}>
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsPaymentOptionAmountAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobPaymentsPaymentOptionAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EntityJobPaymentsPaymentOptionAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsPaymentOptionAmountCurrencyArraySelectValidation =
  {};

export function EntityJobPaymentsPaymentOptionAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EntityJobPaymentsPaymentOptionAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsPaymentOptionPaymentMethodArraySelectValidation =
  { required: { value: true, message: "Payment Method is required." } };

export function EntityJobPaymentsPaymentOptionPaymentMethodArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="payment_method">
      <Field.Validator
        validation={
          EntityJobPaymentsPaymentOptionPaymentMethodArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Payment Method"
          placeholder="Payment Method"
          label="Payment Method"
          placeholder="payment method"
          options={[
            { name: "Cash", value: "cash" },
            { name: "Card", value: "card" },
            { name: "Loan", value: "loan" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsStatusArraySelectValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function EntityJobPaymentsStatusArraySelect(props: any) {
  return (
    <Field.Array.Input name="status">
      <Field.Validator validation={EntityJobPaymentsStatusArrayInputValidation}>
        <Field.Select
          label="Status"
          placeholder="Status"
          label="Payment Status"
          placeholder="payment status"
          options={[
            { name: "Unpaid", value: "unpaid" },
            { name: "Pending", value: "pending" },
            { name: "Paid", value: "paid" },
            { name: "Disputed", value: "disputed" },
            { name: "Cancelled", value: "cancelled" },
            { name: "Refunded", value: "refunded" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsXidArrayInputValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EntityJobPaymentsXidArrayInput(props: any) {
  return (
    <Field.Array.Input name="xid">
      <Field.Validator validation={EntityJobPaymentsXidArrayInputValidation}>
        <Field.Input
          label="Xid"
          placeholder="Xid"
          label="External Reference Id"
          placeholder="external reference id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsXrefArrayInputValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EntityJobPaymentsXrefArrayInput(props: any) {
  return (
    <Field.Array.Input name="xref">
      <Field.Validator validation={EntityJobPaymentsXrefArrayInputValidation}>
        <Field.Input
          label="Xref"
          placeholder="Xref"
          label="External Reference"
          placeholder="external reference"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityJobPaymentsValidation = {
  disabled: { value: true, message: "Payments input is read only or disabled" },
};

export function EntityJobPaymentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.job.payments"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityJobSatNoteCertificateAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityJobSatNoteCertificateAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateAidValidation}>
      <Field.Input
        name="entity.job.sat_note.certificate.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityJobSatNoteCertificateAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityJobSatNoteCertificateCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateCidValidation}>
      <Field.Input
        name="entity.job.sat_note.certificate.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityJobSatNoteCertificateCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityJobSatNoteCertificateContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateContentValidation}>
      <Field.File
        name="entity.job.sat_note.certificate.content"
        label="Document Content"
        placeholder="document content"
        validation={EntityJobSatNoteCertificateContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityJobSatNoteCertificateId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateIdValidation}>
      <Field.Input
        name="entity.job.sat_note.certificate.id"
        label="Document Id"
        placeholder="document id"
        validation={EntityJobSatNoteCertificateIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityJobSatNoteCertificateMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityJobSatNoteCertificateMetadataCreatedAtValidation}
    >
      <Field.Input
        name="entity.job.sat_note.certificate.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityJobSatNoteCertificateMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityJobSatNoteCertificateMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={EntityJobSatNoteCertificateMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="entity.job.sat_note.certificate.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityJobSatNoteCertificateMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityJobSatNoteCertificateMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityJobSatNoteCertificateMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="entity.job.sat_note.certificate.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityJobSatNoteCertificateMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityJobSatNoteCertificateMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateMimetypeValidation}>
      <Field.Input
        name="entity.job.sat_note.certificate.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EntityJobSatNoteCertificateMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityJobSatNoteCertificateName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateNameValidation}>
      <Field.Input
        name="entity.job.sat_note.certificate.name"
        label="Document Name"
        placeholder="document name"
        validation={EntityJobSatNoteCertificateNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteCertificateOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityJobSatNoteCertificateOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteCertificateOidValidation}>
      <Field.Input
        name="entity.job.sat_note.certificate.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityJobSatNoteCertificateOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteQAdviceValidation = {
  required: { value: true, message: "Q Advice is required." },
};

export function EntityJobSatNoteQAdvice(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteQAdviceValidation}>
      <Field.Select
        name="entity.job.sat_note.q_advice"
        label="What Advice Did The Installer Give You On Your Finance Application?"
        placeholder="What advice did the installer give you on your finance application?"
        options={[
          {
            name: "They Just Sent Me A Link To Apply",
            value: "They just sent me a link to apply",
          },
          {
            name: "They Told Me What Rates Where Available",
            value: "They told me what rates where available",
          },
          {
            name: "They Helped Me Work Out My Potential Repayments",
            value: "They helped me work out my potential repayments",
          },
          {
            name: "They Completed The Application For Me",
            value: "They completed the application for me",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteQApplicationValidation = {
  required: { value: true, message: "Q Application is required." },
};

export function EntityJobSatNoteQApplication(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteQApplicationValidation}>
      <Field.Select
        name="entity.job.sat_note.q_application"
        label="Who Completed Your Application For Finance?"
        placeholder="Who completed your application for finance?"
        options={[
          {
            name: "I Completed The Application Myself",
            value: "I completed the application myself",
          },
          {
            name: "Someone Completed The Appliation On My Behalf",
            value: "Someone completed the appliation on my behalf",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteQAvailabilityValidation = {
  required: { value: true, message: "Q Availability is required." },
};

export function EntityJobSatNoteQAvailability(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteQAvailabilityValidation}>
      <Field.Select
        name="entity.job.sat_note.q_availability"
        label="How Did You First Become Aware That Finance Was Available?"
        placeholder="How did you first become aware that finance was available?"
        options={[
          {
            name: "The Installer Told Me When Quoting Me",
            value: "The installer told me when quoting me",
          },
          {
            name: "I Saw It Advertised By The Installer",
            value: "I saw it advertised by the installer",
          },
          {
            name: "I Found Out When The Installer Sent Me A Link Via Kanda",
            value: "I found out when the installer sent me a link via Kanda",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteQEasinessValidation = {
  required: { value: true, message: "Q Easiness is required." },
};

export function EntityJobSatNoteQEasiness(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteQEasinessValidation}>
      <Field.Select
        name="entity.job.sat_note.q_easiness"
        label="Do You Find It Hard To Apply For Finance With Kanda?"
        placeholder="Do you find it hard to apply for finance with Kanda?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteQPressureValidation = {
  required: { value: true, message: "Q Pressure is required." },
};

export function EntityJobSatNoteQPressure(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteQPressureValidation}>
      <Field.Select
        name="entity.job.sat_note.q_pressure"
        label="Did The Installer Pressure You To Apply For Finance?"
        placeholder="Did the installer pressure you to apply for finance?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteQSavingValidation = {};

export function EntityJobSatNoteQSaving(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteQSavingValidation}>
      <Field.RadioSelect
        name="entity.job.sat_note.q_saving"
        label="Were You Told About Any Potential Feed In Tariffs, Savings, Returns Or Renewable Heat Incentive And Do You Understand That The Actual Amounts  You  Receive, And Your Estimated Returns/Savings Were Based On Varying Factors Including You Own Energy Consumption And Any Returns/Savings/Payback Periods Are Not Linked To Your Repayments On This Agreement."
        placeholder="Were you told about any potential feed in tariffs, savings, returns or Renewable Heat incentive and do you understand that the actual amounts  you  receive, and your estimated returns/savings were based on varying factors including you own energy consumption and any returns/savings/payback periods are not linked to your repayments on this agreement."
        options={[
          { name: "Yes I Understand", value: "Yes I understand" },
          { name: "No I Don'T Understand", value: "No I don't understand" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function EntityJobSatNoteSignatureFingerprint(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityJobSatNoteSignatureFingerprintValidation}
    >
      <Field.Input
        name="entity.job.sat_note.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={EntityJobSatNoteSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function EntityJobSatNoteSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobSatNoteSignatureSignedValidation}>
      <Field.RadioSelect
        name="entity.job.sat_note.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteTimelineSentAtValidation = {
  disabled: { value: true, message: "Sent At input is read only or disabled" },
};

export function EntityJobSatNoteTimelineSentAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteTimelineSentAtValidation}>
      <Field.Input
        name="entity.job.sat_note_timeline.sent_at"
        label="Timestamp Sat Note Is Sent"
        placeholder="timestamp sat note is sent"
        validation={EntityJobSatNoteTimelineSentAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteTimelineSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function EntityJobSatNoteTimelineSignedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteTimelineSignedAtValidation}>
      <Field.Input
        name="entity.job.sat_note_timeline.signed_at"
        label="Timestamp Sat Note Is Signed"
        placeholder="timestamp sat note is signed"
        validation={EntityJobSatNoteTimelineSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobSatNoteTimelineViewedAtValidation = {
  disabled: {
    value: true,
    message: "Viewed At input is read only or disabled",
  },
};

export function EntityJobSatNoteTimelineViewedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobSatNoteTimelineViewedAtValidation}>
      <Field.Input
        name="entity.job.sat_note_timeline.viewed_at"
        label="Timestamp Sat Note Is Viewed"
        placeholder="timestamp sat note is viewed"
        validation={EntityJobSatNoteTimelineViewedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobStatusValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function EntityJobStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityJobStatusValidation}>
      <Field.Select
        name="entity.job.status"
        label="Job Status"
        placeholder="job status"
        options={[
          { name: "Draft", value: "draft" },
          { name: "Sent", value: "sent" },
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Finished", value: "finished" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTitleValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function EntityJobTitle(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityJobTitleValidation}>
      <Field.Input
        name="entity.job.title"
        label="Job Title"
        placeholder="job title"
        validation={EntityJobTitleValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTotalAmountVatAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobTotalAmountVatAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntityJobTotalAmountVatAmountValidation}>
      <Field.NumberFormatInput
        name="entity.job.total.amount_vat.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityJobTotalAmountVatAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTotalAmountVatCurrencyValidation = {};

export function EntityJobTotalAmountVatCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityJobTotalAmountVatCurrencyValidation}>
      <Field.RadioSelect
        name="entity.job.total.amount_vat.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTotalAmountVatExclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobTotalAmountVatExclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityJobTotalAmountVatExclusiveAmountValidation}
    >
      <Field.NumberFormatInput
        name="entity.job.total.amount_vat_exclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityJobTotalAmountVatExclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTotalAmountVatExclusiveCurrencyValidation = {};

export function EntityJobTotalAmountVatExclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EntityJobTotalAmountVatExclusiveCurrencyValidation}
    >
      <Field.RadioSelect
        name="entity.job.total.amount_vat_exclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTotalAmountVatInclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityJobTotalAmountVatInclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityJobTotalAmountVatInclusiveAmountValidation}
    >
      <Field.NumberFormatInput
        name="entity.job.total.amount_vat_inclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityJobTotalAmountVatInclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityJobTotalAmountVatInclusiveCurrencyValidation = {};

export function EntityJobTotalAmountVatInclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EntityJobTotalAmountVatInclusiveCurrencyValidation}
    >
      <Field.RadioSelect
        name="entity.job.total.amount_vat_inclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityCompanyAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyAidValidation}>
      <Field.Input
        name="entity.company.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityCompanyAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyAvailableRatesEnabledArrayInputValidation = {
  required: { value: true, message: "Enabled is required." },
};

export function EntityCompanyAvailableRatesEnabledArrayInput(props: any) {
  return (
    <Field.Array.Input name="enabled">
      <Field.Validator
        validation={EntityCompanyAvailableRatesEnabledArrayInputValidation}
      >
        <Field.BooleanInput
          label="Enabled"
          placeholder="Enabled"
          label="Enabled?"
          placeholder="enabled?"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyAvailableRatesFeeArrayInputValidation = {
  required: { value: true, message: "Fee is required." },
  min: { value: 0, message: "Fee must be great than 0" },
  max: {
    value: 2147483647,
    message: "Fee must be smaller than 2.147483647e+09",
  },
};

export function EntityCompanyAvailableRatesFeeArrayInput(props: any) {
  return (
    <Field.Array.Input name="fee">
      <Field.Validator
        validation={EntityCompanyAvailableRatesFeeArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Fee"
          placeholder="Fee"
          label="Fee"
          placeholder="fee"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyAvailableRatesNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityCompanyAvailableRatesNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EntityCompanyAvailableRatesNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Name"
          placeholder="name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyAvailableRatesValidation = {};

export function EntityCompanyAvailableRatesArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.company.available_rates"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCompanyBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function EntityCompanyBankAccountAccountName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntityCompanyBankAccountAccountNameValidation}>
      <Field.Input
        name="entity.company.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={EntityCompanyBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function EntityCompanyBankAccountAccountNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyBankAccountAccountNumberValidation}
    >
      <Field.Input
        name="entity.company.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={EntityCompanyBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function EntityCompanyBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntityCompanyBankAccountMonthsHeldValidation}>
      <Field.NumberFormatInput
        name="entity.company.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={EntityCompanyBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function EntityCompanyBankAccountSortCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyBankAccountSortCodeValidation}>
      <Field.Input
        name="entity.company.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={EntityCompanyBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyBillingValidation = {
  disabled: { value: true, message: "Billing input is read only or disabled" },
};

export function EntityCompanyBilling(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityCompanyBillingValidation}>
      <Field.Select
        name="entity.company.billing"
        label="Company Billing"
        placeholder="company billing"
        options={[
          { name: "Legacy", value: "legacy" },
          { name: "Trial", value: "trial" },
          { name: "Pending", value: "pending" },
          { name: "Referred", value: "referred" },
          { name: "Subscribed", value: "subscribed" },
          {
            name: "Recurring Payment Failed 1",
            value: "recurring_payment_failed_1",
          },
          {
            name: "Recurring Payment Failed 2",
            value: "recurring_payment_failed_2",
          },
          {
            name: "Recurring Payment Failed 3",
            value: "recurring_payment_failed_3",
          },
          { name: "Suspended", value: "suspended" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityCompanyCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCidValidation}>
      <Field.Input
        name="entity.company.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityCompanyCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoAverageJobValueValidation = {
  required: { value: true, message: "Average Job Value is required." },
  min: { value: 0, message: "Average Job Value must be great than 0" },
  max: {
    value: 2147483647,
    message: "Average Job Value must be smaller than 2.147483647e+09",
  },
};

export function EntityCompanyCompanyInfoAverageJobValue(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoAverageJobValueValidation}
    >
      <Field.NumberFormatInput
        name="entity.company.company_info.average_job_value"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityCompanyCompanyInfoAverageJobValueValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoAverageMonthlyJobsValidation = {
  required: { value: true, message: "Average Monthly Jobs is required." },
  min: { value: 1, message: "Average Monthly Jobs must be great than 1" },
  max: {
    value: 2147483647,
    message: "Average Monthly Jobs must be smaller than 2.147483647e+09",
  },
};

export function EntityCompanyCompanyInfoAverageMonthlyJobs(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoAverageMonthlyJobsValidation}
    >
      <Field.NumberFormatInput
        name="entity.company.company_info.average_monthly_jobs"
        label="Average Monthly Jobs"
        placeholder="average monthly jobs"
        validation={EntityCompanyCompanyInfoAverageMonthlyJobsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditionsValidation =
  {};

export function EntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditions(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditionsValidation
      }
    >
      <Field.RadioSelect
        name="entity.company.company_info.contract_agreement.agreed_terms_and_conditions"
        label="Agreed Terms And Conditions"
        placeholder="agreed terms and conditions"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation =
  {};

export function EntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKanda(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation
      }
    >
      <Field.RadioSelect
        name="entity.company.company_info.contract_agreement.agreed_to_become_iar_of_kanda"
        label="Agreed To Become IAR Of Kanda"
        placeholder="agreed to become IAR of Kanda"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityCompanyCompanyInfoContractAgreementContractAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractAidValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.aid"
        label="Author Id"
        placeholder="author id"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractAidValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityCompanyCompanyInfoContractAgreementContractCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractCidValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.cid"
        label="Company Id"
        placeholder="company id"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractCidValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractContentValidation =
  {
    maxLength: {
      value: 1048487,
      message: "Content requires maximum length of 1048487",
    },
  };

export function EntityCompanyCompanyInfoContractAgreementContractContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractContentValidation
      }
    >
      <Field.File
        name="entity.company.company_info.contract_agreement.contract.content"
        label="Document Content"
        placeholder="document content"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractContentValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityCompanyCompanyInfoContractAgreementContractId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoContractAgreementContractIdValidation}
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.id"
        label="Document Id"
        placeholder="document id"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractIdValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractMetadataLivenessValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoContractAgreementContractMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractMetadataLivenessValidation
      }
    >
      <Field.BooleanInput
        name="entity.company.company_info.contract_agreement.contract.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractMimetypeValidation =
  {
    disabled: {
      value: true,
      message: "Mimetype input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoContractAgreementContractMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractMimetypeValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractMimetypeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityCompanyCompanyInfoContractAgreementContractName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractNameValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.name"
        label="Document Name"
        placeholder="document name"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementContractOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityCompanyCompanyInfoContractAgreementContractOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoContractAgreementContractOidValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.contract.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={
          EntityCompanyCompanyInfoContractAgreementContractOidValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementPrintNameValidation = {
  minLength: { value: 1, message: "Print Name requires minimum length of 1" },
};

export function EntityCompanyCompanyInfoContractAgreementPrintName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoContractAgreementPrintNameValidation}
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.print_name"
        label="Print Name"
        placeholder="print name"
        validation={
          EntityCompanyCompanyInfoContractAgreementPrintNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoContractAgreementSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function EntityCompanyCompanyInfoContractAgreementSignedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoContractAgreementSignedAtValidation}
    >
      <Field.Input
        name="entity.company.company_info.contract_agreement.signed_at"
        label="Signed At"
        placeholder="signed at"
        validation={EntityCompanyCompanyInfoContractAgreementSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityCompanyCompanyInfoInsuranceDocumentAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentAidValidation}
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityCompanyCompanyInfoInsuranceDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityCompanyCompanyInfoInsuranceDocumentCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentCidValidation}
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityCompanyCompanyInfoInsuranceDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityCompanyCompanyInfoInsuranceDocumentContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentContentValidation}
    >
      <Field.File
        name="entity.company.company_info.insurance_document.content"
        label="Document Content"
        placeholder="document content"
        validation={EntityCompanyCompanyInfoInsuranceDocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityCompanyCompanyInfoInsuranceDocumentId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentIdValidation}
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.id"
        label="Document Id"
        placeholder="document id"
        validation={EntityCompanyCompanyInfoInsuranceDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          EntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoInsuranceDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation
      }
    >
      <Field.BooleanInput
        name="entity.company.company_info.insurance_document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          EntityCompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          EntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityCompanyCompanyInfoInsuranceDocumentMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentMimetypeValidation}
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EntityCompanyCompanyInfoInsuranceDocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityCompanyCompanyInfoInsuranceDocumentName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentNameValidation}
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.name"
        label="Document Name"
        placeholder="document name"
        validation={EntityCompanyCompanyInfoInsuranceDocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoInsuranceDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityCompanyCompanyInfoInsuranceDocumentOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoInsuranceDocumentOidValidation}
    >
      <Field.Input
        name="entity.company.company_info.insurance_document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityCompanyCompanyInfoInsuranceDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoTradeBodyNameValidation = {
  required: { value: true, message: "Trade Body Name is required." },
  minLength: {
    value: 1,
    message: "Trade Body Name requires minimum length of 1",
  },
};

export function EntityCompanyCompanyInfoTradeBodyName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoTradeBodyNameValidation}
    >
      <Field.Input
        name="entity.company.company_info.trade_body_name"
        label="Trade Body Name"
        placeholder="trade body name"
        validation={EntityCompanyCompanyInfoTradeBodyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoTradeBodyNumberValidation = {
  minLength: {
    value: 1,
    message: "Trade Body Number requires minimum length of 1",
  },
};

export function EntityCompanyCompanyInfoTradeBodyNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoTradeBodyNumberValidation}
    >
      <Field.Input
        name="entity.company.company_info.trade_body_number"
        label="Trade Body Number"
        placeholder="trade body number"
        validation={EntityCompanyCompanyInfoTradeBodyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoTradeBodyValidation = {
  required: { value: true, message: "Trade Body is required." },
};

export function EntityCompanyCompanyInfoTradeBody(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityCompanyCompanyInfoTradeBodyValidation}>
      <Field.Select
        name="entity.company.company_info.trade_body"
        label="Trade Body"
        placeholder="trade body"
        options={[
          { name: "None", value: "none" },
          { name: "Acrib", value: "acrib" },
          { name: "Aphc", value: "aphc" },
          { name: "Assure", value: "assure" },
          { name: "Certass", value: "certass" },
          { name: "Elecsa", value: "elecsa" },
          { name: "Fensa", value: "fensa" },
          { name: "Feta", value: "feta" },
          { name: "Gas Safe", value: "gas_safe" },
          { name: "Hetas", value: "hetas" },
          { name: "Napit", value: "napit" },
          { name: "Nfrc", value: "nfrc" },
          { name: "Niceic", value: "niceic" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoTradeTypeNameValidation = {
  required: { value: true, message: "Trade Type Name is required." },
  minLength: {
    value: 1,
    message: "Trade Type Name requires minimum length of 1",
  },
};

export function EntityCompanyCompanyInfoTradeTypeName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoTradeTypeNameValidation}
    >
      <Field.Input
        name="entity.company.company_info.trade_type_name"
        label="Trade Type Name"
        placeholder="trade type name"
        validation={EntityCompanyCompanyInfoTradeTypeNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoTradeTypeValidation = {
  required: { value: true, message: "Trade Type is required." },
};

export function EntityCompanyCompanyInfoTradeType(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityCompanyCompanyInfoTradeTypeValidation}>
      <Field.Select
        name="entity.company.company_info.trade_type"
        label="Trade Type"
        placeholder="trade type"
        options={[
          { name: "Air Conditioning", value: "air_conditioning" },
          { name: "Bathrooms", value: "bathrooms" },
          { name: "Battery Storage", value: "battery_storage" },
          { name: "Blinds And Shutters", value: "blinds_and_shutters" },
          { name: "Carpentry", value: "carpentry" },
          {
            name: "Cctv And Security Installations",
            value: "cctv_and_security_installations",
          },
          { name: "Conservatories", value: "conservatories" },
          { name: "Decking", value: "decking" },
          { name: "Driveways And Patios", value: "driveways_and_patios" },
          { name: "Electrician", value: "electrician" },
          { name: "Ev Charger Installer", value: "ev_charger_installer" },
          { name: "Fencing", value: "fencing" },
          { name: "Fireplaces", value: "fireplaces" },
          {
            name: "Fitted Bedroom Furniture",
            value: "fitted_bedroom_furniture",
          },
          { name: "Floor Layer", value: "floor_layer" },
          { name: "Garage Doors", value: "garage_doors" },
          { name: "Garden Rooms", value: "garden_rooms" },
          { name: "Gas Engineer", value: "gas_engineer" },
          { name: "Gates", value: "gates" },
          { name: "Heat Pumps", value: "heat_pumps" },
          { name: "Heating Systems", value: "heating_systems" },
          { name: "Kitchen Fitter", value: "kitchen_fitter" },
          { name: "Landscaping", value: "landscaping" },
          { name: "Plumbing", value: "plumbing" },
          { name: "Resin Driveways", value: "resin_driveways" },
          {
            name: "Roofing  Excluding Flat Roofs",
            value: "roofing__excluding_flat_roofs",
          },
          { name: "Security Systems", value: "security_systems" },
          { name: "Tiler", value: "tiler" },
          { name: "Verandas", value: "verandas" },
          { name: "Windows And Doors", value: "windows_and_doors" },
          { name: "Multi Trade", value: "multi_trade" },
          { name: "Other Trade", value: "other_trade" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoUseSubcontractorValidation = {
  required: { value: true, message: "Use Subcontractor is required." },
};

export function EntityCompanyCompanyInfoUseSubcontractor(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoUseSubcontractorValidation}
    >
      <Field.Select
        name="entity.company.company_info.use_subcontractor"
        label="Use Subcontractor?"
        placeholder="use subcontractor?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyInfoWarrantyLengthValidation = {
  required: { value: true, message: "Warranty Length is required." },
  min: { value: 1, message: "Warranty Length must be great than 1" },
};

export function EntityCompanyCompanyInfoWarrantyLength(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyInfoWarrantyLengthValidation}
    >
      <Field.NumberFormatInput
        name="entity.company.company_info.warranty_length"
        label="Warranty Length"
        placeholder="warranty length"
        validation={EntityCompanyCompanyInfoWarrantyLengthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityCompanyCompanyLogoAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoAidValidation}>
      <Field.Input
        name="entity.company.company_logo.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityCompanyCompanyLogoAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityCompanyCompanyLogoCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoCidValidation}>
      <Field.Input
        name="entity.company.company_logo.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityCompanyCompanyLogoCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityCompanyCompanyLogoContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoContentValidation}>
      <Field.File
        name="entity.company.company_logo.content"
        label="Document Content"
        placeholder="document content"
        validation={EntityCompanyCompanyLogoContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityCompanyCompanyLogoId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoIdValidation}>
      <Field.Input
        name="entity.company.company_logo.id"
        label="Document Id"
        placeholder="document id"
        validation={EntityCompanyCompanyLogoIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityCompanyCompanyLogoMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyLogoMetadataCreatedAtValidation}
    >
      <Field.Input
        name="entity.company.company_logo.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityCompanyCompanyLogoMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityCompanyCompanyLogoMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyLogoMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="entity.company.company_logo.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityCompanyCompanyLogoMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityCompanyCompanyLogoMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyCompanyLogoMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="entity.company.company_logo.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityCompanyCompanyLogoMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityCompanyCompanyLogoMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoMimetypeValidation}>
      <Field.Input
        name="entity.company.company_logo.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EntityCompanyCompanyLogoMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityCompanyCompanyLogoName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoNameValidation}>
      <Field.Input
        name="entity.company.company_logo.name"
        label="Document Name"
        placeholder="document name"
        validation={EntityCompanyCompanyLogoNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyLogoOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityCompanyCompanyLogoOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyCompanyLogoOidValidation}>
      <Field.Input
        name="entity.company.company_logo.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityCompanyCompanyLogoOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyCompanyTypeValidation = {
  required: { value: true, message: "Company Type is required." },
};

export function EntityCompanyCompanyType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCompanyCompanyTypeValidation}>
      <Field.RadioSelect
        name="entity.company.company_type"
        label="Company Type"
        placeholder="company type"
        options={[
          { name: "Limited Company", value: "limited_company" },
          { name: "Sole Trader", value: "sole_trader" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function EntityCompanyContactInfoContactAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressBuildingNameValidation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCompanyContactInfoContactAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function EntityCompanyContactInfoContactAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyContactInfoContactAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCompanyContactInfoContactAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCompanyContactInfoContactAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressCityValidation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCompanyContactInfoContactAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCompanyContactInfoContactAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressCountryValidation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.country"
        label="Country"
        placeholder="country"
        validation={EntityCompanyContactInfoContactAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCompanyContactInfoContactAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressCountyValidation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.county"
        label="County / State"
        placeholder="county / state"
        validation={EntityCompanyContactInfoContactAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCompanyContactInfoContactAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressLine1Validation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={EntityCompanyContactInfoContactAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCompanyContactInfoContactAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressLine2Validation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={EntityCompanyContactInfoContactAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function EntityCompanyContactInfoContactAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyContactInfoContactAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.company.contact_info.contact_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCompanyContactInfoContactAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCompanyContactInfoContactAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactAddressPostcodeValidation}
    >
      <Field.Postcode
        name="entity.company.contact_info.contact_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={EntityCompanyContactInfoContactAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactEmailValidation = {};

export function EntityCompanyContactInfoContactEmail(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactEmailValidation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_email"
        label="Contact Email"
        placeholder="contact email"
        validation={EntityCompanyContactInfoContactEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactNameValidation = {};

export function EntityCompanyContactInfoContactName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntityCompanyContactInfoContactNameValidation}>
      <Field.Input
        name="entity.company.contact_info.contact_name"
        label="Contact Name"
        placeholder="contact name"
        validation={EntityCompanyContactInfoContactNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoContactPhoneValidation = {};

export function EntityCompanyContactInfoContactPhone(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyContactInfoContactPhoneValidation}
    >
      <Field.Input
        name="entity.company.contact_info.contact_phone"
        label="Contact Phone Number"
        placeholder="contact phone number"
        validation={EntityCompanyContactInfoContactPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyContactInfoTradingNameValidation = {};

export function EntityCompanyContactInfoTradingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntityCompanyContactInfoTradingNameValidation}>
      <Field.Input
        name="entity.company.contact_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={EntityCompanyContactInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyEmailsValidation = {
  disabled: { value: true, message: "Emails input is read only or disabled" },
};

export function EntityCompanyEmailsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.company.emails"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCompanyIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityCompanyId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyIdValidation}>
      <Field.Input
        name="entity.company.id"
        label="Company Unique Id"
        placeholder="company unique id"
        validation={EntityCompanyIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLifecycleValidation = {
  disabled: {
    value: true,
    message: "Lifecycle input is read only or disabled",
  },
};

export function EntityCompanyLifecycle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityCompanyLifecycleValidation}>
      <Field.Select
        name="entity.company.lifecycle"
        label="Company Lifecycle State"
        placeholder="company lifecycle state"
        options={[
          { name: "Registered", value: "registered" },
          { name: "Subscribed", value: "subscribed" },
          { name: "Director Info Provided", value: "director_info_provided" },
          { name: "Onboarded", value: "onboarded" },
          { name: "Insurance Uploaded", value: "insurance_uploaded" },
          { name: "Completed Setup", value: "completed_setup" },
          { name: "Verified", value: "verified" },
          { name: "Declined", value: "declined" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCompanyLimitedCompanyInfoCompanyAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoCompanyAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoCompanyAddressCityValidation}
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCompanyLimitedCompanyInfoCompanyAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoCompanyAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoCompanyAddressCountryValidation
      }
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.country"
        label="Country"
        placeholder="country"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoCompanyAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoCompanyAddressCountyValidation}
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoCompanyAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoCompanyAddressLine1Validation}
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoCompanyAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoCompanyAddressLine2Validation}
    >
      <Field.Input
        name="entity.company.limited_company_info.company_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.company.limited_company_info.company_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCompanyLimitedCompanyInfoCompanyAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoCompanyAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="entity.company.limited_company_info.company_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EntityCompanyLimitedCompanyInfoCompanyAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyNameValidation = {
  required: { value: true, message: "Company Name is required." },
  minLength: { value: 1, message: "Company Name requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoCompanyName(
  props: FieldProps["Company"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoCompanyNameValidation}
    >
      <Field.Company
        name="entity.company.limited_company_info.company_name"
        label="Company Name"
        placeholder="company name"
        validation={EntityCompanyLimitedCompanyInfoCompanyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoCompanyNumberValidation = {
  required: { value: true, message: "Company Number is required." },
  minLength: {
    value: 1,
    message: "Company Number requires minimum length of 1",
  },
};

export function EntityCompanyLimitedCompanyInfoCompanyNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoCompanyNumberValidation}
    >
      <Field.Input
        name="entity.company.limited_company_info.company_number"
        label="Company Number"
        placeholder="company number"
        validation={EntityCompanyLimitedCompanyInfoCompanyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCompanyLimitedCompanyInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoTradingAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCompanyLimitedCompanyInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoTradingAddressCityValidation}
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCompanyLimitedCompanyInfoTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoTradingAddressCountryValidation
      }
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoTradingAddressCountyValidation}
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoTradingAddressLine1Validation}
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCompanyLimitedCompanyInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoTradingAddressLine2Validation}
    >
      <Field.Input
        name="entity.company.limited_company_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.company.limited_company_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCompanyLimitedCompanyInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanyLimitedCompanyInfoTradingAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="entity.company.limited_company_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EntityCompanyLimitedCompanyInfoTradingAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyLimitedCompanyInfoVatNumberValidation = {
  minLength: { value: 1, message: "Vat Number requires minimum length of 1" },
  pattern: {
    value: /^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/,
    message: "Vat Number input is invalid",
  },
};

export function EntityCompanyLimitedCompanyInfoVatNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanyLimitedCompanyInfoVatNumberValidation}
    >
      <Field.Input
        name="entity.company.limited_company_info.vat_number"
        label="Vat Number"
        placeholder="vat number"
        validation={EntityCompanyLimitedCompanyInfoVatNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityCompanyMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyMetadataCreatedAtValidation}>
      <Field.Input
        name="entity.company.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityCompanyMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityCompanyMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EntityCompanyMetadataLivenessValidation}>
      <Field.BooleanInput
        name="entity.company.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityCompanyMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityCompanyMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyMetadataUpdatedAtValidation}>
      <Field.Input
        name="entity.company.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityCompanyMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityCompanyOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyOidValidation}>
      <Field.Input
        name="entity.company.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityCompanyOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyQuotePreferenceValidation = {};

export function EntityCompanyQuotePreference(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCompanyQuotePreferenceValidation}>
      <Field.RadioSelect
        name="entity.company.quote_preference"
        label="Quote Preference"
        placeholder="quote preference"
        options={[
          { name: "No Preference", value: "no_preference" },
          { name: "Kanda", value: "kanda" },
          { name: "Custom", value: "custom" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyReferralCodeValidation = {};

export function EntityCompanyReferralCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCompanyReferralCodeValidation}>
      <Field.Input
        name="entity.company.referral_code"
        label="Optional Referral Code Used For The Sign Up"
        placeholder="optional referral code used for the sign up"
        validation={EntityCompanyReferralCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySkipDepositValidation = {};

export function EntityCompanySkipDeposit(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCompanySkipDepositValidation}>
      <Field.RadioSelect
        name="entity.company.skip_deposit"
        label="Company Is Allowed To Take Own Deposit"
        placeholder="company is allowed to take own deposit"
        options={[
          { name: "Yes", value: "Yes" },
          { name: "No", value: "No" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySolarCompanyInfoElectricalTradeAssociationNumberValidation =
  {
    minLength: {
      value: 1,
      message:
        "Electrical Trade Association Number requires minimum length of 1",
    },
  };

export function EntityCompanySolarCompanyInfoElectricalTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanySolarCompanyInfoElectricalTradeAssociationNumberValidation
      }
    >
      <Field.Input
        name="entity.company.solar_company_info.electrical_trade_association_number"
        label="Electrical Trade Association Number"
        placeholder="electrical trade association number"
        validation={
          EntityCompanySolarCompanyInfoElectricalTradeAssociationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySolarCompanyInfoElectricalTradeAssociationValidation =
  {
    required: {
      value: true,
      message: "Electrical Trade Association is required.",
    },
  };

export function EntityCompanySolarCompanyInfoElectricalTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        EntityCompanySolarCompanyInfoElectricalTradeAssociationValidation
      }
    >
      <Field.Select
        name="entity.company.solar_company_info.electrical_trade_association"
        label="Electrical Trade Association"
        placeholder="electrical trade association"
        options={[
          { name: "Niceic", value: "niceic" },
          { name: "Napit", value: "napit" },
          { name: "None", value: "none" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySolarCompanyInfoEpvsRegistrationNumberValidation = {
  required: { value: true, message: "Epvs Registration Number is required." },
  minLength: {
    value: 1,
    message: "Epvs Registration Number requires minimum length of 1",
  },
};

export function EntityCompanySolarCompanyInfoEpvsRegistrationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySolarCompanyInfoEpvsRegistrationNumberValidation}
    >
      <Field.Input
        name="entity.company.solar_company_info.epvs_registration_number"
        label="EPVS Registration Number"
        placeholder="EPVS registration number"
        validation={
          EntityCompanySolarCompanyInfoEpvsRegistrationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySolarCompanyInfoSolarTradeAssociationNumberValidation =
  {
    required: {
      value: true,
      message: "Solar Trade Association Number is required.",
    },
    minLength: {
      value: 1,
      message: "Solar Trade Association Number requires minimum length of 1",
    },
  };

export function EntityCompanySolarCompanyInfoSolarTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanySolarCompanyInfoSolarTradeAssociationNumberValidation
      }
    >
      <Field.Input
        name="entity.company.solar_company_info.solar_trade_association_number"
        label="Solar Trade Association Number"
        placeholder="solar trade association number"
        validation={
          EntityCompanySolarCompanyInfoSolarTradeAssociationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySolarCompanyInfoSolarTradeAssociationValidation = {
  required: { value: true, message: "Solar Trade Association is required." },
};

export function EntityCompanySolarCompanyInfoSolarTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EntityCompanySolarCompanyInfoSolarTradeAssociationValidation}
    >
      <Field.Select
        name="entity.company.solar_company_info.solar_trade_association"
        label="Solar Trade Association"
        placeholder="solar trade association"
        options={[
          { name: "Msc", value: "msc" },
          { name: "Heis", value: "heis" },
          { name: "Recc", value: "recc" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoNationalInsuranceNumberValidation = {
  minLength: {
    value: 1,
    message: "National Insurance Number requires minimum length of 1",
  },
};

export function EntityCompanySoleTraderInfoNationalInsuranceNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoNationalInsuranceNumberValidation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.national_insurance_number"
        label="National Insurance Number"
        placeholder="national insurance number"
        validation={
          EntityCompanySoleTraderInfoNationalInsuranceNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function EntityCompanySoleTraderInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanySoleTraderInfoTradingAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCompanySoleTraderInfoTradingAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCompanySoleTraderInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanySoleTraderInfoTradingAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCompanySoleTraderInfoTradingAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCompanySoleTraderInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingAddressCityValidation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCompanySoleTraderInfoTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCompanySoleTraderInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingAddressCountryValidation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={EntityCompanySoleTraderInfoTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCompanySoleTraderInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingAddressCountyValidation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={EntityCompanySoleTraderInfoTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCompanySoleTraderInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingAddressLine1Validation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={EntityCompanySoleTraderInfoTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCompanySoleTraderInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingAddressLine2Validation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={EntityCompanySoleTraderInfoTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCompanySoleTraderInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCompanySoleTraderInfoTradingAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.company.sole_trader_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCompanySoleTraderInfoTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCompanySoleTraderInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="entity.company.sole_trader_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={EntityCompanySoleTraderInfoTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanySoleTraderInfoTradingNameValidation = {
  required: { value: true, message: "Trading Name is required." },
  minLength: { value: 1, message: "Trading Name requires minimum length of 1" },
};

export function EntityCompanySoleTraderInfoTradingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCompanySoleTraderInfoTradingNameValidation}
    >
      <Field.Input
        name="entity.company.sole_trader_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={EntityCompanySoleTraderInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCompanyUsersDirectorInfoDateOfBirthArrayInputValidation = {};

export function EntityCompanyUsersDirectorInfoDateOfBirthArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoDateOfBirthArrayInputValidation
        }
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="date of birth"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EntityCompanyUsersDirectorInfoHomeAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EntityCompanyUsersDirectorInfoHomeAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoHomeAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EntityCompanyUsersDirectorInfoHomeAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoHomeAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersDirectorInfoVerificationStatusArraySelectValidation =
  {
    disabled: {
      value: true,
      message: "Verification Status input is read only or disabled",
    },
  };

export function EntityCompanyUsersDirectorInfoVerificationStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="verification_status">
      <Field.Validator
        validation={
          EntityCompanyUsersDirectorInfoVerificationStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Verification Status"
          placeholder="Verification Status"
          label="Verification Status"
          placeholder="verification status"
          options={[
            { name: "Not Verified", value: "not_verified" },
            { name: "Verification Submitted", value: "verification_submitted" },
            { name: "Verification Declined", value: "verification_declined" },
            { name: "Verified", value: "verified" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersEmailArrayInputValidation = {
  required: { value: true, message: "Email is required." },
};

export function EntityCompanyUsersEmailArrayInput(props: any) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator validation={EntityCompanyUsersEmailArrayInputValidation}>
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersFirstNameArrayInputValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function EntityCompanyUsersFirstNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator
        validation={EntityCompanyUsersFirstNameArrayInputValidation}
      >
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersLastNameArrayInputValidation = {
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function EntityCompanyUsersLastNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator
        validation={EntityCompanyUsersLastNameArrayInputValidation}
      >
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersMobileArrayInputValidation = {
  minLength: { value: 1, message: "Mobile requires minimum length of 1" },
};

export function EntityCompanyUsersMobileArrayInput(props: any) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator
        validation={EntityCompanyUsersMobileArrayInputValidation}
      >
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersRoleArraySelectValidation = {
  required: { value: true, message: "Role is required." },
};

export function EntityCompanyUsersRoleArraySelect(props: any) {
  return (
    <Field.Array.Input name="role">
      <Field.Validator validation={EntityCompanyUsersRoleArrayInputValidation}>
        <Field.RadioSelect
          label="Role"
          placeholder="Role"
          label="Company Role"
          placeholder="company role"
          options={[
            { name: "Company-Admin", value: "company-admin" },
            { name: "Company-Manager", value: "company-manager" },
            { name: "Company-Staff", value: "company-staff" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCompanyUsersValidation = {};

export function EntityCompanyUsersArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.company.users"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCreditAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityCreditAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditAidValidation}>
      <Field.Input
        name="entity.credit.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityCreditAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityCreditAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntityCreditAmountAmountValidation}>
      <Field.NumberFormatInput
        name="entity.credit.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityCreditAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditAmountCurrencyValidation = {};

export function EntityCreditAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCreditAmountCurrencyValidation}>
      <Field.RadioSelect
        name="entity.credit.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function EntityCreditBankAccountAccountName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditBankAccountAccountNameValidation}>
      <Field.Input
        name="entity.credit.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={EntityCreditBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function EntityCreditBankAccountAccountNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditBankAccountAccountNumberValidation}
    >
      <Field.Input
        name="entity.credit.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={EntityCreditBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function EntityCreditBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntityCreditBankAccountMonthsHeldValidation}>
      <Field.NumberFormatInput
        name="entity.credit.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={EntityCreditBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function EntityCreditBankAccountSortCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditBankAccountSortCodeValidation}>
      <Field.Input
        name="entity.credit.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={EntityCreditBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityCreditCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditCidValidation}>
      <Field.Input
        name="entity.credit.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityCreditCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCreditDocumentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityCreditCreditDocumentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EntityCreditCreditDocumentsAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityCreditCreditDocumentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EntityCreditCreditDocumentsCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityCreditCreditDocumentsContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={EntityCreditCreditDocumentsContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityCreditCreditDocumentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={EntityCreditCreditDocumentsIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsMetadataCreatedAtArrayInputValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EntityCreditCreditDocumentsMetadataCreatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={
          EntityCreditCreditDocumentsMetadataCreatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityCreditCreditDocumentsMetadataLivenessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={
          EntityCreditCreditDocumentsMetadataLivenessArrayInputValidation
        }
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsMetadataUpdatedAtArrayInputValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EntityCreditCreditDocumentsMetadataUpdatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={
          EntityCreditCreditDocumentsMetadataUpdatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityCreditCreditDocumentsMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={EntityCreditCreditDocumentsMimetypeArrayInputValidation}
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityCreditCreditDocumentsNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EntityCreditCreditDocumentsNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityCreditCreditDocumentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EntityCreditCreditDocumentsOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditCreditDocumentsValidation = {};

export function EntityCreditCreditDocumentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.credit.credit_documents"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function EntityCreditCustomerDetailsCurrentAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsCurrentAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCreditCustomerDetailsCurrentAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsCurrentAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsCurrentAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCreditCustomerDetailsCurrentAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsCurrentAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsCurrentAddressCityValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCreditCustomerDetailsCurrentAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsCurrentAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsCurrentAddressCountryValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.country"
        label="Country"
        placeholder="country"
        validation={EntityCreditCustomerDetailsCurrentAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsCurrentAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsCurrentAddressCountyValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.county"
        label="County / State"
        placeholder="county / state"
        validation={EntityCreditCustomerDetailsCurrentAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsCurrentAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsCurrentAddressLine1Validation}
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={EntityCreditCustomerDetailsCurrentAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsCurrentAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsCurrentAddressLine2Validation}
    >
      <Field.Input
        name="entity.credit.customer_details.current_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={EntityCreditCustomerDetailsCurrentAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditCustomerDetailsCurrentAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsCurrentAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.customer_details.current_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCreditCustomerDetailsCurrentAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsCurrentAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCreditCustomerDetailsCurrentAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsCurrentAddressPostcodeValidation}
    >
      <Field.Postcode
        name="entity.credit.customer_details.current_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={EntityCreditCustomerDetailsCurrentAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsDateOfBirthValidation = {
  required: { value: true, message: "Date Of Birth is required." },
};

export function EntityCreditCustomerDetailsDateOfBirth(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsDateOfBirthValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.date_of_birth"
        label="Date Of Birth"
        placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
        validation={EntityCreditCustomerDetailsDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function EntityCreditCustomerDetailsEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditCustomerDetailsEmailValidation}>
      <Field.Input
        name="entity.credit.customer_details.email"
        label="Email"
        placeholder="email"
        validation={EntityCreditCustomerDetailsEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
};

export function EntityCreditCustomerDetailsFirstName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsFirstNameValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.first_name"
        label="First Name"
        placeholder="first name"
        validation={EntityCreditCustomerDetailsFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGenderValidation = {
  required: { value: true, message: "Gender is required." },
};

export function EntityCreditCustomerDetailsGender(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCreditCustomerDetailsGenderValidation}>
      <Field.RadioSelect
        name="entity.credit.customer_details.gender"
        label="Gender"
        placeholder="gender"
        options={[
          { name: "Male", value: "male" },
          { name: "Female", value: "female" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsGoodsDeliveryAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsGoodsDeliveryAddressCityValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EntityCreditCustomerDetailsGoodsDeliveryAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressCountryValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.country"
        label="Country"
        placeholder="country"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsGoodsDeliveryAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressCountyValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsGoodsDeliveryAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressLine1Validation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsGoodsDeliveryAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressLine2Validation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.goods_delivery_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.customer_details.goods_delivery_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EntityCreditCustomerDetailsGoodsDeliveryAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="entity.credit.customer_details.goods_delivery_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EntityCreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
};

export function EntityCreditCustomerDetailsLastName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntityCreditCustomerDetailsLastNameValidation}>
      <Field.Input
        name="entity.credit.customer_details.last_name"
        label="Last Name"
        placeholder="last name"
        validation={EntityCreditCustomerDetailsLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsMaidenNameValidation = {};

export function EntityCreditCustomerDetailsMaidenName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsMaidenNameValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.maiden_name"
        label="Maiden Name"
        placeholder="maiden name"
        validation={EntityCreditCustomerDetailsMaidenNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsMaritalStatusValidation = {
  required: { value: true, message: "Marital Status is required." },
};

export function EntityCreditCustomerDetailsMaritalStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsMaritalStatusValidation}
    >
      <Field.Select
        name="entity.credit.customer_details.marital_status"
        label="Marital Status"
        placeholder="marital status"
        options={[
          { name: "Widowed", value: "widowed" },
          { name: "Other", value: "other" },
          { name: "Married", value: "married" },
          { name: "Divorced", value: "divorced" },
          { name: "Cohabiting", value: "cohabiting" },
          { name: "To Be Married", value: "to_be_married" },
          { name: "Separated", value: "separated" },
          { name: "Single", value: "single" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsMiddleNameValidation = {};

export function EntityCreditCustomerDetailsMiddleName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsMiddleNameValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.middle_name"
        label="Middle Name"
        placeholder="middle name"
        validation={EntityCreditCustomerDetailsMiddleNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsMobileValidation = {};

export function EntityCreditCustomerDetailsMobile(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditCustomerDetailsMobileValidation}>
      <Field.Input
        name="entity.credit.customer_details.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={EntityCreditCustomerDetailsMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsMonthlyRentAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityCreditCustomerDetailsMonthlyRentAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsMonthlyRentAmountAmountValidation}
    >
      <Field.NumberFormatInput
        name="entity.credit.customer_details.monthly_rent_amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          EntityCreditCustomerDetailsMonthlyRentAmountAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsMonthlyRentAmountCurrencyValidation =
  {};

export function EntityCreditCustomerDetailsMonthlyRentAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsMonthlyRentAmountCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="entity.credit.customer_details.monthly_rent_amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsNumberOfDependantsValidation = {
  required: { value: true, message: "Number Of Dependants is required." },
  min: { value: 0, message: "Number Of Dependants must be great than 0" },
  max: {
    value: 2147483647,
    message: "Number Of Dependants must be smaller than 2.147483647e+09",
  },
};

export function EntityCreditCustomerDetailsNumberOfDependants(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsNumberOfDependantsValidation}
    >
      <Field.NumberFormatInput
        name="entity.credit.customer_details.number_of_dependants"
        label="Number Of Dependants"
        placeholder="number of dependants"
        validation={EntityCreditCustomerDetailsNumberOfDependantsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsPreviousAddressOneBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressOneBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsPreviousAddressOneBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressOneBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressOneCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressOneCityValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCreditCustomerDetailsPreviousAddressOneCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressOneCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressOneCountryValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.country"
        label="Country"
        placeholder="country"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressOneCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressOneCountyValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressOneLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressOneLine1Validation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressOneLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressOneLine2Validation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_one.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.customer_details.previous_address_one.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressOnePostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCreditCustomerDetailsPreviousAddressOnePostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressOnePostcodeValidation
      }
    >
      <Field.Postcode
        name="entity.credit.customer_details.previous_address_one.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EntityCreditCustomerDetailsPreviousAddressOnePostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsPreviousAddressTwoBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressTwoBuildingNameValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditCustomerDetailsPreviousAddressTwoBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressTwoCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressTwoCityValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.city"
        label="City / Town"
        placeholder="city / town"
        validation={EntityCreditCustomerDetailsPreviousAddressTwoCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressTwoCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressTwoCountryValidation
      }
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.country"
        label="Country"
        placeholder="country"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressTwoCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressTwoCountyValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressTwoLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressTwoLine1Validation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EntityCreditCustomerDetailsPreviousAddressTwoLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsPreviousAddressTwoLine2Validation}
    >
      <Field.Input
        name="entity.credit.customer_details.previous_address_two.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.customer_details.previous_address_two.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsPreviousAddressTwoPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EntityCreditCustomerDetailsPreviousAddressTwoPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditCustomerDetailsPreviousAddressTwoPostcodeValidation
      }
    >
      <Field.Postcode
        name="entity.credit.customer_details.previous_address_two.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EntityCreditCustomerDetailsPreviousAddressTwoPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsResidentialStatusValidation = {
  required: { value: true, message: "Residential Status is required." },
};

export function EntityCreditCustomerDetailsResidentialStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsResidentialStatusValidation}
    >
      <Field.Select
        name="entity.credit.customer_details.residential_status"
        label="Residential Status"
        placeholder="residential status"
        options={[
          { name: "Tenant", value: "tenant" },
          { name: "Council Tenant", value: "council tenant" },
          { name: "Living With Parents", value: "living with parents" },
          { name: "Owner", value: "owner" },
          { name: "Owner Without Mortgage", value: "owner without mortgage" },
          { name: "Lodger", value: "lodger" },
          { name: "Armed Forces", value: "armed forces" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsTelephoneValidation = {};

export function EntityCreditCustomerDetailsTelephone(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EntityCreditCustomerDetailsTelephoneValidation}
    >
      <Field.Input
        name="entity.credit.customer_details.telephone"
        label="Telephone"
        placeholder="telephone"
        validation={EntityCreditCustomerDetailsTelephoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditCustomerDetailsTitleValidation = {
  required: { value: true, message: "Title is required." },
};

export function EntityCreditCustomerDetailsTitle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityCreditCustomerDetailsTitleValidation}>
      <Field.Select
        name="entity.credit.customer_details.title"
        label="Title"
        placeholder="title"
        options={[
          { name: "Mrs", value: "mrs" },
          { name: "Mr", value: "mr" },
          { name: "Miss", value: "miss" },
          { name: "Ms", value: "ms" },
          { name: "Dr", value: "dr" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityCreditDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntityCreditDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="entity.credit.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityCreditDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditDepositValueCurrencyValidation = {};

export function EntityCreditDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCreditDepositValueCurrencyValidation}>
      <Field.RadioSelect
        name="entity.credit.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsEmployedDetailsEmployerNameValidation =
  {
    required: { value: true, message: "Employer Name is required." },
    minLength: {
      value: 1,
      message: "Employer Name requires minimum length of 1",
    },
  };

export function EntityCreditEmploymentDetailsEmployedDetailsEmployerName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsEmployedDetailsEmployerNameValidation
      }
    >
      <Field.Input
        name="entity.credit.employment_details.employed_details.employer_name"
        label="Employer Name"
        placeholder="employer name"
        validation={
          EntityCreditEmploymentDetailsEmployedDetailsEmployerNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsEmployedDetailsMainOccupationValidation =
  {
    required: { value: true, message: "Main Occupation is required." },
    minLength: {
      value: 1,
      message: "Main Occupation requires minimum length of 1",
    },
  };

export function EntityCreditEmploymentDetailsEmployedDetailsMainOccupation(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsEmployedDetailsMainOccupationValidation
      }
    >
      <Field.Input
        name="entity.credit.employment_details.employed_details.main_occupation"
        label="Main Occupation"
        placeholder="main occupation"
        validation={
          EntityCreditEmploymentDetailsEmployedDetailsMainOccupationValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation =
  {
    required: { value: true, message: "Months Employed is required." },
    min: { value: 1, message: "Months Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Employed must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditEmploymentDetailsEmployedDetailsMonthsEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.employment_details.employed_details.months_employed"
        label="Months Employed"
        placeholder="months employed"
        validation={
          EntityCreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsEmploymentStatusValidation = {
  required: { value: true, message: "Employment Status is required." },
};

export function EntityCreditEmploymentDetailsEmploymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EntityCreditEmploymentDetailsEmploymentStatusValidation}
    >
      <Field.Select
        name="entity.credit.employment_details.employment_status"
        label="Employment Status"
        placeholder="employment status"
        options={[
          { name: "Employed", value: "employed" },
          { name: "Self Employed", value: "self_employed" },
          { name: "Not Employed", value: "not_employed" },
          { name: "Retired", value: "retired" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsGrossAnnualIncomeAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityCreditEmploymentDetailsGrossAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsGrossAnnualIncomeAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.employment_details.gross_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          EntityCreditEmploymentDetailsGrossAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsGrossAnnualIncomeCurrencyValidation =
  {};

export function EntityCreditEmploymentDetailsGrossAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsGrossAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="entity.credit.employment_details.gross_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditEmploymentDetailsHouseholdAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.employment_details.household_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          EntityCreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation =
  {};

export function EntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="entity.credit.employment_details.household_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function EntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncome(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation
      }
    >
      <Field.Select
        name="entity.credit.employment_details.not_employed_details.source_of_income"
        label="Source Of Income"
        placeholder="source of income"
        options={[
          { name: "Partner", value: "partner" },
          { name: "Benefits", value: "benefits" },
          { name: "Maintenance", value: "maintenance" },
          { name: "Disabled", value: "disabled" },
          { name: "Full-Time Carer", value: "full-time carer" },
          { name: "Homemaker", value: "homemaker" },
          { name: "Permanent Dla", value: "permanent dla" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function EntityCreditEmploymentDetailsSelfEmployedDetailsBusinessName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
      }
    >
      <Field.Input
        name="entity.credit.employment_details.self_employed_details.business_name"
        label="Business Name"
        placeholder="business name"
        validation={
          EntityCreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="entity.credit.employment_details.self_employed_details.months_self_employed"
        label="Months Self Employed"
        placeholder="months self employed"
        validation={
          EntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function EntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusiness(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
      }
    >
      <Field.Input
        name="entity.credit.employment_details.self_employed_details.type_of_business"
        label="Type Of Business"
        placeholder="type of business"
        validation={
          EntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditExtraApplicantsBankAccountAccountNameArrayInputValidation =
  {
    required: { value: true, message: "Account Name is required." },
    minLength: {
      value: 1,
      message: "Account Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsBankAccountAccountNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="account_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsBankAccountAccountNameArrayInputValidation
        }
      >
        <Field.Input
          label="Account Name"
          placeholder="Account Name"
          label="Account Name"
          placeholder="account name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsBankAccountAccountNumberArrayInputValidation =
  {
    required: { value: true, message: "Account Number is required." },
    minLength: {
      value: 1,
      message: "Account Number requires minimum length of 1",
    },
    pattern: {
      value: /^[0-9]{7,8}$/,
      message: "Account Number input is invalid",
    },
  };

export function EntityCreditExtraApplicantsBankAccountAccountNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="account_number">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsBankAccountAccountNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Account Number"
          placeholder="Account Number"
          label="Account Number"
          placeholder="account number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsBankAccountMonthsHeldArrayInputValidation =
  {
    min: { value: 0, message: "Months Held must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months Held must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsBankAccountMonthsHeldArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_held">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsBankAccountMonthsHeldArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Held"
          placeholder="Months Held"
          label="Months Held For Bank Account"
          placeholder="months held for bank account"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsBankAccountSortCodeArrayInputValidation =
  {
    required: { value: true, message: "Sort Code is required." },
    pattern: {
      value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
      message: "Sort Code input is invalid",
    },
  };

export function EntityCreditExtraApplicantsBankAccountSortCodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="sort_code">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsBankAccountSortCodeArrayInputValidation
        }
      >
        <Field.Input
          label="Sort Code"
          placeholder="Sort Code"
          label="Sort Code"
          placeholder="sort code"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsDateOfBirthArrayInputValidation =
  { required: { value: true, message: "Date Of Birth is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsDateOfBirthArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsDateOfBirthArrayInputValidation
        }
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsEmailArrayInputValidation =
  { required: { value: true, message: "Email is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsEmailArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsEmailArrayInputValidation
        }
      >
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsFirstNameArrayInputValidation =
  { required: { value: true, message: "First Name is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsFirstNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsFirstNameArrayInputValidation
        }
      >
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGenderArraySelectValidation =
  { required: { value: true, message: "Gender is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsGenderArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="gender">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGenderArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Gender"
          placeholder="Gender"
          label="Gender"
          placeholder="gender"
          options={[
            { name: "Male", value: "male" },
            { name: "Female", value: "female" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsLastNameArrayInputValidation =
  { required: { value: true, message: "Last Name is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsLastNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsLastNameArrayInputValidation
        }
      >
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsMaidenNameArrayInputValidation =
  {};

export function EntityCreditExtraApplicantsCustomerDetailsMaidenNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="maiden_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsMaidenNameArrayInputValidation
        }
      >
        <Field.Input
          label="Maiden Name"
          placeholder="Maiden Name"
          label="Maiden Name"
          placeholder="maiden name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsMaritalStatusArraySelectValidation =
  { required: { value: true, message: "Marital Status is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsMaritalStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="marital_status">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsMaritalStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Marital Status"
          placeholder="Marital Status"
          label="Marital Status"
          placeholder="marital status"
          options={[
            { name: "Widowed", value: "widowed" },
            { name: "Other", value: "other" },
            { name: "Married", value: "married" },
            { name: "Divorced", value: "divorced" },
            { name: "Cohabiting", value: "cohabiting" },
            { name: "To Be Married", value: "to_be_married" },
            { name: "Separated", value: "separated" },
            { name: "Single", value: "single" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsMiddleNameArrayInputValidation =
  {};

export function EntityCreditExtraApplicantsCustomerDetailsMiddleNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="middle_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsMiddleNameArrayInputValidation
        }
      >
        <Field.Input
          label="Middle Name"
          placeholder="Middle Name"
          label="Middle Name"
          placeholder="middle name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsMobileArrayInputValidation =
  {};

export function EntityCreditExtraApplicantsCustomerDetailsMobileArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsMobileArrayInputValidation
        }
      >
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArraySelectValidation =
  {};

export function EntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInputValidation =
  {
    required: { value: true, message: "Number Of Dependants is required." },
    min: { value: 0, message: "Number Of Dependants must be great than 0" },
    max: {
      value: 2147483647,
      message: "Number Of Dependants must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="number_of_dependants">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Number Of Dependants"
          placeholder="Number Of Dependants"
          label="Number Of Dependants"
          placeholder="number of dependants"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsResidentialStatusArraySelectValidation =
  { required: { value: true, message: "Residential Status is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsResidentialStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="residential_status">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsResidentialStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Residential Status"
          placeholder="Residential Status"
          label="Residential Status"
          placeholder="residential status"
          options={[
            { name: "Tenant", value: "tenant" },
            { name: "Council Tenant", value: "council tenant" },
            { name: "Living With Parents", value: "living with parents" },
            { name: "Owner", value: "owner" },
            { name: "Owner Without Mortgage", value: "owner without mortgage" },
            { name: "Lodger", value: "lodger" },
            { name: "Armed Forces", value: "armed forces" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsTelephoneArrayInputValidation =
  {};

export function EntityCreditExtraApplicantsCustomerDetailsTelephoneArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="telephone">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsTelephoneArrayInputValidation
        }
      >
        <Field.Input
          label="Telephone"
          placeholder="Telephone"
          label="Telephone"
          placeholder="telephone"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsCustomerDetailsTitleArraySelectValidation =
  { required: { value: true, message: "Title is required." } };

export function EntityCreditExtraApplicantsCustomerDetailsTitleArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="title">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsCustomerDetailsTitleArrayInputValidation
        }
      >
        <Field.Select
          label="Title"
          placeholder="Title"
          label="Title"
          placeholder="title"
          options={[
            { name: "Mrs", value: "mrs" },
            { name: "Mr", value: "mr" },
            { name: "Miss", value: "miss" },
            { name: "Ms", value: "ms" },
            { name: "Dr", value: "dr" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInputValidation =
  {
    required: { value: true, message: "Employer Name is required." },
    minLength: {
      value: 1,
      message: "Employer Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="employer_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInputValidation
        }
      >
        <Field.Input
          label="Employer Name"
          placeholder="Employer Name"
          label="Employer Name"
          placeholder="employer name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInputValidation =
  {
    required: { value: true, message: "Main Occupation is required." },
    minLength: {
      value: 1,
      message: "Main Occupation requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="main_occupation">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInputValidation
        }
      >
        <Field.Input
          label="Main Occupation"
          placeholder="Main Occupation"
          label="Main Occupation"
          placeholder="main occupation"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInputValidation =
  {
    required: { value: true, message: "Months Employed is required." },
    min: { value: 1, message: "Months Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Employed must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_employed">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Employed"
          placeholder="Months Employed"
          label="Months Employed"
          placeholder="months employed"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsEmploymentStatusArraySelectValidation =
  { required: { value: true, message: "Employment Status is required." } };

export function EntityCreditExtraApplicantsEmploymentDetailsEmploymentStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="employment_status">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsEmploymentStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Employment Status"
          placeholder="Employment Status"
          label="Employment Status"
          placeholder="employment status"
          options={[
            { name: "Employed", value: "employed" },
            { name: "Self Employed", value: "self_employed" },
            { name: "Not Employed", value: "not_employed" },
            { name: "Retired", value: "retired" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArraySelectValidation =
  {};

export function EntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArraySelectValidation =
  {};

export function EntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArraySelectValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function EntityCreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="source_of_income">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArrayInputValidation
        }
      >
        <Field.Select
          label="Source Of Income"
          placeholder="Source Of Income"
          label="Source Of Income"
          placeholder="source of income"
          options={[
            { name: "Partner", value: "partner" },
            { name: "Benefits", value: "benefits" },
            { name: "Maintenance", value: "maintenance" },
            { name: "Disabled", value: "disabled" },
            { name: "Full-Time Carer", value: "full-time carer" },
            { name: "Homemaker", value: "homemaker" },
            { name: "Permanent Dla", value: "permanent dla" },
            { name: "Other", value: "other" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInputValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="business_name">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInputValidation
        }
      >
        <Field.Input
          label="Business Name"
          placeholder="Business Name"
          label="Business Name"
          placeholder="business name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInputValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_self_employed">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Self Employed"
          placeholder="Months Self Employed"
          label="Months Self Employed"
          placeholder="months self employed"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInputValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="type_of_business">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInputValidation
        }
      >
        <Field.Input
          label="Type Of Business"
          placeholder="Type Of Business"
          label="Type Of Business"
          placeholder="type of business"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArraySelectValidation =
  {};

export function EntityCreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="bankrupcy_or_iva_in_last_5_years">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Bankrupcy Or Iva In Last 5 Years"
          placeholder="Bankrupcy Or Iva In Last 5 Years"
          label="Any Bankrupcy Or IVA In The Last 5 Years?"
          placeholder="any bankrupcy or IVA in the last 5 years?"
          options={[
            { name: "Yes", value: "yes" },
            { name: "No", value: "no" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function EntityCreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function EntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditExtraApplicantsFinanceDetailsExpendituresValidation =
  {};

export function EntityCreditExtraApplicantsFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.credit.extra_applicants.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCreditExtraApplicantsValidation = {};

export function EntityCreditExtraApplicantsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.credit.extra_applicants"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCreditFinanceDetailsBankrupcyOrIvaInLast5YearsValidation =
  {};

export function EntityCreditFinanceDetailsBankrupcyOrIvaInLast5Years(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EntityCreditFinanceDetailsBankrupcyOrIvaInLast5YearsValidation
      }
    >
      <Field.RadioSelect
        name="entity.credit.finance_details.bankrupcy_or_iva_in_last_5_years"
        label="Any Bankrupcy Or IVA In The Last 5 Years?"
        placeholder="any bankrupcy or IVA in the last 5 years?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function EntityCreditFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          EntityCreditFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EntityCreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EntityCreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function EntityCreditFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EntityCreditFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EntityCreditFinanceDetailsExpendituresValidation = {};

export function EntityCreditFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="entity.credit.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EntityCreditFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
  disabled: {
    value: true,
    message: "Finance Option input is read only or disabled",
  },
};

export function EntityCreditFinanceOption(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditFinanceOptionValidation}>
      <Field.Input
        name="entity.credit.finance_option"
        label="Finance Option For This Credit"
        placeholder="finance option"
        validation={EntityCreditFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityCreditId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditIdValidation}>
      <Field.Input
        name="entity.credit.id"
        label="Payment Id"
        placeholder="payment id"
        validation={EntityCreditIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditKidValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function EntityCreditKid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditKidValidation}>
      <Field.Input
        name="entity.credit.kid"
        label="Internal Kind Id"
        placeholder="internal kind id"
        validation={EntityCreditKidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditKindValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function EntityCreditKind(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCreditKindValidation}>
      <Field.RadioSelect
        name="entity.credit.kind"
        label="Internal Kind"
        placeholder="internal kind"
        options={[
          { name: "Job", value: "job" },
          { name: "Charge", value: "charge" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityCreditMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditMetadataCreatedAtValidation}>
      <Field.Input
        name="entity.credit.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityCreditMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityCreditMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EntityCreditMetadataLivenessValidation}>
      <Field.BooleanInput
        name="entity.credit.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityCreditMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityCreditMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditMetadataUpdatedAtValidation}>
      <Field.Input
        name="entity.credit.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityCreditMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityCreditOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditOidValidation}>
      <Field.Input
        name="entity.credit.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityCreditOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditProviderValidation = {
  disabled: { value: true, message: "Provider input is read only or disabled" },
};

export function EntityCreditProvider(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCreditProviderValidation}>
      <Field.RadioSelect
        name="entity.credit.provider"
        label="Provider Name"
        placeholder="provider name"
        options={[
          { name: "Omni", value: "omni" },
          { name: "Propensio", value: "propensio" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function EntityCreditSignatureFingerprint(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditSignatureFingerprintValidation}>
      <Field.Input
        name="entity.credit.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={EntityCreditSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function EntityCreditSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityCreditSignatureSignedValidation}>
      <Field.RadioSelect
        name="entity.credit.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditStateValidation = {
  disabled: { value: true, message: "State input is read only or disabled" },
};

export function EntityCreditState(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityCreditStateValidation}>
      <Field.Select
        name="entity.credit.state"
        label="Credit State"
        placeholder="credit state"
        options={[
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Referred", value: "referred" },
          { name: "Action Lender", value: "action_lender" },
          { name: "Action Customer", value: "action_customer" },
          { name: "Pending", value: "pending" },
          { name: "Finished", value: "finished" },
          { name: "Paid Out", value: "paid_out" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EntityCreditXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditXidValidation}>
      <Field.Input
        name="entity.credit.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={EntityCreditXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityCreditXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EntityCreditXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityCreditXrefValidation}>
      <Field.Input
        name="entity.credit.xref"
        label="External Reference"
        placeholder="external reference"
        validation={EntityCreditXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityDocumentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentAidValidation}>
      <Field.Input
        name="entity.document.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityDocumentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentCidValidation}>
      <Field.Input
        name="entity.document.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EntityDocumentContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={EntityDocumentContentValidation}>
      <Field.File
        name="entity.document.content"
        label="Document Content"
        placeholder="document content"
        validation={EntityDocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityDocumentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentIdValidation}>
      <Field.Input
        name="entity.document.id"
        label="Document Id"
        placeholder="document id"
        validation={EntityDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityDocumentMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentMetadataCreatedAtValidation}>
      <Field.Input
        name="entity.document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityDocumentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EntityDocumentMetadataLivenessValidation}>
      <Field.BooleanInput
        name="entity.document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityDocumentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityDocumentMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentMetadataUpdatedAtValidation}>
      <Field.Input
        name="entity.document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityDocumentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EntityDocumentMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentMimetypeValidation}>
      <Field.Input
        name="entity.document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EntityDocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EntityDocumentName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentNameValidation}>
      <Field.Input
        name="entity.document.name"
        label="Document Name"
        placeholder="document name"
        validation={EntityDocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityDocumentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityDocumentOidValidation}>
      <Field.Input
        name="entity.document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntityPaymentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentAidValidation}>
      <Field.Input
        name="entity.payment.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntityPaymentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntityPaymentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentCidValidation}>
      <Field.Input
        name="entity.payment.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntityPaymentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntityPaymentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentIdValidation}>
      <Field.Input
        name="entity.payment.id"
        label="Payment Id"
        placeholder="payment id"
        validation={EntityPaymentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentKidValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function EntityPaymentKid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentKidValidation}>
      <Field.Input
        name="entity.payment.kid"
        label="Internal Kind Id"
        placeholder="internal kind id"
        validation={EntityPaymentKidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentKindValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function EntityPaymentKind(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntityPaymentKindValidation}>
      <Field.RadioSelect
        name="entity.payment.kind"
        label="Internal Kind"
        placeholder="internal kind"
        options={[
          { name: "Job", value: "job" },
          { name: "Charge", value: "charge" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntityPaymentMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentMetadataCreatedAtValidation}>
      <Field.Input
        name="entity.payment.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntityPaymentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntityPaymentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EntityPaymentMetadataLivenessValidation}>
      <Field.BooleanInput
        name="entity.payment.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntityPaymentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntityPaymentMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentMetadataUpdatedAtValidation}>
      <Field.Input
        name="entity.payment.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntityPaymentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntityPaymentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentOidValidation}>
      <Field.Input
        name="entity.payment.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntityPaymentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentPaymentOptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntityPaymentPaymentOptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EntityPaymentPaymentOptionAmountAmountValidation}
    >
      <Field.NumberFormatInput
        name="entity.payment.payment_option.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntityPaymentPaymentOptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentPaymentOptionAmountCurrencyValidation = {};

export function EntityPaymentPaymentOptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EntityPaymentPaymentOptionAmountCurrencyValidation}
    >
      <Field.RadioSelect
        name="entity.payment.payment_option.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentPaymentOptionPaymentMethodValidation = {
  required: { value: true, message: "Payment Method is required." },
};

export function EntityPaymentPaymentOptionPaymentMethod(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EntityPaymentPaymentOptionPaymentMethodValidation}
    >
      <Field.RadioSelect
        name="entity.payment.payment_option.payment_method"
        label="Payment Method"
        placeholder="payment method"
        options={[
          { name: "Cash", value: "cash" },
          { name: "Card", value: "card" },
          { name: "Loan", value: "loan" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentStatusValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function EntityPaymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EntityPaymentStatusValidation}>
      <Field.Select
        name="entity.payment.status"
        label="Payment Status"
        placeholder="payment status"
        options={[
          { name: "Unpaid", value: "unpaid" },
          { name: "Pending", value: "pending" },
          { name: "Paid", value: "paid" },
          { name: "Disputed", value: "disputed" },
          { name: "Cancelled", value: "cancelled" },
          { name: "Refunded", value: "refunded" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EntityPaymentXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentXidValidation}>
      <Field.Input
        name="entity.payment.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={EntityPaymentXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntityPaymentXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EntityPaymentXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntityPaymentXrefValidation}>
      <Field.Input
        name="entity.payment.xref"
        label="External Reference"
        placeholder="external reference"
        validation={EntityPaymentXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EntitySubscriptionAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionAidValidation}>
      <Field.Input
        name="entity.subscription.aid"
        label="Author Id"
        placeholder="author id"
        validation={EntitySubscriptionAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EntitySubscriptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntitySubscriptionAmountAmountValidation}>
      <Field.NumberFormatInput
        name="entity.subscription.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EntitySubscriptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionAmountCurrencyValidation = {};

export function EntitySubscriptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntitySubscriptionAmountCurrencyValidation}>
      <Field.RadioSelect
        name="entity.subscription.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionAuthorisationUrlValidation = {
  disabled: {
    value: true,
    message: "Authorisation Url input is read only or disabled",
  },
};

export function EntitySubscriptionAuthorisationUrl(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionAuthorisationUrlValidation}>
      <Field.Input
        name="entity.subscription.authorisation_url"
        label="Authorisation Url To Submit A Mandate Agreement"
        placeholder="authorisation url to submit a mandate agreement"
        validation={EntitySubscriptionAuthorisationUrlValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionBillingStatusValidation = {
  disabled: {
    value: true,
    message: "Billing Status input is read only or disabled",
  },
};

export function EntitySubscriptionBillingStatus(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionBillingStatusValidation}>
      <Field.Input
        name="entity.subscription.billing_status"
        label="Billing Status"
        placeholder="billing status"
        validation={EntitySubscriptionBillingStatusValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionBillingValidation = {
  disabled: { value: true, message: "Billing input is read only or disabled" },
};

export function EntitySubscriptionBilling(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionBillingValidation}>
      <Field.Input
        name="entity.subscription.billing"
        label="Billing Reference"
        placeholder="billing reference"
        validation={EntitySubscriptionBillingValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EntitySubscriptionCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionCidValidation}>
      <Field.Input
        name="entity.subscription.cid"
        label="Company Id"
        placeholder="company id"
        validation={EntitySubscriptionCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionDayOfMonthValidation = {
  min: { value: -1, message: "Day Of Month must be great than -1" },
  max: { value: 28, message: "Day Of Month must be smaller than 28" },
};

export function EntitySubscriptionDayOfMonth(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EntitySubscriptionDayOfMonthValidation}>
      <Field.NumberFormatInput
        name="entity.subscription.day_of_month"
        label="Day Of Month For Collection"
        placeholder="day of month for collection"
        validation={EntitySubscriptionDayOfMonthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EntitySubscriptionId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionIdValidation}>
      <Field.Input
        name="entity.subscription.id"
        label="Subscription Id"
        placeholder="subscription id"
        validation={EntitySubscriptionIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionIntervalValidation = {};

export function EntitySubscriptionInterval(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EntitySubscriptionIntervalValidation}>
      <Field.RadioSelect
        name="entity.subscription.interval"
        label="Subscription Interval"
        placeholder="subscription interval"
        options={[
          { name: "Monthly", value: "monthly" },
          { name: "Yearly", value: "yearly" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionMandateStatusValidation = {
  disabled: {
    value: true,
    message: "Mandate Status input is read only or disabled",
  },
};

export function EntitySubscriptionMandateStatus(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionMandateStatusValidation}>
      <Field.Input
        name="entity.subscription.mandate_status"
        label="Mandate Status"
        placeholder="mandate status"
        validation={EntitySubscriptionMandateStatusValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionMandateValidation = {
  disabled: { value: true, message: "Mandate input is read only or disabled" },
};

export function EntitySubscriptionMandate(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionMandateValidation}>
      <Field.Input
        name="entity.subscription.mandate"
        label="Mandate Reference"
        placeholder="mandate reference"
        validation={EntitySubscriptionMandateValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EntitySubscriptionMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntitySubscriptionMetadataCreatedAtValidation}>
      <Field.Input
        name="entity.subscription.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EntitySubscriptionMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EntitySubscriptionMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EntitySubscriptionMetadataLivenessValidation}>
      <Field.BooleanInput
        name="entity.subscription.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EntitySubscriptionMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EntitySubscriptionMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EntitySubscriptionMetadataUpdatedAtValidation}>
      <Field.Input
        name="entity.subscription.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EntitySubscriptionMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EntitySubscriptionOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionOidValidation}>
      <Field.Input
        name="entity.subscription.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EntitySubscriptionOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EntitySubscriptionXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionXidValidation}>
      <Field.Input
        name="entity.subscription.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={EntitySubscriptionXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EntitySubscriptionXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EntitySubscriptionXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EntitySubscriptionXrefValidation}>
      <Field.Input
        name="entity.subscription.xref"
        label="External Reference"
        placeholder="external reference"
        validation={EntitySubscriptionXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function EntityForm(props: any) {
  return (
    <>
      <EntityJobAid {...props} />
      <EntityJobArchived {...props} />
      <EntityJobCid {...props} />
      <EntityJobCustomerAddressBuildingName {...props} />
      <EntityJobCustomerAddressBuildingNumber {...props} />
      <EntityJobCustomerAddressCity {...props} />
      <EntityJobCustomerAddressCountry {...props} />
      <EntityJobCustomerAddressCounty {...props} />
      <EntityJobCustomerAddressLine1 {...props} />
      <EntityJobCustomerAddressLine2 {...props} />
      <EntityJobCustomerAddressMonthsAtAddress {...props} />
      <EntityJobCustomerAddressPostcode {...props} />
      <EntityJobCustomerEmail {...props} />
      <EntityJobCustomerFirstName {...props} />
      <EntityJobCustomerLastName {...props} />
      <EntityJobCustomerPhone {...props} />
      <EntityJobCustomerOptionsCheckoutOption {...props} />
      <EntityJobCustomerOptionsDepositValueAmount {...props} />
      <EntityJobCustomerOptionsDepositValueCurrency {...props} />
      <EntityJobCustomerOptionsFinanceOption {...props} />
      <EntityJobDepositType {...props} />
      <EntityJobDepositValueAmount {...props} />
      <EntityJobDepositValueCurrency {...props} />
      <EntityJobDescription {...props} />
      <EntityJobFinanceStatus {...props} />
      <EntityJobId {...props} />
      <EntityJobJobType {...props} />
      <EntityJobMetadataCreatedAt {...props} />
      <EntityJobMetadataLiveness {...props} />
      <EntityJobMetadataUpdatedAt {...props} />
      <EntityJobOid {...props} />
      <EntityJobSatNoteCertificateAid {...props} />
      <EntityJobSatNoteCertificateCid {...props} />
      <EntityJobSatNoteCertificateContent {...props} />
      <EntityJobSatNoteCertificateId {...props} />
      <EntityJobSatNoteCertificateMetadataCreatedAt {...props} />
      <EntityJobSatNoteCertificateMetadataLiveness {...props} />
      <EntityJobSatNoteCertificateMetadataUpdatedAt {...props} />
      <EntityJobSatNoteCertificateMimetype {...props} />
      <EntityJobSatNoteCertificateName {...props} />
      <EntityJobSatNoteCertificateOid {...props} />
      <EntityJobSatNoteQAdvice {...props} />
      <EntityJobSatNoteQApplication {...props} />
      <EntityJobSatNoteQAvailability {...props} />
      <EntityJobSatNoteQEasiness {...props} />
      <EntityJobSatNoteQPressure {...props} />
      <EntityJobSatNoteQSaving {...props} />
      <EntityJobSatNoteSignatureFingerprint {...props} />
      <EntityJobSatNoteSignatureSigned {...props} />
      <EntityJobSatNoteTimelineSentAt {...props} />
      <EntityJobSatNoteTimelineSignedAt {...props} />
      <EntityJobSatNoteTimelineViewedAt {...props} />
      <EntityJobStatus {...props} />
      <EntityJobTitle {...props} />
      <EntityJobTotalAmountVatAmount {...props} />
      <EntityJobTotalAmountVatCurrency {...props} />
      <EntityJobTotalAmountVatExclusiveAmount {...props} />
      <EntityJobTotalAmountVatExclusiveCurrency {...props} />
      <EntityJobTotalAmountVatInclusiveAmount {...props} />
      <EntityJobTotalAmountVatInclusiveCurrency {...props} />
      <EntityCompanyAid {...props} />
      <EntityCompanyBankAccountAccountName {...props} />
      <EntityCompanyBankAccountAccountNumber {...props} />
      <EntityCompanyBankAccountMonthsHeld {...props} />
      <EntityCompanyBankAccountSortCode {...props} />
      <EntityCompanyBilling {...props} />
      <EntityCompanyCid {...props} />
      <EntityCompanyCompanyInfoAverageJobValue {...props} />
      <EntityCompanyCompanyInfoAverageMonthlyJobs {...props} />
      <EntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditions
        {...props}
      />
      <EntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKanda
        {...props}
      />
      <EntityCompanyCompanyInfoContractAgreementContractAid {...props} />
      <EntityCompanyCompanyInfoContractAgreementContractCid {...props} />
      <EntityCompanyCompanyInfoContractAgreementContractContent {...props} />
      <EntityCompanyCompanyInfoContractAgreementContractId {...props} />
      <EntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAt
        {...props}
      />
      <EntityCompanyCompanyInfoContractAgreementContractMetadataLiveness
        {...props}
      />
      <EntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAt
        {...props}
      />
      <EntityCompanyCompanyInfoContractAgreementContractMimetype {...props} />
      <EntityCompanyCompanyInfoContractAgreementContractName {...props} />
      <EntityCompanyCompanyInfoContractAgreementContractOid {...props} />
      <EntityCompanyCompanyInfoContractAgreementPrintName {...props} />
      <EntityCompanyCompanyInfoContractAgreementSignedAt {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentAid {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentCid {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentContent {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentId {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAt {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentMetadataLiveness {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAt {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentMimetype {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentName {...props} />
      <EntityCompanyCompanyInfoInsuranceDocumentOid {...props} />
      <EntityCompanyCompanyInfoTradeBodyName {...props} />
      <EntityCompanyCompanyInfoTradeBodyNumber {...props} />
      <EntityCompanyCompanyInfoTradeBody {...props} />
      <EntityCompanyCompanyInfoTradeTypeName {...props} />
      <EntityCompanyCompanyInfoTradeType {...props} />
      <EntityCompanyCompanyInfoUseSubcontractor {...props} />
      <EntityCompanyCompanyInfoWarrantyLength {...props} />
      <EntityCompanyCompanyLogoAid {...props} />
      <EntityCompanyCompanyLogoCid {...props} />
      <EntityCompanyCompanyLogoContent {...props} />
      <EntityCompanyCompanyLogoId {...props} />
      <EntityCompanyCompanyLogoMetadataCreatedAt {...props} />
      <EntityCompanyCompanyLogoMetadataLiveness {...props} />
      <EntityCompanyCompanyLogoMetadataUpdatedAt {...props} />
      <EntityCompanyCompanyLogoMimetype {...props} />
      <EntityCompanyCompanyLogoName {...props} />
      <EntityCompanyCompanyLogoOid {...props} />
      <EntityCompanyCompanyType {...props} />
      <EntityCompanyContactInfoContactAddressBuildingName {...props} />
      <EntityCompanyContactInfoContactAddressBuildingNumber {...props} />
      <EntityCompanyContactInfoContactAddressCity {...props} />
      <EntityCompanyContactInfoContactAddressCountry {...props} />
      <EntityCompanyContactInfoContactAddressCounty {...props} />
      <EntityCompanyContactInfoContactAddressLine1 {...props} />
      <EntityCompanyContactInfoContactAddressLine2 {...props} />
      <EntityCompanyContactInfoContactAddressMonthsAtAddress {...props} />
      <EntityCompanyContactInfoContactAddressPostcode {...props} />
      <EntityCompanyContactInfoContactEmail {...props} />
      <EntityCompanyContactInfoContactName {...props} />
      <EntityCompanyContactInfoContactPhone {...props} />
      <EntityCompanyContactInfoTradingName {...props} />
      <EntityCompanyId {...props} />
      <EntityCompanyLifecycle {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressBuildingName {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumber {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressCity {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressCountry {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressCounty {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressLine1 {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressLine2 {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddress
        {...props}
      />
      <EntityCompanyLimitedCompanyInfoCompanyAddressPostcode {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyName {...props} />
      <EntityCompanyLimitedCompanyInfoCompanyNumber {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressBuildingName {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressBuildingNumber {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressCity {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressCountry {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressCounty {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressLine1 {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressLine2 {...props} />
      <EntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddress
        {...props}
      />
      <EntityCompanyLimitedCompanyInfoTradingAddressPostcode {...props} />
      <EntityCompanyLimitedCompanyInfoVatNumber {...props} />
      <EntityCompanyMetadataCreatedAt {...props} />
      <EntityCompanyMetadataLiveness {...props} />
      <EntityCompanyMetadataUpdatedAt {...props} />
      <EntityCompanyOid {...props} />
      <EntityCompanyQuotePreference {...props} />
      <EntityCompanyReferralCode {...props} />
      <EntityCompanySkipDeposit {...props} />
      <EntityCompanySolarCompanyInfoElectricalTradeAssociationNumber
        {...props}
      />
      <EntityCompanySolarCompanyInfoElectricalTradeAssociation {...props} />
      <EntityCompanySolarCompanyInfoEpvsRegistrationNumber {...props} />
      <EntityCompanySolarCompanyInfoSolarTradeAssociationNumber {...props} />
      <EntityCompanySolarCompanyInfoSolarTradeAssociation {...props} />
      <EntityCompanySoleTraderInfoNationalInsuranceNumber {...props} />
      <EntityCompanySoleTraderInfoTradingAddressBuildingName {...props} />
      <EntityCompanySoleTraderInfoTradingAddressBuildingNumber {...props} />
      <EntityCompanySoleTraderInfoTradingAddressCity {...props} />
      <EntityCompanySoleTraderInfoTradingAddressCountry {...props} />
      <EntityCompanySoleTraderInfoTradingAddressCounty {...props} />
      <EntityCompanySoleTraderInfoTradingAddressLine1 {...props} />
      <EntityCompanySoleTraderInfoTradingAddressLine2 {...props} />
      <EntityCompanySoleTraderInfoTradingAddressMonthsAtAddress {...props} />
      <EntityCompanySoleTraderInfoTradingAddressPostcode {...props} />
      <EntityCompanySoleTraderInfoTradingName {...props} />
      <EntityCreditAid {...props} />
      <EntityCreditAmountAmount {...props} />
      <EntityCreditAmountCurrency {...props} />
      <EntityCreditBankAccountAccountName {...props} />
      <EntityCreditBankAccountAccountNumber {...props} />
      <EntityCreditBankAccountMonthsHeld {...props} />
      <EntityCreditBankAccountSortCode {...props} />
      <EntityCreditCid {...props} />
      <EntityCreditCustomerDetailsCurrentAddressBuildingName {...props} />
      <EntityCreditCustomerDetailsCurrentAddressBuildingNumber {...props} />
      <EntityCreditCustomerDetailsCurrentAddressCity {...props} />
      <EntityCreditCustomerDetailsCurrentAddressCountry {...props} />
      <EntityCreditCustomerDetailsCurrentAddressCounty {...props} />
      <EntityCreditCustomerDetailsCurrentAddressLine1 {...props} />
      <EntityCreditCustomerDetailsCurrentAddressLine2 {...props} />
      <EntityCreditCustomerDetailsCurrentAddressMonthsAtAddress {...props} />
      <EntityCreditCustomerDetailsCurrentAddressPostcode {...props} />
      <EntityCreditCustomerDetailsDateOfBirth {...props} />
      <EntityCreditCustomerDetailsEmail {...props} />
      <EntityCreditCustomerDetailsFirstName {...props} />
      <EntityCreditCustomerDetailsGender {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingName {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumber
        {...props}
      />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressCity {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressCountry {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressCounty {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressLine1 {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressLine2 {...props} />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddress
        {...props}
      />
      <EntityCreditCustomerDetailsGoodsDeliveryAddressPostcode {...props} />
      <EntityCreditCustomerDetailsLastName {...props} />
      <EntityCreditCustomerDetailsMaidenName {...props} />
      <EntityCreditCustomerDetailsMaritalStatus {...props} />
      <EntityCreditCustomerDetailsMiddleName {...props} />
      <EntityCreditCustomerDetailsMobile {...props} />
      <EntityCreditCustomerDetailsMonthlyRentAmountAmount {...props} />
      <EntityCreditCustomerDetailsMonthlyRentAmountCurrency {...props} />
      <EntityCreditCustomerDetailsNumberOfDependants {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneBuildingName {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneBuildingNumber {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneCity {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneCountry {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneCounty {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneLine1 {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneLine2 {...props} />
      <EntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddress
        {...props}
      />
      <EntityCreditCustomerDetailsPreviousAddressOnePostcode {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoBuildingName {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoBuildingNumber {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoCity {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoCountry {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoCounty {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoLine1 {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoLine2 {...props} />
      <EntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddress
        {...props}
      />
      <EntityCreditCustomerDetailsPreviousAddressTwoPostcode {...props} />
      <EntityCreditCustomerDetailsResidentialStatus {...props} />
      <EntityCreditCustomerDetailsTelephone {...props} />
      <EntityCreditCustomerDetailsTitle {...props} />
      <EntityCreditDepositValueAmount {...props} />
      <EntityCreditDepositValueCurrency {...props} />
      <EntityCreditEmploymentDetailsEmployedDetailsEmployerName {...props} />
      <EntityCreditEmploymentDetailsEmployedDetailsMainOccupation {...props} />
      <EntityCreditEmploymentDetailsEmployedDetailsMonthsEmployed {...props} />
      <EntityCreditEmploymentDetailsEmploymentStatus {...props} />
      <EntityCreditEmploymentDetailsGrossAnnualIncomeAmount {...props} />
      <EntityCreditEmploymentDetailsGrossAnnualIncomeCurrency {...props} />
      <EntityCreditEmploymentDetailsHouseholdAnnualIncomeAmount {...props} />
      <EntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrency {...props} />
      <EntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncome
        {...props}
      />
      <EntityCreditEmploymentDetailsSelfEmployedDetailsBusinessName
        {...props}
      />
      <EntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed
        {...props}
      />
      <EntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusiness
        {...props}
      />
      <EntityCreditFinanceDetailsBankrupcyOrIvaInLast5Years {...props} />
      <EntityCreditFinanceOption {...props} />
      <EntityCreditId {...props} />
      <EntityCreditKid {...props} />
      <EntityCreditKind {...props} />
      <EntityCreditMetadataCreatedAt {...props} />
      <EntityCreditMetadataLiveness {...props} />
      <EntityCreditMetadataUpdatedAt {...props} />
      <EntityCreditOid {...props} />
      <EntityCreditProvider {...props} />
      <EntityCreditSignatureFingerprint {...props} />
      <EntityCreditSignatureSigned {...props} />
      <EntityCreditState {...props} />
      <EntityCreditXid {...props} />
      <EntityCreditXref {...props} />
      <EntityDocumentAid {...props} />
      <EntityDocumentCid {...props} />
      <EntityDocumentContent {...props} />
      <EntityDocumentId {...props} />
      <EntityDocumentMetadataCreatedAt {...props} />
      <EntityDocumentMetadataLiveness {...props} />
      <EntityDocumentMetadataUpdatedAt {...props} />
      <EntityDocumentMimetype {...props} />
      <EntityDocumentName {...props} />
      <EntityDocumentOid {...props} />
      <EntityPaymentAid {...props} />
      <EntityPaymentCid {...props} />
      <EntityPaymentId {...props} />
      <EntityPaymentKid {...props} />
      <EntityPaymentKind {...props} />
      <EntityPaymentMetadataCreatedAt {...props} />
      <EntityPaymentMetadataLiveness {...props} />
      <EntityPaymentMetadataUpdatedAt {...props} />
      <EntityPaymentOid {...props} />
      <EntityPaymentPaymentOptionAmountAmount {...props} />
      <EntityPaymentPaymentOptionAmountCurrency {...props} />
      <EntityPaymentPaymentOptionPaymentMethod {...props} />
      <EntityPaymentStatus {...props} />
      <EntityPaymentXid {...props} />
      <EntityPaymentXref {...props} />
      <EntitySubscriptionAid {...props} />
      <EntitySubscriptionAmountAmount {...props} />
      <EntitySubscriptionAmountCurrency {...props} />
      <EntitySubscriptionAuthorisationUrl {...props} />
      <EntitySubscriptionBillingStatus {...props} />
      <EntitySubscriptionBilling {...props} />
      <EntitySubscriptionCid {...props} />
      <EntitySubscriptionDayOfMonth {...props} />
      <EntitySubscriptionId {...props} />
      <EntitySubscriptionInterval {...props} />
      <EntitySubscriptionMandateStatus {...props} />
      <EntitySubscriptionMandate {...props} />
      <EntitySubscriptionMetadataCreatedAt {...props} />
      <EntitySubscriptionMetadataLiveness {...props} />
      <EntitySubscriptionMetadataUpdatedAt {...props} />
      <EntitySubscriptionOid {...props} />
      <EntitySubscriptionXid {...props} />
      <EntitySubscriptionXref {...props} />
    </>
  );
}

export const ErrorCodeValidation = {
  disabled: { value: true, message: "Code input is read only or disabled" },
};

export function ErrorCode(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={ErrorCodeValidation}>
      <Field.NumberFormatInput
        name="error.code"
        label="Code"
        placeholder="code"
        validation={ErrorCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ErrorMessageValidation = {
  required: { value: true, message: "Message is required." },
  disabled: { value: true, message: "Message input is read only or disabled" },
};

export function ErrorMessage(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ErrorMessageValidation}>
      <Field.Input
        name="error.message"
        label="Message"
        placeholder="message"
        validation={ErrorMessageValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function ErrorForm(props: any) {
  return (
    <>
      <ErrorCode {...props} />
      <ErrorMessage {...props} />
    </>
  );
}

export const ExpenditureExpenditureTypeValidation = {};

export function ExpenditureExpenditureType(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={ExpenditureExpenditureTypeValidation}>
      <Field.Select
        name="expenditure.expenditure_type"
        label="Expenditure Type"
        placeholder=""
        options={[
          { name: "Credit Card", value: "credit card" },
          { name: "Clothes", value: "clothes" },
          { name: "Council Tax And Bills", value: "council tax and bills" },
          { name: "Child Support Agency", value: "child support agency" },
          { name: "Healthcare", value: "healthcare" },
          { name: "Holidays", value: "holidays" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ExpenditureMonthlyAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function ExpenditureMonthlyAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={ExpenditureMonthlyAmountAmountValidation}>
      <Field.NumberFormatInput
        name="expenditure.monthly_amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={ExpenditureMonthlyAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ExpenditureMonthlyAmountCurrencyValidation = {};

export function ExpenditureMonthlyAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={ExpenditureMonthlyAmountCurrencyValidation}>
      <Field.RadioSelect
        name="expenditure.monthly_amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export function ExpenditureForm(props: any) {
  return (
    <>
      <ExpenditureExpenditureType {...props} />
      <ExpenditureMonthlyAmountAmount {...props} />
      <ExpenditureMonthlyAmountCurrency {...props} />
    </>
  );
}

export const InfoMeEmailValidation = {};

export function InfoMeEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoMeEmailValidation}>
      <Field.Input
        name="info_me.email"
        label="Email"
        placeholder="email"
        validation={InfoMeEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoMeNameValidation = {
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function InfoMeName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoMeNameValidation}>
      <Field.Input
        name="info_me.name"
        label="Name"
        placeholder="name"
        validation={InfoMeNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoMePhoneValidation = {
  minLength: { value: 1, message: "Phone requires minimum length of 1" },
};

export function InfoMePhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoMePhoneValidation}>
      <Field.Input
        name="info_me.phone"
        label="Phone"
        placeholder="phone"
        validation={InfoMePhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoMePhotoURLValidation = {};

export function InfoMePhotoURL(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoMePhotoURLValidation}>
      <Field.Input
        name="info_me.photo_url"
        label="Photo URL"
        placeholder="photo URL"
        validation={InfoMePhotoURLValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function InfoMeForm(props: any) {
  return (
    <>
      <InfoMeEmail {...props} />
      <InfoMeName {...props} />
      <InfoMePhone {...props} />
      <InfoMePhotoURL {...props} />
    </>
  );
}

export const FinanceStatusValidation = {
  disabled: { value: true, message: " input is read only or disabled" },
};

export function FinanceStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={FinanceStatusValidation}>
      <Field.Select
        name="finance_status."
        label="Finance Status"
        placeholder="finance status"
        options={[
          { name: "Not Applied", value: "not_applied" },
          { name: "Under Review", value: "under_review" },
          { name: "Applied For Finance", value: "applied_for_finance" },
          { name: "Finance Not Approved", value: "finance_not_approved" },
          { name: "Financed", value: "financed" },
          { name: "Sat Note Sent", value: "sat_note_sent" },
          { name: "Sat Note Viewed", value: "sat_note_viewed" },
          { name: "Sat Note Signed", value: "sat_note_signed" },
          { name: "Payout Pending", value: "payout_pending" },
          { name: "Paid", value: "paid" },
          { name: "Finance Cancelled", value: "finance_cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function FinanceStatusForm(props: any) {
  return (
    <>
      <FinanceStatus {...props} />
    </>
  );
}

export function PenceForm(props: any) {
  return <></>;
}

export const SatNoteTimelineSentAtValidation = {
  disabled: { value: true, message: "Sent At input is read only or disabled" },
};

export function SatNoteTimelineSentAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteTimelineSentAtValidation}>
      <Field.Input
        name="sat_note_timeline.sent_at"
        label="Timestamp Sat Note Is Sent"
        placeholder="timestamp sat note is sent"
        validation={SatNoteTimelineSentAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteTimelineSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function SatNoteTimelineSignedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteTimelineSignedAtValidation}>
      <Field.Input
        name="sat_note_timeline.signed_at"
        label="Timestamp Sat Note Is Signed"
        placeholder="timestamp sat note is signed"
        validation={SatNoteTimelineSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteTimelineViewedAtValidation = {
  disabled: {
    value: true,
    message: "Viewed At input is read only or disabled",
  },
};

export function SatNoteTimelineViewedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteTimelineViewedAtValidation}>
      <Field.Input
        name="sat_note_timeline.viewed_at"
        label="Timestamp Sat Note Is Viewed"
        placeholder="timestamp sat note is viewed"
        validation={SatNoteTimelineViewedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function SatNoteTimelineForm(props: any) {
  return (
    <>
      <SatNoteTimelineSentAt {...props} />
      <SatNoteTimelineSignedAt {...props} />
      <SatNoteTimelineViewedAt {...props} />
    </>
  );
}

export const SolarCompanyInfoElectricalTradeAssociationNumberValidation = {
  minLength: {
    value: 1,
    message: "Electrical Trade Association Number requires minimum length of 1",
  },
};

export function SolarCompanyInfoElectricalTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={SolarCompanyInfoElectricalTradeAssociationNumberValidation}
    >
      <Field.Input
        name="solar_company_info.electrical_trade_association_number"
        label="Electrical Trade Association Number"
        placeholder="electrical trade association number"
        validation={SolarCompanyInfoElectricalTradeAssociationNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SolarCompanyInfoElectricalTradeAssociationValidation = {
  required: {
    value: true,
    message: "Electrical Trade Association is required.",
  },
};

export function SolarCompanyInfoElectricalTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={SolarCompanyInfoElectricalTradeAssociationValidation}
    >
      <Field.Select
        name="solar_company_info.electrical_trade_association"
        label="Electrical Trade Association"
        placeholder="electrical trade association"
        options={[
          { name: "Niceic", value: "niceic" },
          { name: "Napit", value: "napit" },
          { name: "None", value: "none" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SolarCompanyInfoEpvsRegistrationNumberValidation = {
  required: { value: true, message: "Epvs Registration Number is required." },
  minLength: {
    value: 1,
    message: "Epvs Registration Number requires minimum length of 1",
  },
};

export function SolarCompanyInfoEpvsRegistrationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={SolarCompanyInfoEpvsRegistrationNumberValidation}
    >
      <Field.Input
        name="solar_company_info.epvs_registration_number"
        label="EPVS Registration Number"
        placeholder="EPVS registration number"
        validation={SolarCompanyInfoEpvsRegistrationNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SolarCompanyInfoSolarTradeAssociationNumberValidation = {
  required: {
    value: true,
    message: "Solar Trade Association Number is required.",
  },
  minLength: {
    value: 1,
    message: "Solar Trade Association Number requires minimum length of 1",
  },
};

export function SolarCompanyInfoSolarTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={SolarCompanyInfoSolarTradeAssociationNumberValidation}
    >
      <Field.Input
        name="solar_company_info.solar_trade_association_number"
        label="Solar Trade Association Number"
        placeholder="solar trade association number"
        validation={SolarCompanyInfoSolarTradeAssociationNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SolarCompanyInfoSolarTradeAssociationValidation = {
  required: { value: true, message: "Solar Trade Association is required." },
};

export function SolarCompanyInfoSolarTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={SolarCompanyInfoSolarTradeAssociationValidation}
    >
      <Field.Select
        name="solar_company_info.solar_trade_association"
        label="Solar Trade Association"
        placeholder="solar trade association"
        options={[
          { name: "Msc", value: "msc" },
          { name: "Heis", value: "heis" },
          { name: "Recc", value: "recc" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function SolarCompanyInfoForm(props: any) {
  return (
    <>
      <SolarCompanyInfoElectricalTradeAssociationNumber {...props} />
      <SolarCompanyInfoElectricalTradeAssociation {...props} />
      <SolarCompanyInfoEpvsRegistrationNumber {...props} />
      <SolarCompanyInfoSolarTradeAssociationNumber {...props} />
      <SolarCompanyInfoSolarTradeAssociation {...props} />
    </>
  );
}

export const NotEmployedDetailsSourceOfIncomeValidation = {
  required: { value: true, message: "Source Of Income is required." },
};

export function NotEmployedDetailsSourceOfIncome(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={NotEmployedDetailsSourceOfIncomeValidation}>
      <Field.Select
        name="not_employed_details.source_of_income"
        label="Source Of Income"
        placeholder="source of income"
        options={[
          { name: "Partner", value: "partner" },
          { name: "Benefits", value: "benefits" },
          { name: "Maintenance", value: "maintenance" },
          { name: "Disabled", value: "disabled" },
          { name: "Full-Time Carer", value: "full-time carer" },
          { name: "Homemaker", value: "homemaker" },
          { name: "Permanent Dla", value: "permanent dla" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function NotEmployedDetailsForm(props: any) {
  return (
    <>
      <NotEmployedDetailsSourceOfIncome {...props} />
    </>
  );
}

export const UserTypeDirectorInfoDateOfBirthValidation = {};

export function UserTypeDirectorInfoDateOfBirth(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={UserTypeDirectorInfoDateOfBirthValidation}>
      <Field.Input
        name="user_type.director_info.date_of_birth"
        label="Date Of Birth"
        placeholder="date of birth"
        validation={UserTypeDirectorInfoDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function UserTypeDirectorInfoHomeAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressBuildingNameValidation}
    >
      <Field.Input
        name="user_type.director_info.home_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={UserTypeDirectorInfoHomeAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function UserTypeDirectorInfoHomeAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressBuildingNumberValidation}
    >
      <Field.Input
        name="user_type.director_info.home_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={UserTypeDirectorInfoHomeAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function UserTypeDirectorInfoHomeAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={UserTypeDirectorInfoHomeAddressCityValidation}>
      <Field.Input
        name="user_type.director_info.home_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={UserTypeDirectorInfoHomeAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function UserTypeDirectorInfoHomeAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressCountryValidation}
    >
      <Field.Input
        name="user_type.director_info.home_address.country"
        label="Country"
        placeholder="country"
        validation={UserTypeDirectorInfoHomeAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function UserTypeDirectorInfoHomeAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressCountyValidation}
    >
      <Field.Input
        name="user_type.director_info.home_address.county"
        label="County / State"
        placeholder="county / state"
        validation={UserTypeDirectorInfoHomeAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function UserTypeDirectorInfoHomeAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressLine1Validation}
    >
      <Field.Input
        name="user_type.director_info.home_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={UserTypeDirectorInfoHomeAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function UserTypeDirectorInfoHomeAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressLine2Validation}
    >
      <Field.Input
        name="user_type.director_info.home_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={UserTypeDirectorInfoHomeAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function UserTypeDirectorInfoHomeAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="user_type.director_info.home_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={UserTypeDirectorInfoHomeAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoHomeAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function UserTypeDirectorInfoHomeAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoHomeAddressPostcodeValidation}
    >
      <Field.Postcode
        name="user_type.director_info.home_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={UserTypeDirectorInfoHomeAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeDirectorInfoVerificationStatusValidation = {
  disabled: {
    value: true,
    message: "Verification Status input is read only or disabled",
  },
};

export function UserTypeDirectorInfoVerificationStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={UserTypeDirectorInfoVerificationStatusValidation}
    >
      <Field.Select
        name="user_type.director_info.verification_status"
        label="Verification Status"
        placeholder="verification status"
        options={[
          { name: "Not Verified", value: "not_verified" },
          { name: "Verification Submitted", value: "verification_submitted" },
          { name: "Verification Declined", value: "verification_declined" },
          { name: "Verified", value: "verified" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function UserTypeEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={UserTypeEmailValidation}>
      <Field.Input
        name="user_type.email"
        label="Email"
        placeholder="email"
        validation={UserTypeEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function UserTypeFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={UserTypeFirstNameValidation}>
      <Field.Input
        name="user_type.first_name"
        label="First Name"
        placeholder="first name"
        validation={UserTypeFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeLastNameValidation = {
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function UserTypeLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={UserTypeLastNameValidation}>
      <Field.Input
        name="user_type.last_name"
        label="Last Name"
        placeholder="last name"
        validation={UserTypeLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeMobileValidation = {
  minLength: { value: 1, message: "Mobile requires minimum length of 1" },
};

export function UserTypeMobile(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={UserTypeMobileValidation}>
      <Field.Input
        name="user_type.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={UserTypeMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const UserTypeRoleValidation = {
  required: { value: true, message: "Role is required." },
};

export function UserTypeRole(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={UserTypeRoleValidation}>
      <Field.RadioSelect
        name="user_type.role"
        label="Company Role"
        placeholder="company role"
        options={[
          { name: "Company-Admin", value: "company-admin" },
          { name: "Company-Manager", value: "company-manager" },
          { name: "Company-Staff", value: "company-staff" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function UserTypeForm(props: any) {
  return (
    <>
      <UserTypeDirectorInfoDateOfBirth {...props} />
      <UserTypeDirectorInfoHomeAddressBuildingName {...props} />
      <UserTypeDirectorInfoHomeAddressBuildingNumber {...props} />
      <UserTypeDirectorInfoHomeAddressCity {...props} />
      <UserTypeDirectorInfoHomeAddressCountry {...props} />
      <UserTypeDirectorInfoHomeAddressCounty {...props} />
      <UserTypeDirectorInfoHomeAddressLine1 {...props} />
      <UserTypeDirectorInfoHomeAddressLine2 {...props} />
      <UserTypeDirectorInfoHomeAddressMonthsAtAddress {...props} />
      <UserTypeDirectorInfoHomeAddressPostcode {...props} />
      <UserTypeDirectorInfoVerificationStatus {...props} />
      <UserTypeEmail {...props} />
      <UserTypeFirstName {...props} />
      <UserTypeLastName {...props} />
      <UserTypeMobile {...props} />
      <UserTypeRole {...props} />
    </>
  );
}

export const AuthUserAudienceValidation = {
  required: { value: true, message: "Audience is required." },
  disabled: { value: true, message: "Audience input is read only or disabled" },
};

export function AuthUserAudience(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserAudienceValidation}>
      <Field.Input
        name="auth_user.audience"
        label="Audience"
        placeholder="audience"
        validation={AuthUserAudienceValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserDisabledValidation = {
  disabled: { value: true, message: "Disabled input is read only or disabled" },
};

export function AuthUserDisabled(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={AuthUserDisabledValidation}>
      <Field.BooleanInput
        name="auth_user.disabled"
        label="Disabled"
        placeholder="disabled"
        validation={AuthUserDisabledValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function AuthUserEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserEmailValidation}>
      <Field.Input
        name="auth_user.email"
        label="Email"
        placeholder="email"
        validation={AuthUserEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserIdValidation = {
  required: { value: true, message: "Id is required." },
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function AuthUserId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserIdValidation}>
      <Field.Input
        name="auth_user.id"
        label="Id"
        placeholder="id"
        validation={AuthUserIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserIssuerValidation = {
  required: { value: true, message: "Issuer is required." },
  disabled: { value: true, message: "Issuer input is read only or disabled" },
};

export function AuthUserIssuer(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserIssuerValidation}>
      <Field.Input
        name="auth_user.issuer"
        label="Issuer"
        placeholder="issuer"
        validation={AuthUserIssuerValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function AuthUserName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserNameValidation}>
      <Field.Input
        name="auth_user.name"
        label="Name"
        placeholder="name"
        validation={AuthUserNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserPhoneValidation = {
  minLength: { value: 1, message: "Phone requires minimum length of 1" },
};

export function AuthUserPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserPhoneValidation}>
      <Field.Input
        name="auth_user.phone"
        label="Phone"
        placeholder="phone"
        validation={AuthUserPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserPhotoURLValidation = {};

export function AuthUserPhotoURL(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserPhotoURLValidation}>
      <Field.Input
        name="auth_user.photo_url"
        label="Photo URL"
        placeholder="photo URL"
        validation={AuthUserPhotoURLValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserProviderValidation = {
  required: { value: true, message: "Provider is required." },
  disabled: { value: true, message: "Provider input is read only or disabled" },
};

export function AuthUserProvider(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserProviderValidation}>
      <Field.Input
        name="auth_user.provider"
        label="Provider"
        placeholder="provider"
        validation={AuthUserProviderValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserRoleValidation = {
  disabled: { value: true, message: "Role input is read only or disabled" },
};

export function AuthUserRole(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserRoleValidation}>
      <Field.Input
        name="auth_user.role"
        label="Role"
        placeholder="role"
        validation={AuthUserRoleValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserSubjectValidation = {
  required: { value: true, message: "Subject is required." },
  disabled: { value: true, message: "Subject input is read only or disabled" },
};

export function AuthUserSubject(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserSubjectValidation}>
      <Field.Input
        name="auth_user.subject"
        label="Subject"
        placeholder="subject"
        validation={AuthUserSubjectValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserTokenValidation = {
  required: { value: true, message: "Token is required." },
  disabled: { value: true, message: "Token input is read only or disabled" },
};

export function AuthUserToken(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AuthUserTokenValidation}>
      <Field.Input
        name="auth_user.token"
        label="Token"
        placeholder="token"
        validation={AuthUserTokenValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AuthUserVerifiedValidation = {
  required: { value: true, message: "Verified is required." },
};

export function AuthUserVerified(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={AuthUserVerifiedValidation}>
      <Field.BooleanInput
        name="auth_user.verified"
        label="Email Verified"
        placeholder="email verified"
        validation={AuthUserVerifiedValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function AuthUserForm(props: any) {
  return (
    <>
      <AuthUserAudience {...props} />
      <AuthUserDisabled {...props} />
      <AuthUserEmail {...props} />
      <AuthUserId {...props} />
      <AuthUserIssuer {...props} />
      <AuthUserName {...props} />
      <AuthUserPhone {...props} />
      <AuthUserPhotoURL {...props} />
      <AuthUserProvider {...props} />
      <AuthUserRole {...props} />
      <AuthUserSubject {...props} />
      <AuthUserToken {...props} />
      <AuthUserVerified {...props} />
    </>
  );
}

export const CreditAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CreditAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditAidValidation}>
      <Field.Input
        name="credit.aid"
        label="Author Id"
        placeholder="author id"
        validation={CreditAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CreditAmountAmount(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={CreditAmountAmountValidation}>
      <Field.NumberFormatInput
        name="credit.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CreditAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditAmountCurrencyValidation = {};

export function CreditAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CreditAmountCurrencyValidation}>
      <Field.RadioSelect
        name="credit.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function CreditBankAccountAccountName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditBankAccountAccountNameValidation}>
      <Field.Input
        name="credit.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={CreditBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function CreditBankAccountAccountNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditBankAccountAccountNumberValidation}>
      <Field.Input
        name="credit.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={CreditBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function CreditBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CreditBankAccountMonthsHeldValidation}>
      <Field.NumberFormatInput
        name="credit.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={CreditBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function CreditBankAccountSortCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditBankAccountSortCodeValidation}>
      <Field.Input
        name="credit.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={CreditBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CreditCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCidValidation}>
      <Field.Input
        name="credit.cid"
        label="Company Id"
        placeholder="company id"
        validation={CreditCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCreditDocumentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function CreditCreditDocumentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={CreditCreditDocumentsAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function CreditCreditDocumentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={CreditCreditDocumentsCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function CreditCreditDocumentsContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={CreditCreditDocumentsContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CreditCreditDocumentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator validation={CreditCreditDocumentsIdArrayInputValidation}>
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CreditCreditDocumentsMetadataCreatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={CreditCreditDocumentsMetadataCreatedAtArrayInputValidation}
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CreditCreditDocumentsMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={CreditCreditDocumentsMetadataLivenessArrayInputValidation}
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CreditCreditDocumentsMetadataUpdatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={CreditCreditDocumentsMetadataUpdatedAtArrayInputValidation}
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function CreditCreditDocumentsMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={CreditCreditDocumentsMimetypeArrayInputValidation}
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function CreditCreditDocumentsNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={CreditCreditDocumentsNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CreditCreditDocumentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={CreditCreditDocumentsOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditCreditDocumentsValidation = {};

export function CreditCreditDocumentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="credit.credit_documents"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const CreditCustomerDetailsCurrentAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CreditCustomerDetailsCurrentAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressBuildingNameValidation}
    >
      <Field.Input
        name="credit.customer_details.current_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CreditCustomerDetailsCurrentAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CreditCustomerDetailsCurrentAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressBuildingNumberValidation}
    >
      <Field.Input
        name="credit.customer_details.current_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CreditCustomerDetailsCurrentAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CreditCustomerDetailsCurrentAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressCityValidation}
    >
      <Field.Input
        name="credit.customer_details.current_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CreditCustomerDetailsCurrentAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CreditCustomerDetailsCurrentAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressCountryValidation}
    >
      <Field.Input
        name="credit.customer_details.current_address.country"
        label="Country"
        placeholder="country"
        validation={CreditCustomerDetailsCurrentAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CreditCustomerDetailsCurrentAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressCountyValidation}
    >
      <Field.Input
        name="credit.customer_details.current_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CreditCustomerDetailsCurrentAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CreditCustomerDetailsCurrentAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressLine1Validation}
    >
      <Field.Input
        name="credit.customer_details.current_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CreditCustomerDetailsCurrentAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CreditCustomerDetailsCurrentAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressLine2Validation}
    >
      <Field.Input
        name="credit.customer_details.current_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CreditCustomerDetailsCurrentAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CreditCustomerDetailsCurrentAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="credit.customer_details.current_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CreditCustomerDetailsCurrentAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsCurrentAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CreditCustomerDetailsCurrentAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsCurrentAddressPostcodeValidation}
    >
      <Field.Postcode
        name="credit.customer_details.current_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CreditCustomerDetailsCurrentAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsDateOfBirthValidation = {
  required: { value: true, message: "Date Of Birth is required." },
};

export function CreditCustomerDetailsDateOfBirth(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsDateOfBirthValidation}>
      <Field.Input
        name="credit.customer_details.date_of_birth"
        label="Date Of Birth"
        placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
        validation={CreditCustomerDetailsDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function CreditCustomerDetailsEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsEmailValidation}>
      <Field.Input
        name="credit.customer_details.email"
        label="Email"
        placeholder="email"
        validation={CreditCustomerDetailsEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
};

export function CreditCustomerDetailsFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsFirstNameValidation}>
      <Field.Input
        name="credit.customer_details.first_name"
        label="First Name"
        placeholder="first name"
        validation={CreditCustomerDetailsFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGenderValidation = {
  required: { value: true, message: "Gender is required." },
};

export function CreditCustomerDetailsGender(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CreditCustomerDetailsGenderValidation}>
      <Field.RadioSelect
        name="credit.customer_details.gender"
        label="Gender"
        placeholder="gender"
        options={[
          { name: "Male", value: "male" },
          { name: "Female", value: "female" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CreditCustomerDetailsGoodsDeliveryAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          CreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function CreditCustomerDetailsGoodsDeliveryAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          CreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CreditCustomerDetailsGoodsDeliveryAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsGoodsDeliveryAddressCityValidation}
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CreditCustomerDetailsGoodsDeliveryAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CreditCustomerDetailsGoodsDeliveryAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsGoodsDeliveryAddressCountryValidation}
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.country"
        label="Country"
        placeholder="country"
        validation={CreditCustomerDetailsGoodsDeliveryAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CreditCustomerDetailsGoodsDeliveryAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsGoodsDeliveryAddressCountyValidation}
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CreditCustomerDetailsGoodsDeliveryAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CreditCustomerDetailsGoodsDeliveryAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsGoodsDeliveryAddressLine1Validation}
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CreditCustomerDetailsGoodsDeliveryAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CreditCustomerDetailsGoodsDeliveryAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsGoodsDeliveryAddressLine2Validation}
    >
      <Field.Input
        name="credit.customer_details.goods_delivery_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CreditCustomerDetailsGoodsDeliveryAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="credit.customer_details.goods_delivery_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CreditCustomerDetailsGoodsDeliveryAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation}
    >
      <Field.Postcode
        name="credit.customer_details.goods_delivery_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
};

export function CreditCustomerDetailsLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsLastNameValidation}>
      <Field.Input
        name="credit.customer_details.last_name"
        label="Last Name"
        placeholder="last name"
        validation={CreditCustomerDetailsLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsMaidenNameValidation = {};

export function CreditCustomerDetailsMaidenName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsMaidenNameValidation}>
      <Field.Input
        name="credit.customer_details.maiden_name"
        label="Maiden Name"
        placeholder="maiden name"
        validation={CreditCustomerDetailsMaidenNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsMaritalStatusValidation = {
  required: { value: true, message: "Marital Status is required." },
};

export function CreditCustomerDetailsMaritalStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CreditCustomerDetailsMaritalStatusValidation}>
      <Field.Select
        name="credit.customer_details.marital_status"
        label="Marital Status"
        placeholder="marital status"
        options={[
          { name: "Widowed", value: "widowed" },
          { name: "Other", value: "other" },
          { name: "Married", value: "married" },
          { name: "Divorced", value: "divorced" },
          { name: "Cohabiting", value: "cohabiting" },
          { name: "To Be Married", value: "to_be_married" },
          { name: "Separated", value: "separated" },
          { name: "Single", value: "single" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsMiddleNameValidation = {};

export function CreditCustomerDetailsMiddleName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsMiddleNameValidation}>
      <Field.Input
        name="credit.customer_details.middle_name"
        label="Middle Name"
        placeholder="middle name"
        validation={CreditCustomerDetailsMiddleNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsMobileValidation = {};

export function CreditCustomerDetailsMobile(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsMobileValidation}>
      <Field.Input
        name="credit.customer_details.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={CreditCustomerDetailsMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsMonthlyRentAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CreditCustomerDetailsMonthlyRentAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsMonthlyRentAmountAmountValidation}
    >
      <Field.NumberFormatInput
        name="credit.customer_details.monthly_rent_amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CreditCustomerDetailsMonthlyRentAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsMonthlyRentAmountCurrencyValidation = {};

export function CreditCustomerDetailsMonthlyRentAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsMonthlyRentAmountCurrencyValidation}
    >
      <Field.RadioSelect
        name="credit.customer_details.monthly_rent_amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsNumberOfDependantsValidation = {
  required: { value: true, message: "Number Of Dependants is required." },
  min: { value: 0, message: "Number Of Dependants must be great than 0" },
  max: {
    value: 2147483647,
    message: "Number Of Dependants must be smaller than 2.147483647e+09",
  },
};

export function CreditCustomerDetailsNumberOfDependants(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsNumberOfDependantsValidation}
    >
      <Field.NumberFormatInput
        name="credit.customer_details.number_of_dependants"
        label="Number Of Dependants"
        placeholder="number of dependants"
        validation={CreditCustomerDetailsNumberOfDependantsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CreditCustomerDetailsPreviousAddressOneBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOneBuildingNameValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          CreditCustomerDetailsPreviousAddressOneBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CreditCustomerDetailsPreviousAddressOneBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsPreviousAddressOneBuildingNumberValidation
      }
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          CreditCustomerDetailsPreviousAddressOneBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressOneCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOneCityValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.city"
        label="City / Town"
        placeholder="city / town"
        validation={CreditCustomerDetailsPreviousAddressOneCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressOneCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOneCountryValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.country"
        label="Country"
        placeholder="country"
        validation={CreditCustomerDetailsPreviousAddressOneCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressOneCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOneCountyValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.county"
        label="County / State"
        placeholder="county / state"
        validation={CreditCustomerDetailsPreviousAddressOneCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressOneLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOneLine1Validation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CreditCustomerDetailsPreviousAddressOneLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressOneLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOneLine2Validation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_one.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CreditCustomerDetailsPreviousAddressOneLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditCustomerDetailsPreviousAddressOneMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="credit.customer_details.previous_address_one.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressOnePostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CreditCustomerDetailsPreviousAddressOnePostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressOnePostcodeValidation}
    >
      <Field.Postcode
        name="credit.customer_details.previous_address_one.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CreditCustomerDetailsPreviousAddressOnePostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CreditCustomerDetailsPreviousAddressTwoBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoBuildingNameValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          CreditCustomerDetailsPreviousAddressTwoBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CreditCustomerDetailsPreviousAddressTwoBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation
      }
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          CreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressTwoCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoCityValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.city"
        label="City / Town"
        placeholder="city / town"
        validation={CreditCustomerDetailsPreviousAddressTwoCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressTwoCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoCountryValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.country"
        label="Country"
        placeholder="country"
        validation={CreditCustomerDetailsPreviousAddressTwoCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressTwoCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoCountyValidation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.county"
        label="County / State"
        placeholder="county / state"
        validation={CreditCustomerDetailsPreviousAddressTwoCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressTwoLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoLine1Validation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CreditCustomerDetailsPreviousAddressTwoLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CreditCustomerDetailsPreviousAddressTwoLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoLine2Validation}
    >
      <Field.Input
        name="credit.customer_details.previous_address_two.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CreditCustomerDetailsPreviousAddressTwoLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditCustomerDetailsPreviousAddressTwoMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="credit.customer_details.previous_address_two.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsPreviousAddressTwoPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CreditCustomerDetailsPreviousAddressTwoPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsPreviousAddressTwoPostcodeValidation}
    >
      <Field.Postcode
        name="credit.customer_details.previous_address_two.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CreditCustomerDetailsPreviousAddressTwoPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsResidentialStatusValidation = {
  required: { value: true, message: "Residential Status is required." },
};

export function CreditCustomerDetailsResidentialStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={CreditCustomerDetailsResidentialStatusValidation}
    >
      <Field.Select
        name="credit.customer_details.residential_status"
        label="Residential Status"
        placeholder="residential status"
        options={[
          { name: "Tenant", value: "tenant" },
          { name: "Council Tenant", value: "council tenant" },
          { name: "Living With Parents", value: "living with parents" },
          { name: "Owner", value: "owner" },
          { name: "Owner Without Mortgage", value: "owner without mortgage" },
          { name: "Lodger", value: "lodger" },
          { name: "Armed Forces", value: "armed forces" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsTelephoneValidation = {};

export function CreditCustomerDetailsTelephone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditCustomerDetailsTelephoneValidation}>
      <Field.Input
        name="credit.customer_details.telephone"
        label="Telephone"
        placeholder="telephone"
        validation={CreditCustomerDetailsTelephoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditCustomerDetailsTitleValidation = {
  required: { value: true, message: "Title is required." },
};

export function CreditCustomerDetailsTitle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CreditCustomerDetailsTitleValidation}>
      <Field.Select
        name="credit.customer_details.title"
        label="Title"
        placeholder="title"
        options={[
          { name: "Mrs", value: "mrs" },
          { name: "Mr", value: "mr" },
          { name: "Miss", value: "miss" },
          { name: "Ms", value: "ms" },
          { name: "Dr", value: "dr" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CreditDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CreditDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="credit.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CreditDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditDepositValueCurrencyValidation = {};

export function CreditDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CreditDepositValueCurrencyValidation}>
      <Field.RadioSelect
        name="credit.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsEmployedDetailsEmployerNameValidation = {
  required: { value: true, message: "Employer Name is required." },
  minLength: {
    value: 1,
    message: "Employer Name requires minimum length of 1",
  },
};

export function CreditEmploymentDetailsEmployedDetailsEmployerName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CreditEmploymentDetailsEmployedDetailsEmployerNameValidation}
    >
      <Field.Input
        name="credit.employment_details.employed_details.employer_name"
        label="Employer Name"
        placeholder="employer name"
        validation={
          CreditEmploymentDetailsEmployedDetailsEmployerNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsEmployedDetailsMainOccupationValidation = {
  required: { value: true, message: "Main Occupation is required." },
  minLength: {
    value: 1,
    message: "Main Occupation requires minimum length of 1",
  },
};

export function CreditEmploymentDetailsEmployedDetailsMainOccupation(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsEmployedDetailsMainOccupationValidation
      }
    >
      <Field.Input
        name="credit.employment_details.employed_details.main_occupation"
        label="Main Occupation"
        placeholder="main occupation"
        validation={
          CreditEmploymentDetailsEmployedDetailsMainOccupationValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation = {
  required: { value: true, message: "Months Employed is required." },
  min: { value: 1, message: "Months Employed must be great than 1" },
  max: {
    value: 2147483647,
    message: "Months Employed must be smaller than 2.147483647e+09",
  },
};

export function CreditEmploymentDetailsEmployedDetailsMonthsEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="credit.employment_details.employed_details.months_employed"
        label="Months Employed"
        placeholder="months employed"
        validation={
          CreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsEmploymentStatusValidation = {
  required: { value: true, message: "Employment Status is required." },
};

export function CreditEmploymentDetailsEmploymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={CreditEmploymentDetailsEmploymentStatusValidation}
    >
      <Field.Select
        name="credit.employment_details.employment_status"
        label="Employment Status"
        placeholder="employment status"
        options={[
          { name: "Employed", value: "employed" },
          { name: "Self Employed", value: "self_employed" },
          { name: "Not Employed", value: "not_employed" },
          { name: "Retired", value: "retired" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsGrossAnnualIncomeAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CreditEmploymentDetailsGrossAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CreditEmploymentDetailsGrossAnnualIncomeAmountValidation}
    >
      <Field.NumberFormatInput
        name="credit.employment_details.gross_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CreditEmploymentDetailsGrossAnnualIncomeAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsGrossAnnualIncomeCurrencyValidation = {};

export function CreditEmploymentDetailsGrossAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={CreditEmploymentDetailsGrossAnnualIncomeCurrencyValidation}
    >
      <Field.RadioSelect
        name="credit.employment_details.gross_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CreditEmploymentDetailsHouseholdAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation}
    >
      <Field.NumberFormatInput
        name="credit.employment_details.household_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          CreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation =
  {};

export function CreditEmploymentDetailsHouseholdAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="credit.employment_details.household_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function CreditEmploymentDetailsNotEmployedDetailsSourceOfIncome(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation
      }
    >
      <Field.Select
        name="credit.employment_details.not_employed_details.source_of_income"
        label="Source Of Income"
        placeholder="source of income"
        options={[
          { name: "Partner", value: "partner" },
          { name: "Benefits", value: "benefits" },
          { name: "Maintenance", value: "maintenance" },
          { name: "Disabled", value: "disabled" },
          { name: "Full-Time Carer", value: "full-time carer" },
          { name: "Homemaker", value: "homemaker" },
          { name: "Permanent Dla", value: "permanent dla" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function CreditEmploymentDetailsSelfEmployedDetailsBusinessName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
      }
    >
      <Field.Input
        name="credit.employment_details.self_employed_details.business_name"
        label="Business Name"
        placeholder="business name"
        validation={
          CreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function CreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="credit.employment_details.self_employed_details.months_self_employed"
        label="Months Self Employed"
        placeholder="months self employed"
        validation={
          CreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function CreditEmploymentDetailsSelfEmployedDetailsTypeOfBusiness(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        CreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
      }
    >
      <Field.Input
        name="credit.employment_details.self_employed_details.type_of_business"
        label="Type Of Business"
        placeholder="type of business"
        validation={
          CreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditExtraApplicantsBankAccountAccountNameArrayInputValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function CreditExtraApplicantsBankAccountAccountNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="account_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsBankAccountAccountNameArrayInputValidation
        }
      >
        <Field.Input
          label="Account Name"
          placeholder="Account Name"
          label="Account Name"
          placeholder="account name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsBankAccountAccountNumberArrayInputValidation =
  {
    required: { value: true, message: "Account Number is required." },
    minLength: {
      value: 1,
      message: "Account Number requires minimum length of 1",
    },
    pattern: {
      value: /^[0-9]{7,8}$/,
      message: "Account Number input is invalid",
    },
  };

export function CreditExtraApplicantsBankAccountAccountNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="account_number">
      <Field.Validator
        validation={
          CreditExtraApplicantsBankAccountAccountNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Account Number"
          placeholder="Account Number"
          label="Account Number"
          placeholder="account number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsBankAccountMonthsHeldArrayInputValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function CreditExtraApplicantsBankAccountMonthsHeldArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_held">
      <Field.Validator
        validation={
          CreditExtraApplicantsBankAccountMonthsHeldArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Held"
          placeholder="Months Held"
          label="Months Held For Bank Account"
          placeholder="months held for bank account"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsBankAccountSortCodeArrayInputValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function CreditExtraApplicantsBankAccountSortCodeArrayInput(props: any) {
  return (
    <Field.Array.Input name="sort_code">
      <Field.Validator
        validation={
          CreditExtraApplicantsBankAccountSortCodeArrayInputValidation
        }
      >
        <Field.Input
          label="Sort Code"
          placeholder="Sort Code"
          label="Sort Code"
          placeholder="sort code"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function CreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsDateOfBirthArrayInputValidation =
  { required: { value: true, message: "Date Of Birth is required." } };

export function CreditExtraApplicantsCustomerDetailsDateOfBirthArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsDateOfBirthArrayInputValidation
        }
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsEmailArrayInputValidation = {
  required: { value: true, message: "Email is required." },
};

export function CreditExtraApplicantsCustomerDetailsEmailArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsEmailArrayInputValidation
        }
      >
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsFirstNameArrayInputValidation =
  { required: { value: true, message: "First Name is required." } };

export function CreditExtraApplicantsCustomerDetailsFirstNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsFirstNameArrayInputValidation
        }
      >
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGenderArraySelectValidation = {
  required: { value: true, message: "Gender is required." },
};

export function CreditExtraApplicantsCustomerDetailsGenderArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="gender">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGenderArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Gender"
          placeholder="Gender"
          label="Gender"
          placeholder="gender"
          options={[
            { name: "Male", value: "male" },
            { name: "Female", value: "female" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsLastNameArrayInputValidation =
  { required: { value: true, message: "Last Name is required." } };

export function CreditExtraApplicantsCustomerDetailsLastNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsLastNameArrayInputValidation
        }
      >
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsMaidenNameArrayInputValidation =
  {};

export function CreditExtraApplicantsCustomerDetailsMaidenNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="maiden_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsMaidenNameArrayInputValidation
        }
      >
        <Field.Input
          label="Maiden Name"
          placeholder="Maiden Name"
          label="Maiden Name"
          placeholder="maiden name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsMaritalStatusArraySelectValidation =
  { required: { value: true, message: "Marital Status is required." } };

export function CreditExtraApplicantsCustomerDetailsMaritalStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="marital_status">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsMaritalStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Marital Status"
          placeholder="Marital Status"
          label="Marital Status"
          placeholder="marital status"
          options={[
            { name: "Widowed", value: "widowed" },
            { name: "Other", value: "other" },
            { name: "Married", value: "married" },
            { name: "Divorced", value: "divorced" },
            { name: "Cohabiting", value: "cohabiting" },
            { name: "To Be Married", value: "to_be_married" },
            { name: "Separated", value: "separated" },
            { name: "Single", value: "single" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsMiddleNameArrayInputValidation =
  {};

export function CreditExtraApplicantsCustomerDetailsMiddleNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="middle_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsMiddleNameArrayInputValidation
        }
      >
        <Field.Input
          label="Middle Name"
          placeholder="Middle Name"
          label="Middle Name"
          placeholder="middle name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsMobileArrayInputValidation =
  {};

export function CreditExtraApplicantsCustomerDetailsMobileArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsMobileArrayInputValidation
        }
      >
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArraySelectValidation =
  {};

export function CreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInputValidation =
  {
    required: { value: true, message: "Number Of Dependants is required." },
    min: { value: 0, message: "Number Of Dependants must be great than 0" },
    max: {
      value: 2147483647,
      message: "Number Of Dependants must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="number_of_dependants">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Number Of Dependants"
          placeholder="Number Of Dependants"
          label="Number Of Dependants"
          placeholder="number of dependants"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function CreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsResidentialStatusArraySelectValidation =
  { required: { value: true, message: "Residential Status is required." } };

export function CreditExtraApplicantsCustomerDetailsResidentialStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="residential_status">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsResidentialStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Residential Status"
          placeholder="Residential Status"
          label="Residential Status"
          placeholder="residential status"
          options={[
            { name: "Tenant", value: "tenant" },
            { name: "Council Tenant", value: "council tenant" },
            { name: "Living With Parents", value: "living with parents" },
            { name: "Owner", value: "owner" },
            { name: "Owner Without Mortgage", value: "owner without mortgage" },
            { name: "Lodger", value: "lodger" },
            { name: "Armed Forces", value: "armed forces" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsTelephoneArrayInputValidation =
  {};

export function CreditExtraApplicantsCustomerDetailsTelephoneArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="telephone">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsTelephoneArrayInputValidation
        }
      >
        <Field.Input
          label="Telephone"
          placeholder="Telephone"
          label="Telephone"
          placeholder="telephone"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsCustomerDetailsTitleArraySelectValidation = {
  required: { value: true, message: "Title is required." },
};

export function CreditExtraApplicantsCustomerDetailsTitleArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="title">
      <Field.Validator
        validation={
          CreditExtraApplicantsCustomerDetailsTitleArrayInputValidation
        }
      >
        <Field.Select
          label="Title"
          placeholder="Title"
          label="Title"
          placeholder="title"
          options={[
            { name: "Mrs", value: "mrs" },
            { name: "Mr", value: "mr" },
            { name: "Miss", value: "miss" },
            { name: "Ms", value: "ms" },
            { name: "Dr", value: "dr" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInputValidation =
  {
    required: { value: true, message: "Employer Name is required." },
    minLength: {
      value: 1,
      message: "Employer Name requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="employer_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInputValidation
        }
      >
        <Field.Input
          label="Employer Name"
          placeholder="Employer Name"
          label="Employer Name"
          placeholder="employer name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInputValidation =
  {
    required: { value: true, message: "Main Occupation is required." },
    minLength: {
      value: 1,
      message: "Main Occupation requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="main_occupation">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInputValidation
        }
      >
        <Field.Input
          label="Main Occupation"
          placeholder="Main Occupation"
          label="Main Occupation"
          placeholder="main occupation"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInputValidation =
  {
    required: { value: true, message: "Months Employed is required." },
    min: { value: 1, message: "Months Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Employed must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_employed">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Employed"
          placeholder="Months Employed"
          label="Months Employed"
          placeholder="months employed"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsEmploymentStatusArraySelectValidation =
  { required: { value: true, message: "Employment Status is required." } };

export function CreditExtraApplicantsEmploymentDetailsEmploymentStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="employment_status">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsEmploymentStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Employment Status"
          placeholder="Employment Status"
          label="Employment Status"
          placeholder="employment status"
          options={[
            { name: "Employed", value: "employed" },
            { name: "Self Employed", value: "self_employed" },
            { name: "Not Employed", value: "not_employed" },
            { name: "Retired", value: "retired" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArraySelectValidation =
  {};

export function CreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArraySelectValidation =
  {};

export function CreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArraySelectValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function CreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="source_of_income">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArrayInputValidation
        }
      >
        <Field.Select
          label="Source Of Income"
          placeholder="Source Of Income"
          label="Source Of Income"
          placeholder="source of income"
          options={[
            { name: "Partner", value: "partner" },
            { name: "Benefits", value: "benefits" },
            { name: "Maintenance", value: "maintenance" },
            { name: "Disabled", value: "disabled" },
            { name: "Full-Time Carer", value: "full-time carer" },
            { name: "Homemaker", value: "homemaker" },
            { name: "Permanent Dla", value: "permanent dla" },
            { name: "Other", value: "other" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInputValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="business_name">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInputValidation
        }
      >
        <Field.Input
          label="Business Name"
          placeholder="Business Name"
          label="Business Name"
          placeholder="business name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInputValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_self_employed">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Self Employed"
          placeholder="Months Self Employed"
          label="Months Self Employed"
          placeholder="months self employed"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInputValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="type_of_business">
      <Field.Validator
        validation={
          CreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInputValidation
        }
      >
        <Field.Input
          label="Type Of Business"
          placeholder="Type Of Business"
          label="Type Of Business"
          placeholder="type of business"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArraySelectValidation =
  {};

export function CreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="bankrupcy_or_iva_in_last_5_years">
      <Field.Validator
        validation={
          CreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Bankrupcy Or Iva In Last 5 Years"
          placeholder="Bankrupcy Or Iva In Last 5 Years"
          label="Any Bankrupcy Or IVA In The Last 5 Years?"
          placeholder="any bankrupcy or IVA in the last 5 years?"
          options={[
            { name: "Yes", value: "yes" },
            { name: "No", value: "no" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function CreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          CreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function CreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          CreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function CreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          CreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditExtraApplicantsFinanceDetailsExpendituresValidation = {};

export function CreditExtraApplicantsFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="credit.extra_applicants.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const CreditExtraApplicantsValidation = {};

export function CreditExtraApplicantsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="credit.extra_applicants"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const CreditFinanceDetailsBankrupcyOrIvaInLast5YearsValidation = {};

export function CreditFinanceDetailsBankrupcyOrIvaInLast5Years(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={CreditFinanceDetailsBankrupcyOrIvaInLast5YearsValidation}
    >
      <Field.RadioSelect
        name="credit.finance_details.bankrupcy_or_iva_in_last_5_years"
        label="Any Bankrupcy Or IVA In The Last 5 Years?"
        placeholder="any bankrupcy or IVA in the last 5 years?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function CreditFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          CreditFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function CreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          CreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function CreditFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          CreditFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const CreditFinanceDetailsExpendituresValidation = {};

export function CreditFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="credit.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const CreditFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
  disabled: {
    value: true,
    message: "Finance Option input is read only or disabled",
  },
};

export function CreditFinanceOption(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditFinanceOptionValidation}>
      <Field.Input
        name="credit.finance_option"
        label="Finance Option For This Credit"
        placeholder="finance option"
        validation={CreditFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function CreditId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditIdValidation}>
      <Field.Input
        name="credit.id"
        label="Payment Id"
        placeholder="payment id"
        validation={CreditIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditKidValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function CreditKid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditKidValidation}>
      <Field.Input
        name="credit.kid"
        label="Internal Kind Id"
        placeholder="internal kind id"
        validation={CreditKidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditKindValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function CreditKind(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CreditKindValidation}>
      <Field.RadioSelect
        name="credit.kind"
        label="Internal Kind"
        placeholder="internal kind"
        options={[
          { name: "Job", value: "job" },
          { name: "Charge", value: "charge" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function CreditMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditMetadataCreatedAtValidation}>
      <Field.Input
        name="credit.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={CreditMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function CreditMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={CreditMetadataLivenessValidation}>
      <Field.BooleanInput
        name="credit.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={CreditMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function CreditMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditMetadataUpdatedAtValidation}>
      <Field.Input
        name="credit.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={CreditMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function CreditOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditOidValidation}>
      <Field.Input
        name="credit.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={CreditOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditProviderValidation = {
  disabled: { value: true, message: "Provider input is read only or disabled" },
};

export function CreditProvider(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CreditProviderValidation}>
      <Field.RadioSelect
        name="credit.provider"
        label="Provider Name"
        placeholder="provider name"
        options={[
          { name: "Omni", value: "omni" },
          { name: "Propensio", value: "propensio" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function CreditSignatureFingerprint(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditSignatureFingerprintValidation}>
      <Field.Input
        name="credit.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={CreditSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function CreditSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CreditSignatureSignedValidation}>
      <Field.RadioSelect
        name="credit.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditStateValidation = {
  disabled: { value: true, message: "State input is read only or disabled" },
};

export function CreditState(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CreditStateValidation}>
      <Field.Select
        name="credit.state"
        label="Credit State"
        placeholder="credit state"
        options={[
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Referred", value: "referred" },
          { name: "Action Lender", value: "action_lender" },
          { name: "Action Customer", value: "action_customer" },
          { name: "Pending", value: "pending" },
          { name: "Finished", value: "finished" },
          { name: "Paid Out", value: "paid_out" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function CreditXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditXidValidation}>
      <Field.Input
        name="credit.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={CreditXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CreditXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function CreditXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CreditXrefValidation}>
      <Field.Input
        name="credit.xref"
        label="External Reference"
        placeholder="external reference"
        validation={CreditXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function CreditForm(props: any) {
  return (
    <>
      <CreditAid {...props} />
      <CreditAmountAmount {...props} />
      <CreditAmountCurrency {...props} />
      <CreditBankAccountAccountName {...props} />
      <CreditBankAccountAccountNumber {...props} />
      <CreditBankAccountMonthsHeld {...props} />
      <CreditBankAccountSortCode {...props} />
      <CreditCid {...props} />
      <CreditCustomerDetailsCurrentAddressBuildingName {...props} />
      <CreditCustomerDetailsCurrentAddressBuildingNumber {...props} />
      <CreditCustomerDetailsCurrentAddressCity {...props} />
      <CreditCustomerDetailsCurrentAddressCountry {...props} />
      <CreditCustomerDetailsCurrentAddressCounty {...props} />
      <CreditCustomerDetailsCurrentAddressLine1 {...props} />
      <CreditCustomerDetailsCurrentAddressLine2 {...props} />
      <CreditCustomerDetailsCurrentAddressMonthsAtAddress {...props} />
      <CreditCustomerDetailsCurrentAddressPostcode {...props} />
      <CreditCustomerDetailsDateOfBirth {...props} />
      <CreditCustomerDetailsEmail {...props} />
      <CreditCustomerDetailsFirstName {...props} />
      <CreditCustomerDetailsGender {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressBuildingName {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressBuildingNumber {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressCity {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressCountry {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressCounty {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressLine1 {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressLine2 {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddress {...props} />
      <CreditCustomerDetailsGoodsDeliveryAddressPostcode {...props} />
      <CreditCustomerDetailsLastName {...props} />
      <CreditCustomerDetailsMaidenName {...props} />
      <CreditCustomerDetailsMaritalStatus {...props} />
      <CreditCustomerDetailsMiddleName {...props} />
      <CreditCustomerDetailsMobile {...props} />
      <CreditCustomerDetailsMonthlyRentAmountAmount {...props} />
      <CreditCustomerDetailsMonthlyRentAmountCurrency {...props} />
      <CreditCustomerDetailsNumberOfDependants {...props} />
      <CreditCustomerDetailsPreviousAddressOneBuildingName {...props} />
      <CreditCustomerDetailsPreviousAddressOneBuildingNumber {...props} />
      <CreditCustomerDetailsPreviousAddressOneCity {...props} />
      <CreditCustomerDetailsPreviousAddressOneCountry {...props} />
      <CreditCustomerDetailsPreviousAddressOneCounty {...props} />
      <CreditCustomerDetailsPreviousAddressOneLine1 {...props} />
      <CreditCustomerDetailsPreviousAddressOneLine2 {...props} />
      <CreditCustomerDetailsPreviousAddressOneMonthsAtAddress {...props} />
      <CreditCustomerDetailsPreviousAddressOnePostcode {...props} />
      <CreditCustomerDetailsPreviousAddressTwoBuildingName {...props} />
      <CreditCustomerDetailsPreviousAddressTwoBuildingNumber {...props} />
      <CreditCustomerDetailsPreviousAddressTwoCity {...props} />
      <CreditCustomerDetailsPreviousAddressTwoCountry {...props} />
      <CreditCustomerDetailsPreviousAddressTwoCounty {...props} />
      <CreditCustomerDetailsPreviousAddressTwoLine1 {...props} />
      <CreditCustomerDetailsPreviousAddressTwoLine2 {...props} />
      <CreditCustomerDetailsPreviousAddressTwoMonthsAtAddress {...props} />
      <CreditCustomerDetailsPreviousAddressTwoPostcode {...props} />
      <CreditCustomerDetailsResidentialStatus {...props} />
      <CreditCustomerDetailsTelephone {...props} />
      <CreditCustomerDetailsTitle {...props} />
      <CreditDepositValueAmount {...props} />
      <CreditDepositValueCurrency {...props} />
      <CreditEmploymentDetailsEmployedDetailsEmployerName {...props} />
      <CreditEmploymentDetailsEmployedDetailsMainOccupation {...props} />
      <CreditEmploymentDetailsEmployedDetailsMonthsEmployed {...props} />
      <CreditEmploymentDetailsEmploymentStatus {...props} />
      <CreditEmploymentDetailsGrossAnnualIncomeAmount {...props} />
      <CreditEmploymentDetailsGrossAnnualIncomeCurrency {...props} />
      <CreditEmploymentDetailsHouseholdAnnualIncomeAmount {...props} />
      <CreditEmploymentDetailsHouseholdAnnualIncomeCurrency {...props} />
      <CreditEmploymentDetailsNotEmployedDetailsSourceOfIncome {...props} />
      <CreditEmploymentDetailsSelfEmployedDetailsBusinessName {...props} />
      <CreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed
        {...props}
      />
      <CreditEmploymentDetailsSelfEmployedDetailsTypeOfBusiness {...props} />
      <CreditFinanceDetailsBankrupcyOrIvaInLast5Years {...props} />
      <CreditFinanceOption {...props} />
      <CreditId {...props} />
      <CreditKid {...props} />
      <CreditKind {...props} />
      <CreditMetadataCreatedAt {...props} />
      <CreditMetadataLiveness {...props} />
      <CreditMetadataUpdatedAt {...props} />
      <CreditOid {...props} />
      <CreditProvider {...props} />
      <CreditSignatureFingerprint {...props} />
      <CreditSignatureSigned {...props} />
      <CreditState {...props} />
      <CreditXid {...props} />
      <CreditXref {...props} />
    </>
  );
}

export const EventEntityJobAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityJobAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobAidValidation}>
      <Field.Input
        name="event.entity.job.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityJobAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobArchivedValidation = {
  disabled: { value: true, message: "Archived input is read only or disabled" },
};

export function EventEntityJobArchived(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityJobArchivedValidation}>
      <Field.RadioSelect
        name="event.entity.job.archived"
        label="Job Is Archived?"
        placeholder="job is archived?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCheckoutOptionsArraySelectValidation = {};

export function EventEntityJobCheckoutOptionsArraySelect(props: any) {
  return (
    <Field.Array.Input name="">
      <Field.Validator
        validation={EventEntityJobCheckoutOptionsArrayInputValidation}
      >
        <Field.RadioSelect
          label=""
          placeholder=""
          label="Checkout Option"
          placeholder="checkout option picked by customer, updated only via custom action"
          options={[
            { name: "Apply For Finance", value: "apply_for_finance" },
            { name: "Decline Job", value: "decline_job" },
            { name: "Pay On Completion", value: "pay_on_completion" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobCheckoutOptionsValidation = {
  minLength: {
    value: 1,
    message: "Checkout Options requires minimum length of 1",
  },
};

export function EventEntityJobCheckoutOptionsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.job.checkout_options"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityJobCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityJobCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCidValidation}>
      <Field.Input
        name="event.entity.job.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityJobCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function EventEntityJobCustomerAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerAddressBuildingNameValidation}
    >
      <Field.Input
        name="event.entity.job.customer.address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={EventEntityJobCustomerAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function EventEntityJobCustomerAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerAddressBuildingNumberValidation}
    >
      <Field.Input
        name="event.entity.job.customer.address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={EventEntityJobCustomerAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EventEntityJobCustomerAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerAddressCityValidation}>
      <Field.Input
        name="event.entity.job.customer.address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EventEntityJobCustomerAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EventEntityJobCustomerAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerAddressCountryValidation}
    >
      <Field.Input
        name="event.entity.job.customer.address.country"
        label="Country"
        placeholder="country"
        validation={EventEntityJobCustomerAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EventEntityJobCustomerAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityJobCustomerAddressCountyValidation}>
      <Field.Input
        name="event.entity.job.customer.address.county"
        label="County / State"
        placeholder="county / state"
        validation={EventEntityJobCustomerAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EventEntityJobCustomerAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerAddressLine1Validation}>
      <Field.Input
        name="event.entity.job.customer.address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={EventEntityJobCustomerAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EventEntityJobCustomerAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerAddressLine2Validation}>
      <Field.Input
        name="event.entity.job.customer.address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={EventEntityJobCustomerAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobCustomerAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.job.customer.address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={EventEntityJobCustomerAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EventEntityJobCustomerAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerAddressPostcodeValidation}
    >
      <Field.Postcode
        name="event.entity.job.customer.address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={EventEntityJobCustomerAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function EventEntityJobCustomerEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerEmailValidation}>
      <Field.Input
        name="event.entity.job.customer.email"
        label="Email"
        placeholder="email"
        validation={EventEntityJobCustomerEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function EventEntityJobCustomerFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerFirstNameValidation}>
      <Field.Input
        name="event.entity.job.customer.first_name"
        label="First Name"
        placeholder="first name"
        validation={EventEntityJobCustomerFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function EventEntityJobCustomerLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerLastNameValidation}>
      <Field.Input
        name="event.entity.job.customer.last_name"
        label="Last Name"
        placeholder="last name"
        validation={EventEntityJobCustomerLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerPhoneValidation = {
  required: { value: true, message: "Phone is required." },
  minLength: { value: 1, message: "Phone requires minimum length of 1" },
};

export function EventEntityJobCustomerPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobCustomerPhoneValidation}>
      <Field.Input
        name="event.entity.job.customer.phone"
        label="Phone Number"
        placeholder="phone number"
        validation={EventEntityJobCustomerPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerOptionsCheckoutOptionValidation = {
  required: { value: true, message: "Checkout Option is required." },
};

export function EventEntityJobCustomerOptionsCheckoutOption(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerOptionsCheckoutOptionValidation}
    >
      <Field.RadioSelect
        name="event.entity.job.customer_options.checkout_option"
        label="Checkout Option"
        placeholder="checkout option picked by customer, updated only via custom action"
        options={[
          { name: "Apply For Finance", value: "apply_for_finance" },
          { name: "Decline Job", value: "decline_job" },
          { name: "Pay On Completion", value: "pay_on_completion" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerOptionsDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobCustomerOptionsDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerOptionsDepositValueAmountValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.job.customer_options.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityJobCustomerOptionsDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerOptionsDepositValueCurrencyValidation = {};

export function EventEntityJobCustomerOptionsDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerOptionsDepositValueCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.job.customer_options.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobCustomerOptionsFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
};

export function EventEntityJobCustomerOptionsFinanceOption(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobCustomerOptionsFinanceOptionValidation}
    >
      <Field.Input
        name="event.entity.job.customer_options.finance_option"
        label="Finance Option Selected By Customer"
        placeholder="finance option"
        validation={EventEntityJobCustomerOptionsFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobDepositTypeValidation = {
  required: { value: true, message: "Deposit Type is required." },
};

export function EventEntityJobDepositType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityJobDepositTypeValidation}>
      <Field.RadioSelect
        name="event.entity.job.deposit_type"
        label="Deposit Type"
        placeholder="deposit type"
        options={[
          { name: "No Deposit", value: "no_deposit" },
          { name: "Partial Deposit", value: "partial_deposit" },
          { name: "Fixed Deposit", value: "fixed_deposit" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EventEntityJobDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="event.entity.job.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityJobDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobDepositValueCurrencyValidation = {};

export function EventEntityJobDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityJobDepositValueCurrencyValidation}>
      <Field.RadioSelect
        name="event.entity.job.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobDescriptionValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function EventEntityJobDescription(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobDescriptionValidation}>
      <Field.Input
        name="event.entity.job.description"
        label="Job Description"
        placeholder="job description"
        validation={EventEntityJobDescriptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobFinanceOptionsValidation = {};

export function EventEntityJobFinanceOptionsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.job.finance_options"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityJobFinanceStatusValidation = {
  disabled: {
    value: true,
    message: "Finance Status input is read only or disabled",
  },
};

export function EventEntityJobFinanceStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobFinanceStatusValidation}>
      <Field.Select
        name="event.entity.job.finance_status"
        label="Finance Status"
        placeholder="finance status"
        options={[
          { name: "Not Applied", value: "not_applied" },
          { name: "Under Review", value: "under_review" },
          { name: "Applied For Finance", value: "applied_for_finance" },
          { name: "Finance Not Approved", value: "finance_not_approved" },
          { name: "Financed", value: "financed" },
          { name: "Sat Note Sent", value: "sat_note_sent" },
          { name: "Sat Note Viewed", value: "sat_note_viewed" },
          { name: "Sat Note Signed", value: "sat_note_signed" },
          { name: "Payout Pending", value: "payout_pending" },
          { name: "Paid", value: "paid" },
          { name: "Finance Cancelled", value: "finance_cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityJobId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobIdValidation}>
      <Field.Input
        name="event.entity.job.id"
        label="Job Id"
        placeholder="job id"
        validation={EventEntityJobIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobJobDocumentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityJobJobDocumentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EventEntityJobJobDocumentsAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityJobJobDocumentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EventEntityJobJobDocumentsCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityJobJobDocumentsContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={EventEntityJobJobDocumentsContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityJobJobDocumentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={EventEntityJobJobDocumentsIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityJobJobDocumentsMetadataCreatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={
          EventEntityJobJobDocumentsMetadataCreatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityJobJobDocumentsMetadataLivenessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={
          EventEntityJobJobDocumentsMetadataLivenessArrayInputValidation
        }
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityJobJobDocumentsMetadataUpdatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={
          EventEntityJobJobDocumentsMetadataUpdatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EventEntityJobJobDocumentsMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={EventEntityJobJobDocumentsMimetypeArrayInputValidation}
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityJobJobDocumentsNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EventEntityJobJobDocumentsNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityJobJobDocumentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EventEntityJobJobDocumentsOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobDocumentsValidation = {};

export function EventEntityJobJobDocumentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.job.job_documents"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityJobJobItemsDescriptionArrayInputValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function EventEntityJobJobItemsDescriptionArrayInput(props: any) {
  return (
    <Field.Array.Input name="description">
      <Field.Validator
        validation={EventEntityJobJobItemsDescriptionArrayInputValidation}
      >
        <Field.Input
          label="Description"
          placeholder="Description"
          label="Job Item Description"
          placeholder="job item description"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsPriceAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobJobItemsPriceAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={EventEntityJobJobItemsPriceAmountArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsPriceCurrencyArraySelectValidation = {};

export function EventEntityJobJobItemsPriceCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={EventEntityJobJobItemsPriceCurrencyArrayInputValidation}
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuantityArrayInputValidation = {
  required: { value: true, message: "Quantity is required." },
  min: { value: 0, message: "Quantity must be great than 0" },
  max: {
    value: 2147483647,
    message: "Quantity must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobJobItemsQuantityArrayInput(props: any) {
  return (
    <Field.Array.Input name="quantity">
      <Field.Validator
        validation={EventEntityJobJobItemsQuantityArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Quantity"
          placeholder="Quantity"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityJobJobItemsQuoteDocumentAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EventEntityJobJobItemsQuoteDocumentAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityJobJobItemsQuoteDocumentCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EventEntityJobJobItemsQuoteDocumentCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityJobJobItemsQuoteDocumentContentArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={
          EventEntityJobJobItemsQuoteDocumentContentArrayInputValidation
        }
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityJobJobItemsQuoteDocumentIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={EventEntityJobJobItemsQuoteDocumentIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentMetadataCreatedAtArrayInputValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EventEntityJobJobItemsQuoteDocumentMetadataCreatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={
          EventEntityJobJobItemsQuoteDocumentMetadataCreatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentMetadataLivenessArrayInputValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EventEntityJobJobItemsQuoteDocumentMetadataLivenessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={
          EventEntityJobJobItemsQuoteDocumentMetadataLivenessArrayInputValidation
        }
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentMetadataUpdatedAtArrayInputValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EventEntityJobJobItemsQuoteDocumentMetadataUpdatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={
          EventEntityJobJobItemsQuoteDocumentMetadataUpdatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EventEntityJobJobItemsQuoteDocumentMimetypeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={
          EventEntityJobJobItemsQuoteDocumentMimetypeArrayInputValidation
        }
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityJobJobItemsQuoteDocumentNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EventEntityJobJobItemsQuoteDocumentNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsQuoteDocumentOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityJobJobItemsQuoteDocumentOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EventEntityJobJobItemsQuoteDocumentOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsStyleArraySelectValidation = {
  disabled: { value: true, message: "Style input is read only or disabled" },
};

export function EventEntityJobJobItemsStyleArraySelect(props: any) {
  return (
    <Field.Array.Input name="style">
      <Field.Validator
        validation={EventEntityJobJobItemsStyleArrayInputValidation}
      >
        <Field.RadioSelect
          label="Style"
          placeholder="Style"
          label="Style"
          placeholder="style"
          options={[
            { name: "Kanda", value: "kanda" },
            { name: "Custom", value: "custom" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsTitleArrayInputValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function EventEntityJobJobItemsTitleArrayInput(props: any) {
  return (
    <Field.Array.Input name="title">
      <Field.Validator
        validation={EventEntityJobJobItemsTitleArrayInputValidation}
      >
        <Field.Input
          label="Title"
          placeholder="Title"
          label="Job Item Title"
          placeholder="job item title"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsVatAmountArrayInputValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobJobItemsVatAmountArrayInput(props: any) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={EventEntityJobJobItemsVatAmountArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsVatCurrencyArraySelectValidation = {};

export function EventEntityJobJobItemsVatCurrencyArraySelect(props: any) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={EventEntityJobJobItemsVatCurrencyArrayInputValidation}
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsVatRateArraySelectValidation = {};

export function EventEntityJobJobItemsVatRateArraySelect(props: any) {
  return (
    <Field.Array.Input name="vat_rate">
      <Field.Validator
        validation={EventEntityJobJobItemsVatRateArrayInputValidation}
      >
        <Field.Select
          label="Vat Rate"
          placeholder="Vat Rate"
          label="Vat Applicable Rate"
          placeholder="vat applicable rate"
          options={[
            { name: "Vat Not Set", value: "vat_not_set" },
            { name: "Exempted", value: "exempted" },
            { name: "0%", value: "0%" },
            { name: "5%", value: "5%" },
            { name: "20%", value: "20%" },
            { name: "Custom", value: "custom" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobJobItemsValidation = {
  required: { value: true, message: "Job Items is required." },
  minLength: { value: 1, message: "Job Items requires minimum length of 1" },
};

export function EventEntityJobJobItemsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.job.job_items"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityJobJobTypeValidation = {};

export function EventEntityJobJobType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityJobJobTypeValidation}>
      <Field.RadioSelect
        name="event.entity.job.job_type"
        label="Job Type"
        placeholder="job type"
        options={[
          { name: "Standard", value: "standard" },
          { name: "Solar", value: "solar" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityJobMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobMetadataCreatedAtValidation}>
      <Field.Input
        name="event.entity.job.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityJobMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityJobMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EventEntityJobMetadataLivenessValidation}>
      <Field.BooleanInput
        name="event.entity.job.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityJobMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityJobMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobMetadataUpdatedAtValidation}>
      <Field.Input
        name="event.entity.job.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityJobMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobNotesValidation = {};

export function EventEntityJobNotesArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.job.notes"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityJobOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityJobOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobOidValidation}>
      <Field.Input
        name="event.entity.job.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityJobOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobPaymentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityJobPaymentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EventEntityJobPaymentsAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityJobPaymentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EventEntityJobPaymentsCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityJobPaymentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={EventEntityJobPaymentsIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Payment Id"
          placeholder="payment id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsKidArrayInputValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function EventEntityJobPaymentsKidArrayInput(props: any) {
  return (
    <Field.Array.Input name="kid">
      <Field.Validator
        validation={EventEntityJobPaymentsKidArrayInputValidation}
      >
        <Field.Input
          label="Kid"
          placeholder="Kid"
          label="Internal Kind Id"
          placeholder="internal kind id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsKindArraySelectValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function EventEntityJobPaymentsKindArraySelect(props: any) {
  return (
    <Field.Array.Input name="kind">
      <Field.Validator
        validation={EventEntityJobPaymentsKindArrayInputValidation}
      >
        <Field.RadioSelect
          label="Kind"
          placeholder="Kind"
          label="Internal Kind"
          placeholder="internal kind"
          options={[
            { name: "Job", value: "job" },
            { name: "Charge", value: "charge" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsMetadataCreatedAtArrayInputValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityJobPaymentsMetadataCreatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={EventEntityJobPaymentsMetadataCreatedAtArrayInputValidation}
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsMetadataLivenessArrayInputValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityJobPaymentsMetadataLivenessArrayInput(props: any) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={EventEntityJobPaymentsMetadataLivenessArrayInputValidation}
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsMetadataUpdatedAtArrayInputValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityJobPaymentsMetadataUpdatedAtArrayInput(props: any) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={EventEntityJobPaymentsMetadataUpdatedAtArrayInputValidation}
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityJobPaymentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EventEntityJobPaymentsOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsPaymentOptionAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityJobPaymentsPaymentOptionAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EventEntityJobPaymentsPaymentOptionAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsPaymentOptionAmountCurrencyArraySelectValidation =
  {};

export function EventEntityJobPaymentsPaymentOptionAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EventEntityJobPaymentsPaymentOptionAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsPaymentOptionPaymentMethodArraySelectValidation =
  { required: { value: true, message: "Payment Method is required." } };

export function EventEntityJobPaymentsPaymentOptionPaymentMethodArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="payment_method">
      <Field.Validator
        validation={
          EventEntityJobPaymentsPaymentOptionPaymentMethodArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Payment Method"
          placeholder="Payment Method"
          label="Payment Method"
          placeholder="payment method"
          options={[
            { name: "Cash", value: "cash" },
            { name: "Card", value: "card" },
            { name: "Loan", value: "loan" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsStatusArraySelectValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function EventEntityJobPaymentsStatusArraySelect(props: any) {
  return (
    <Field.Array.Input name="status">
      <Field.Validator
        validation={EventEntityJobPaymentsStatusArrayInputValidation}
      >
        <Field.Select
          label="Status"
          placeholder="Status"
          label="Payment Status"
          placeholder="payment status"
          options={[
            { name: "Unpaid", value: "unpaid" },
            { name: "Pending", value: "pending" },
            { name: "Paid", value: "paid" },
            { name: "Disputed", value: "disputed" },
            { name: "Cancelled", value: "cancelled" },
            { name: "Refunded", value: "refunded" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsXidArrayInputValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EventEntityJobPaymentsXidArrayInput(props: any) {
  return (
    <Field.Array.Input name="xid">
      <Field.Validator
        validation={EventEntityJobPaymentsXidArrayInputValidation}
      >
        <Field.Input
          label="Xid"
          placeholder="Xid"
          label="External Reference Id"
          placeholder="external reference id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsXrefArrayInputValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EventEntityJobPaymentsXrefArrayInput(props: any) {
  return (
    <Field.Array.Input name="xref">
      <Field.Validator
        validation={EventEntityJobPaymentsXrefArrayInputValidation}
      >
        <Field.Input
          label="Xref"
          placeholder="Xref"
          label="External Reference"
          placeholder="external reference"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityJobPaymentsValidation = {
  disabled: { value: true, message: "Payments input is read only or disabled" },
};

export function EventEntityJobPaymentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.job.payments"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityJobSatNoteCertificateAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityJobSatNoteCertificateAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityJobSatNoteCertificateAidValidation}>
      <Field.Input
        name="event.entity.job.sat_note.certificate.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityJobSatNoteCertificateAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityJobSatNoteCertificateCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityJobSatNoteCertificateCidValidation}>
      <Field.Input
        name="event.entity.job.sat_note.certificate.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityJobSatNoteCertificateCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityJobSatNoteCertificateContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteCertificateContentValidation}
    >
      <Field.File
        name="event.entity.job.sat_note.certificate.content"
        label="Document Content"
        placeholder="document content"
        validation={EventEntityJobSatNoteCertificateContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityJobSatNoteCertificateId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobSatNoteCertificateIdValidation}>
      <Field.Input
        name="event.entity.job.sat_note.certificate.id"
        label="Document Id"
        placeholder="document id"
        validation={EventEntityJobSatNoteCertificateIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityJobSatNoteCertificateMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteCertificateMetadataCreatedAtValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note.certificate.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityJobSatNoteCertificateMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityJobSatNoteCertificateMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteCertificateMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="event.entity.job.sat_note.certificate.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityJobSatNoteCertificateMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityJobSatNoteCertificateMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteCertificateMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note.certificate.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityJobSatNoteCertificateMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EventEntityJobSatNoteCertificateMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteCertificateMimetypeValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note.certificate.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EventEntityJobSatNoteCertificateMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityJobSatNoteCertificateName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteCertificateNameValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note.certificate.name"
        label="Document Name"
        placeholder="document name"
        validation={EventEntityJobSatNoteCertificateNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteCertificateOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityJobSatNoteCertificateOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityJobSatNoteCertificateOidValidation}>
      <Field.Input
        name="event.entity.job.sat_note.certificate.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityJobSatNoteCertificateOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteQAdviceValidation = {
  required: { value: true, message: "Q Advice is required." },
};

export function EventEntityJobSatNoteQAdvice(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobSatNoteQAdviceValidation}>
      <Field.Select
        name="event.entity.job.sat_note.q_advice"
        label="What Advice Did The Installer Give You On Your Finance Application?"
        placeholder="What advice did the installer give you on your finance application?"
        options={[
          {
            name: "They Just Sent Me A Link To Apply",
            value: "They just sent me a link to apply",
          },
          {
            name: "They Told Me What Rates Where Available",
            value: "They told me what rates where available",
          },
          {
            name: "They Helped Me Work Out My Potential Repayments",
            value: "They helped me work out my potential repayments",
          },
          {
            name: "They Completed The Application For Me",
            value: "They completed the application for me",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteQApplicationValidation = {
  required: { value: true, message: "Q Application is required." },
};

export function EventEntityJobSatNoteQApplication(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobSatNoteQApplicationValidation}>
      <Field.Select
        name="event.entity.job.sat_note.q_application"
        label="Who Completed Your Application For Finance?"
        placeholder="Who completed your application for finance?"
        options={[
          {
            name: "I Completed The Application Myself",
            value: "I completed the application myself",
          },
          {
            name: "Someone Completed The Appliation On My Behalf",
            value: "Someone completed the appliation on my behalf",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteQAvailabilityValidation = {
  required: { value: true, message: "Q Availability is required." },
};

export function EventEntityJobSatNoteQAvailability(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobSatNoteQAvailabilityValidation}>
      <Field.Select
        name="event.entity.job.sat_note.q_availability"
        label="How Did You First Become Aware That Finance Was Available?"
        placeholder="How did you first become aware that finance was available?"
        options={[
          {
            name: "The Installer Told Me When Quoting Me",
            value: "The installer told me when quoting me",
          },
          {
            name: "I Saw It Advertised By The Installer",
            value: "I saw it advertised by the installer",
          },
          {
            name: "I Found Out When The Installer Sent Me A Link Via Kanda",
            value: "I found out when the installer sent me a link via Kanda",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteQEasinessValidation = {
  required: { value: true, message: "Q Easiness is required." },
};

export function EventEntityJobSatNoteQEasiness(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobSatNoteQEasinessValidation}>
      <Field.Select
        name="event.entity.job.sat_note.q_easiness"
        label="Do You Find It Hard To Apply For Finance With Kanda?"
        placeholder="Do you find it hard to apply for finance with Kanda?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteQPressureValidation = {
  required: { value: true, message: "Q Pressure is required." },
};

export function EventEntityJobSatNoteQPressure(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobSatNoteQPressureValidation}>
      <Field.Select
        name="event.entity.job.sat_note.q_pressure"
        label="Did The Installer Pressure You To Apply For Finance?"
        placeholder="Did the installer pressure you to apply for finance?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteQSavingValidation = {};

export function EventEntityJobSatNoteQSaving(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityJobSatNoteQSavingValidation}>
      <Field.RadioSelect
        name="event.entity.job.sat_note.q_saving"
        label="Were You Told About Any Potential Feed In Tariffs, Savings, Returns Or Renewable Heat Incentive And Do You Understand That The Actual Amounts  You  Receive, And Your Estimated Returns/Savings Were Based On Varying Factors Including You Own Energy Consumption And Any Returns/Savings/Payback Periods Are Not Linked To Your Repayments On This Agreement."
        placeholder="Were you told about any potential feed in tariffs, savings, returns or Renewable Heat incentive and do you understand that the actual amounts  you  receive, and your estimated returns/savings were based on varying factors including you own energy consumption and any returns/savings/payback periods are not linked to your repayments on this agreement."
        options={[
          { name: "Yes I Understand", value: "Yes I understand" },
          { name: "No I Don'T Understand", value: "No I don't understand" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function EventEntityJobSatNoteSignatureFingerprint(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteSignatureFingerprintValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={EventEntityJobSatNoteSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function EventEntityJobSatNoteSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteSignatureSignedValidation}
    >
      <Field.RadioSelect
        name="event.entity.job.sat_note.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteTimelineSentAtValidation = {
  disabled: { value: true, message: "Sent At input is read only or disabled" },
};

export function EventEntityJobSatNoteTimelineSentAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityJobSatNoteTimelineSentAtValidation}>
      <Field.Input
        name="event.entity.job.sat_note_timeline.sent_at"
        label="Timestamp Sat Note Is Sent"
        placeholder="timestamp sat note is sent"
        validation={EventEntityJobSatNoteTimelineSentAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteTimelineSignedAtValidation = {
  disabled: {
    value: true,
    message: "Signed At input is read only or disabled",
  },
};

export function EventEntityJobSatNoteTimelineSignedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteTimelineSignedAtValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note_timeline.signed_at"
        label="Timestamp Sat Note Is Signed"
        placeholder="timestamp sat note is signed"
        validation={EventEntityJobSatNoteTimelineSignedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobSatNoteTimelineViewedAtValidation = {
  disabled: {
    value: true,
    message: "Viewed At input is read only or disabled",
  },
};

export function EventEntityJobSatNoteTimelineViewedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobSatNoteTimelineViewedAtValidation}
    >
      <Field.Input
        name="event.entity.job.sat_note_timeline.viewed_at"
        label="Timestamp Sat Note Is Viewed"
        placeholder="timestamp sat note is viewed"
        validation={EventEntityJobSatNoteTimelineViewedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobStatusValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function EventEntityJobStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityJobStatusValidation}>
      <Field.Select
        name="event.entity.job.status"
        label="Job Status"
        placeholder="job status"
        options={[
          { name: "Draft", value: "draft" },
          { name: "Sent", value: "sent" },
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Finished", value: "finished" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTitleValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function EventEntityJobTitle(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityJobTitleValidation}>
      <Field.Input
        name="event.entity.job.title"
        label="Job Title"
        placeholder="job title"
        validation={EventEntityJobTitleValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTotalAmountVatAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobTotalAmountVatAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EventEntityJobTotalAmountVatAmountValidation}>
      <Field.NumberFormatInput
        name="event.entity.job.total.amount_vat.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityJobTotalAmountVatAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTotalAmountVatCurrencyValidation = {};

export function EventEntityJobTotalAmountVatCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityJobTotalAmountVatCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.job.total.amount_vat.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTotalAmountVatExclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobTotalAmountVatExclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobTotalAmountVatExclusiveAmountValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.job.total.amount_vat_exclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityJobTotalAmountVatExclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTotalAmountVatExclusiveCurrencyValidation = {};

export function EventEntityJobTotalAmountVatExclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityJobTotalAmountVatExclusiveCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.job.total.amount_vat_exclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTotalAmountVatInclusiveAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityJobTotalAmountVatInclusiveAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityJobTotalAmountVatInclusiveAmountValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.job.total.amount_vat_inclusive.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityJobTotalAmountVatInclusiveAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityJobTotalAmountVatInclusiveCurrencyValidation = {};

export function EventEntityJobTotalAmountVatInclusiveCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityJobTotalAmountVatInclusiveCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.job.total.amount_vat_inclusive.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityCompanyAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyAidValidation}>
      <Field.Input
        name="event.entity.company.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityCompanyAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyAvailableRatesEnabledArrayInputValidation = {
  required: { value: true, message: "Enabled is required." },
};

export function EventEntityCompanyAvailableRatesEnabledArrayInput(props: any) {
  return (
    <Field.Array.Input name="enabled">
      <Field.Validator
        validation={EventEntityCompanyAvailableRatesEnabledArrayInputValidation}
      >
        <Field.BooleanInput
          label="Enabled"
          placeholder="Enabled"
          label="Enabled?"
          placeholder="enabled?"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyAvailableRatesFeeArrayInputValidation = {
  required: { value: true, message: "Fee is required." },
  min: { value: 0, message: "Fee must be great than 0" },
  max: {
    value: 2147483647,
    message: "Fee must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCompanyAvailableRatesFeeArrayInput(props: any) {
  return (
    <Field.Array.Input name="fee">
      <Field.Validator
        validation={EventEntityCompanyAvailableRatesFeeArrayInputValidation}
      >
        <Field.NumberFormatInput
          label="Fee"
          placeholder="Fee"
          label="Fee"
          placeholder="fee"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyAvailableRatesNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityCompanyAvailableRatesNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EventEntityCompanyAvailableRatesNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Name"
          placeholder="name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyAvailableRatesValidation = {};

export function EventEntityCompanyAvailableRatesArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.company.available_rates"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCompanyBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function EventEntityCompanyBankAccountAccountName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyBankAccountAccountNameValidation}
    >
      <Field.Input
        name="event.entity.company.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={EventEntityCompanyBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function EventEntityCompanyBankAccountAccountNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyBankAccountAccountNumberValidation}
    >
      <Field.Input
        name="event.entity.company.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={EventEntityCompanyBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCompanyBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyBankAccountMonthsHeldValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.company.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={EventEntityCompanyBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function EventEntityCompanyBankAccountSortCode(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyBankAccountSortCodeValidation}
    >
      <Field.Input
        name="event.entity.company.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={EventEntityCompanyBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyBillingValidation = {
  disabled: { value: true, message: "Billing input is read only or disabled" },
};

export function EventEntityCompanyBilling(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityCompanyBillingValidation}>
      <Field.Select
        name="event.entity.company.billing"
        label="Company Billing"
        placeholder="company billing"
        options={[
          { name: "Legacy", value: "legacy" },
          { name: "Trial", value: "trial" },
          { name: "Pending", value: "pending" },
          { name: "Referred", value: "referred" },
          { name: "Subscribed", value: "subscribed" },
          {
            name: "Recurring Payment Failed 1",
            value: "recurring_payment_failed_1",
          },
          {
            name: "Recurring Payment Failed 2",
            value: "recurring_payment_failed_2",
          },
          {
            name: "Recurring Payment Failed 3",
            value: "recurring_payment_failed_3",
          },
          { name: "Suspended", value: "suspended" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityCompanyCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyCidValidation}>
      <Field.Input
        name="event.entity.company.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityCompanyCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoAverageJobValueValidation = {
  required: { value: true, message: "Average Job Value is required." },
  min: { value: 0, message: "Average Job Value must be great than 0" },
  max: {
    value: 2147483647,
    message: "Average Job Value must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCompanyCompanyInfoAverageJobValue(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoAverageJobValueValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.company.company_info.average_job_value"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityCompanyCompanyInfoAverageJobValueValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoAverageMonthlyJobsValidation = {
  required: { value: true, message: "Average Monthly Jobs is required." },
  min: { value: 1, message: "Average Monthly Jobs must be great than 1" },
  max: {
    value: 2147483647,
    message: "Average Monthly Jobs must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCompanyCompanyInfoAverageMonthlyJobs(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoAverageMonthlyJobsValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.company.company_info.average_monthly_jobs"
        label="Average Monthly Jobs"
        placeholder="average monthly jobs"
        validation={EventEntityCompanyCompanyInfoAverageMonthlyJobsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditionsValidation =
  {};

export function EventEntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditions(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditionsValidation
      }
    >
      <Field.RadioSelect
        name="event.entity.company.company_info.contract_agreement.agreed_terms_and_conditions"
        label="Agreed Terms And Conditions"
        placeholder="agreed terms and conditions"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation =
  {};

export function EventEntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKanda(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKandaValidation
      }
    >
      <Field.RadioSelect
        name="event.entity.company.company_info.contract_agreement.agreed_to_become_iar_of_kanda"
        label="Agreed To Become IAR Of Kanda"
        placeholder="agreed to become IAR of Kanda"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractAidValidation =
  { disabled: { value: true, message: "Aid input is read only or disabled" } };

export function EventEntityCompanyCompanyInfoContractAgreementContractAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractAidValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.aid"
        label="Author Id"
        placeholder="author id"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractAidValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractCidValidation =
  { disabled: { value: true, message: "Cid input is read only or disabled" } };

export function EventEntityCompanyCompanyInfoContractAgreementContractCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractCidValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.cid"
        label="Company Id"
        placeholder="company id"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractCidValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractContentValidation =
  {
    maxLength: {
      value: 1048487,
      message: "Content requires maximum length of 1048487",
    },
  };

export function EventEntityCompanyCompanyInfoContractAgreementContractContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractContentValidation
      }
    >
      <Field.File
        name="event.entity.company.company_info.contract_agreement.contract.content"
        label="Document Content"
        placeholder="document content"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractContentValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractIdValidation =
  { disabled: { value: true, message: "Id input is read only or disabled" } };

export function EventEntityCompanyCompanyInfoContractAgreementContractId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractIdValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.id"
        label="Document Id"
        placeholder="document id"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractIdValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractMetadataLivenessValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoContractAgreementContractMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractMetadataLivenessValidation
      }
    >
      <Field.BooleanInput
        name="event.entity.company.company_info.contract_agreement.contract.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractMimetypeValidation =
  {
    disabled: {
      value: true,
      message: "Mimetype input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoContractAgreementContractMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractMimetypeValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractMimetypeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractNameValidation =
  {
    required: { value: true, message: "Name is required." },
    minLength: { value: 1, message: "Name requires minimum length of 1" },
  };

export function EventEntityCompanyCompanyInfoContractAgreementContractName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractNameValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.name"
        label="Document Name"
        placeholder="document name"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementContractOidValidation =
  { disabled: { value: true, message: "Oid input is read only or disabled" } };

export function EventEntityCompanyCompanyInfoContractAgreementContractOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementContractOidValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.contract.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementContractOidValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementPrintNameValidation =
  {
    minLength: { value: 1, message: "Print Name requires minimum length of 1" },
  };

export function EventEntityCompanyCompanyInfoContractAgreementPrintName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementPrintNameValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.print_name"
        label="Print Name"
        placeholder="print name"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementPrintNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoContractAgreementSignedAtValidation =
  {
    disabled: {
      value: true,
      message: "Signed At input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoContractAgreementSignedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoContractAgreementSignedAtValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.contract_agreement.signed_at"
        label="Signed At"
        placeholder="signed at"
        validation={
          EventEntityCompanyCompanyInfoContractAgreementSignedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityCompanyCompanyInfoInsuranceDocumentAid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoInsuranceDocumentAidValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityCompanyCompanyInfoInsuranceDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityCompanyCompanyInfoInsuranceDocumentCid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoInsuranceDocumentCidValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityCompanyCompanyInfoInsuranceDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityCompanyCompanyInfoInsuranceDocumentContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoInsuranceDocumentContentValidation
      }
    >
      <Field.File
        name="event.entity.company.company_info.insurance_document.content"
        label="Document Content"
        placeholder="document content"
        validation={
          EventEntityCompanyCompanyInfoInsuranceDocumentContentValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityCompanyCompanyInfoInsuranceDocumentId(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoInsuranceDocumentIdValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.id"
        label="Document Id"
        placeholder="document id"
        validation={EventEntityCompanyCompanyInfoInsuranceDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={
          EventEntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoInsuranceDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation
      }
    >
      <Field.BooleanInput
        name="event.entity.company.company_info.insurance_document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={
          EventEntityCompanyCompanyInfoInsuranceDocumentMetadataLivenessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={
          EventEntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAtValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentMimetypeValidation =
  {
    disabled: {
      value: true,
      message: "Mimetype input is read only or disabled",
    },
  };

export function EventEntityCompanyCompanyInfoInsuranceDocumentMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyCompanyInfoInsuranceDocumentMimetypeValidation
      }
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={
          EventEntityCompanyCompanyInfoInsuranceDocumentMimetypeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityCompanyCompanyInfoInsuranceDocumentName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoInsuranceDocumentNameValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.name"
        label="Document Name"
        placeholder="document name"
        validation={
          EventEntityCompanyCompanyInfoInsuranceDocumentNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoInsuranceDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityCompanyCompanyInfoInsuranceDocumentOid(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoInsuranceDocumentOidValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.insurance_document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityCompanyCompanyInfoInsuranceDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoTradeBodyNameValidation = {
  required: { value: true, message: "Trade Body Name is required." },
  minLength: {
    value: 1,
    message: "Trade Body Name requires minimum length of 1",
  },
};

export function EventEntityCompanyCompanyInfoTradeBodyName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoTradeBodyNameValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.trade_body_name"
        label="Trade Body Name"
        placeholder="trade body name"
        validation={EventEntityCompanyCompanyInfoTradeBodyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoTradeBodyNumberValidation = {
  minLength: {
    value: 1,
    message: "Trade Body Number requires minimum length of 1",
  },
};

export function EventEntityCompanyCompanyInfoTradeBodyNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoTradeBodyNumberValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.trade_body_number"
        label="Trade Body Number"
        placeholder="trade body number"
        validation={EventEntityCompanyCompanyInfoTradeBodyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoTradeBodyValidation = {
  required: { value: true, message: "Trade Body is required." },
};

export function EventEntityCompanyCompanyInfoTradeBody(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoTradeBodyValidation}
    >
      <Field.Select
        name="event.entity.company.company_info.trade_body"
        label="Trade Body"
        placeholder="trade body"
        options={[
          { name: "None", value: "none" },
          { name: "Acrib", value: "acrib" },
          { name: "Aphc", value: "aphc" },
          { name: "Assure", value: "assure" },
          { name: "Certass", value: "certass" },
          { name: "Elecsa", value: "elecsa" },
          { name: "Fensa", value: "fensa" },
          { name: "Feta", value: "feta" },
          { name: "Gas Safe", value: "gas_safe" },
          { name: "Hetas", value: "hetas" },
          { name: "Napit", value: "napit" },
          { name: "Nfrc", value: "nfrc" },
          { name: "Niceic", value: "niceic" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoTradeTypeNameValidation = {
  required: { value: true, message: "Trade Type Name is required." },
  minLength: {
    value: 1,
    message: "Trade Type Name requires minimum length of 1",
  },
};

export function EventEntityCompanyCompanyInfoTradeTypeName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoTradeTypeNameValidation}
    >
      <Field.Input
        name="event.entity.company.company_info.trade_type_name"
        label="Trade Type Name"
        placeholder="trade type name"
        validation={EventEntityCompanyCompanyInfoTradeTypeNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoTradeTypeValidation = {
  required: { value: true, message: "Trade Type is required." },
};

export function EventEntityCompanyCompanyInfoTradeType(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoTradeTypeValidation}
    >
      <Field.Select
        name="event.entity.company.company_info.trade_type"
        label="Trade Type"
        placeholder="trade type"
        options={[
          { name: "Air Conditioning", value: "air_conditioning" },
          { name: "Bathrooms", value: "bathrooms" },
          { name: "Battery Storage", value: "battery_storage" },
          { name: "Blinds And Shutters", value: "blinds_and_shutters" },
          { name: "Carpentry", value: "carpentry" },
          {
            name: "Cctv And Security Installations",
            value: "cctv_and_security_installations",
          },
          { name: "Conservatories", value: "conservatories" },
          { name: "Decking", value: "decking" },
          { name: "Driveways And Patios", value: "driveways_and_patios" },
          { name: "Electrician", value: "electrician" },
          { name: "Ev Charger Installer", value: "ev_charger_installer" },
          { name: "Fencing", value: "fencing" },
          { name: "Fireplaces", value: "fireplaces" },
          {
            name: "Fitted Bedroom Furniture",
            value: "fitted_bedroom_furniture",
          },
          { name: "Floor Layer", value: "floor_layer" },
          { name: "Garage Doors", value: "garage_doors" },
          { name: "Garden Rooms", value: "garden_rooms" },
          { name: "Gas Engineer", value: "gas_engineer" },
          { name: "Gates", value: "gates" },
          { name: "Heat Pumps", value: "heat_pumps" },
          { name: "Heating Systems", value: "heating_systems" },
          { name: "Kitchen Fitter", value: "kitchen_fitter" },
          { name: "Landscaping", value: "landscaping" },
          { name: "Plumbing", value: "plumbing" },
          { name: "Resin Driveways", value: "resin_driveways" },
          {
            name: "Roofing  Excluding Flat Roofs",
            value: "roofing__excluding_flat_roofs",
          },
          { name: "Security Systems", value: "security_systems" },
          { name: "Tiler", value: "tiler" },
          { name: "Verandas", value: "verandas" },
          { name: "Windows And Doors", value: "windows_and_doors" },
          { name: "Multi Trade", value: "multi_trade" },
          { name: "Other Trade", value: "other_trade" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoUseSubcontractorValidation = {
  required: { value: true, message: "Use Subcontractor is required." },
};

export function EventEntityCompanyCompanyInfoUseSubcontractor(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoUseSubcontractorValidation}
    >
      <Field.Select
        name="event.entity.company.company_info.use_subcontractor"
        label="Use Subcontractor?"
        placeholder="use subcontractor?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyInfoWarrantyLengthValidation = {
  required: { value: true, message: "Warranty Length is required." },
  min: { value: 1, message: "Warranty Length must be great than 1" },
};

export function EventEntityCompanyCompanyInfoWarrantyLength(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyInfoWarrantyLengthValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.company.company_info.warranty_length"
        label="Warranty Length"
        placeholder="warranty length"
        validation={EventEntityCompanyCompanyInfoWarrantyLengthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityCompanyCompanyLogoAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyCompanyLogoAidValidation}>
      <Field.Input
        name="event.entity.company.company_logo.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityCompanyCompanyLogoAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityCompanyCompanyLogoCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyCompanyLogoCidValidation}>
      <Field.Input
        name="event.entity.company.company_logo.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityCompanyCompanyLogoCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityCompanyCompanyLogoContent(
  props: FieldProps["File"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyLogoContentValidation}
    >
      <Field.File
        name="event.entity.company.company_logo.content"
        label="Document Content"
        placeholder="document content"
        validation={EventEntityCompanyCompanyLogoContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityCompanyCompanyLogoId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyCompanyLogoIdValidation}>
      <Field.Input
        name="event.entity.company.company_logo.id"
        label="Document Id"
        placeholder="document id"
        validation={EventEntityCompanyCompanyLogoIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityCompanyCompanyLogoMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyLogoMetadataCreatedAtValidation}
    >
      <Field.Input
        name="event.entity.company.company_logo.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityCompanyCompanyLogoMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityCompanyCompanyLogoMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyLogoMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="event.entity.company.company_logo.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityCompanyCompanyLogoMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityCompanyCompanyLogoMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyLogoMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="event.entity.company.company_logo.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityCompanyCompanyLogoMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EventEntityCompanyCompanyLogoMimetype(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyCompanyLogoMimetypeValidation}
    >
      <Field.Input
        name="event.entity.company.company_logo.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EventEntityCompanyCompanyLogoMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityCompanyCompanyLogoName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyCompanyLogoNameValidation}>
      <Field.Input
        name="event.entity.company.company_logo.name"
        label="Document Name"
        placeholder="document name"
        validation={EventEntityCompanyCompanyLogoNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyLogoOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityCompanyCompanyLogoOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyCompanyLogoOidValidation}>
      <Field.Input
        name="event.entity.company.company_logo.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityCompanyCompanyLogoOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyCompanyTypeValidation = {
  required: { value: true, message: "Company Type is required." },
};

export function EventEntityCompanyCompanyType(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCompanyCompanyTypeValidation}>
      <Field.RadioSelect
        name="event.entity.company.company_type"
        label="Company Type"
        placeholder="company type"
        options={[
          { name: "Limited Company", value: "limited_company" },
          { name: "Sole Trader", value: "sole_trader" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCompanyContactInfoContactAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyContactInfoContactAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCompanyContactInfoContactAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCompanyContactInfoContactAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyContactInfoContactAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCompanyContactInfoContactAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EventEntityCompanyContactInfoContactAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactAddressCityValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={EventEntityCompanyContactInfoContactAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EventEntityCompanyContactInfoContactAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactAddressCountryValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCompanyContactInfoContactAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EventEntityCompanyContactInfoContactAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactAddressCountyValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.county"
        label="County / State"
        placeholder="county / state"
        validation={EventEntityCompanyContactInfoContactAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EventEntityCompanyContactInfoContactAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactAddressLine1Validation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={EventEntityCompanyContactInfoContactAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EventEntityCompanyContactInfoContactAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactAddressLine2Validation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={EventEntityCompanyContactInfoContactAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCompanyContactInfoContactAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyContactInfoContactAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.company.contact_info.contact_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCompanyContactInfoContactAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function EventEntityCompanyContactInfoContactAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactAddressPostcodeValidation}
    >
      <Field.Postcode
        name="event.entity.company.contact_info.contact_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCompanyContactInfoContactAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactEmailValidation = {};

export function EventEntityCompanyContactInfoContactEmail(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactEmailValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_email"
        label="Contact Email"
        placeholder="contact email"
        validation={EventEntityCompanyContactInfoContactEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactNameValidation = {};

export function EventEntityCompanyContactInfoContactName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactNameValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_name"
        label="Contact Name"
        placeholder="contact name"
        validation={EventEntityCompanyContactInfoContactNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoContactPhoneValidation = {};

export function EventEntityCompanyContactInfoContactPhone(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoContactPhoneValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.contact_phone"
        label="Contact Phone Number"
        placeholder="contact phone number"
        validation={EventEntityCompanyContactInfoContactPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyContactInfoTradingNameValidation = {};

export function EventEntityCompanyContactInfoTradingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyContactInfoTradingNameValidation}
    >
      <Field.Input
        name="event.entity.company.contact_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={EventEntityCompanyContactInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyEmailsValidation = {
  disabled: { value: true, message: "Emails input is read only or disabled" },
};

export function EventEntityCompanyEmailsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.company.emails"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCompanyIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityCompanyId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyIdValidation}>
      <Field.Input
        name="event.entity.company.id"
        label="Company Unique Id"
        placeholder="company unique id"
        validation={EventEntityCompanyIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLifecycleValidation = {
  disabled: {
    value: true,
    message: "Lifecycle input is read only or disabled",
  },
};

export function EventEntityCompanyLifecycle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityCompanyLifecycleValidation}>
      <Field.Select
        name="event.entity.company.lifecycle"
        label="Company Lifecycle State"
        placeholder="company lifecycle state"
        options={[
          { name: "Registered", value: "registered" },
          { name: "Subscribed", value: "subscribed" },
          { name: "Director Info Provided", value: "director_info_provided" },
          { name: "Onboarded", value: "onboarded" },
          { name: "Insurance Uploaded", value: "insurance_uploaded" },
          { name: "Completed Setup", value: "completed_setup" },
          { name: "Verified", value: "verified" },
          { name: "Declined", value: "declined" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressCityValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressCityValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressCountryValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressCountyValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressLine1Validation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressLine2Validation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.company.limited_company_info.company_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoCompanyAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoCompanyAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.company.limited_company_info.company_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCompanyLimitedCompanyInfoCompanyAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyNameValidation = {
  required: { value: true, message: "Company Name is required." },
  minLength: { value: 1, message: "Company Name requires minimum length of 1" },
};

export function EventEntityCompanyLimitedCompanyInfoCompanyName(
  props: FieldProps["Company"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyLimitedCompanyInfoCompanyNameValidation}
    >
      <Field.Company
        name="event.entity.company.limited_company_info.company_name"
        label="Company Name"
        placeholder="company name"
        validation={EventEntityCompanyLimitedCompanyInfoCompanyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoCompanyNumberValidation = {
  required: { value: true, message: "Company Number is required." },
  minLength: {
    value: 1,
    message: "Company Number requires minimum length of 1",
  },
};

export function EventEntityCompanyLimitedCompanyInfoCompanyNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyLimitedCompanyInfoCompanyNumberValidation}
    >
      <Field.Input
        name="event.entity.company.limited_company_info.company_number"
        label="Company Number"
        placeholder="company number"
        validation={EventEntityCompanyLimitedCompanyInfoCompanyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressCityValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressCityValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressCountryValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressCountyValidation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressLine1Validation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressLine2Validation
      }
    >
      <Field.Input
        name="event.entity.company.limited_company_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.company.limited_company_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoTradingAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCompanyLimitedCompanyInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanyLimitedCompanyInfoTradingAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.company.limited_company_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCompanyLimitedCompanyInfoTradingAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyLimitedCompanyInfoVatNumberValidation = {
  minLength: { value: 1, message: "Vat Number requires minimum length of 1" },
  pattern: {
    value: /^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/,
    message: "Vat Number input is invalid",
  },
};

export function EventEntityCompanyLimitedCompanyInfoVatNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanyLimitedCompanyInfoVatNumberValidation}
    >
      <Field.Input
        name="event.entity.company.limited_company_info.vat_number"
        label="Vat Number"
        placeholder="vat number"
        validation={EventEntityCompanyLimitedCompanyInfoVatNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityCompanyMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityCompanyMetadataCreatedAtValidation}>
      <Field.Input
        name="event.entity.company.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityCompanyMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityCompanyMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EventEntityCompanyMetadataLivenessValidation}>
      <Field.BooleanInput
        name="event.entity.company.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityCompanyMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityCompanyMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityCompanyMetadataUpdatedAtValidation}>
      <Field.Input
        name="event.entity.company.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityCompanyMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityCompanyOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyOidValidation}>
      <Field.Input
        name="event.entity.company.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityCompanyOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyQuotePreferenceValidation = {};

export function EventEntityCompanyQuotePreference(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCompanyQuotePreferenceValidation}>
      <Field.RadioSelect
        name="event.entity.company.quote_preference"
        label="Quote Preference"
        placeholder="quote preference"
        options={[
          { name: "No Preference", value: "no_preference" },
          { name: "Kanda", value: "kanda" },
          { name: "Custom", value: "custom" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyReferralCodeValidation = {};

export function EventEntityCompanyReferralCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCompanyReferralCodeValidation}>
      <Field.Input
        name="event.entity.company.referral_code"
        label="Optional Referral Code Used For The Sign Up"
        placeholder="optional referral code used for the sign up"
        validation={EventEntityCompanyReferralCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySkipDepositValidation = {};

export function EventEntityCompanySkipDeposit(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCompanySkipDepositValidation}>
      <Field.RadioSelect
        name="event.entity.company.skip_deposit"
        label="Company Is Allowed To Take Own Deposit"
        placeholder="company is allowed to take own deposit"
        options={[
          { name: "Yes", value: "Yes" },
          { name: "No", value: "No" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySolarCompanyInfoElectricalTradeAssociationNumberValidation =
  {
    minLength: {
      value: 1,
      message:
        "Electrical Trade Association Number requires minimum length of 1",
    },
  };

export function EventEntityCompanySolarCompanyInfoElectricalTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySolarCompanyInfoElectricalTradeAssociationNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.solar_company_info.electrical_trade_association_number"
        label="Electrical Trade Association Number"
        placeholder="electrical trade association number"
        validation={
          EventEntityCompanySolarCompanyInfoElectricalTradeAssociationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySolarCompanyInfoElectricalTradeAssociationValidation =
  {
    required: {
      value: true,
      message: "Electrical Trade Association is required.",
    },
  };

export function EventEntityCompanySolarCompanyInfoElectricalTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySolarCompanyInfoElectricalTradeAssociationValidation
      }
    >
      <Field.Select
        name="event.entity.company.solar_company_info.electrical_trade_association"
        label="Electrical Trade Association"
        placeholder="electrical trade association"
        options={[
          { name: "Niceic", value: "niceic" },
          { name: "Napit", value: "napit" },
          { name: "None", value: "none" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySolarCompanyInfoEpvsRegistrationNumberValidation =
  {
    required: { value: true, message: "Epvs Registration Number is required." },
    minLength: {
      value: 1,
      message: "Epvs Registration Number requires minimum length of 1",
    },
  };

export function EventEntityCompanySolarCompanyInfoEpvsRegistrationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySolarCompanyInfoEpvsRegistrationNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.solar_company_info.epvs_registration_number"
        label="EPVS Registration Number"
        placeholder="EPVS registration number"
        validation={
          EventEntityCompanySolarCompanyInfoEpvsRegistrationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySolarCompanyInfoSolarTradeAssociationNumberValidation =
  {
    required: {
      value: true,
      message: "Solar Trade Association Number is required.",
    },
    minLength: {
      value: 1,
      message: "Solar Trade Association Number requires minimum length of 1",
    },
  };

export function EventEntityCompanySolarCompanyInfoSolarTradeAssociationNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySolarCompanyInfoSolarTradeAssociationNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.solar_company_info.solar_trade_association_number"
        label="Solar Trade Association Number"
        placeholder="solar trade association number"
        validation={
          EventEntityCompanySolarCompanyInfoSolarTradeAssociationNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySolarCompanyInfoSolarTradeAssociationValidation =
  {
    required: { value: true, message: "Solar Trade Association is required." },
  };

export function EventEntityCompanySolarCompanyInfoSolarTradeAssociation(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySolarCompanyInfoSolarTradeAssociationValidation
      }
    >
      <Field.Select
        name="event.entity.company.solar_company_info.solar_trade_association"
        label="Solar Trade Association"
        placeholder="solar trade association"
        options={[
          { name: "Msc", value: "msc" },
          { name: "Heis", value: "heis" },
          { name: "Recc", value: "recc" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoNationalInsuranceNumberValidation =
  {
    minLength: {
      value: 1,
      message: "National Insurance Number requires minimum length of 1",
    },
  };

export function EventEntityCompanySoleTraderInfoNationalInsuranceNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoNationalInsuranceNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.national_insurance_number"
        label="National Insurance Number"
        placeholder="national insurance number"
        validation={
          EventEntityCompanySoleTraderInfoNationalInsuranceNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCompanySoleTraderInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoTradingAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCompanySoleTraderInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoTradingAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EventEntityCompanySoleTraderInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanySoleTraderInfoTradingAddressCityValidation}
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EventEntityCompanySoleTraderInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoTradingAddressCountryValidation
      }
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EventEntityCompanySoleTraderInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoTradingAddressCountyValidation
      }
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EventEntityCompanySoleTraderInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanySoleTraderInfoTradingAddressLine1Validation}
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EventEntityCompanySoleTraderInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanySoleTraderInfoTradingAddressLine2Validation}
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCompanySoleTraderInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoTradingAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.company.sole_trader_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCompanySoleTraderInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCompanySoleTraderInfoTradingAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.company.sole_trader_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCompanySoleTraderInfoTradingAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanySoleTraderInfoTradingNameValidation = {
  required: { value: true, message: "Trading Name is required." },
  minLength: { value: 1, message: "Trading Name requires minimum length of 1" },
};

export function EventEntityCompanySoleTraderInfoTradingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCompanySoleTraderInfoTradingNameValidation}
    >
      <Field.Input
        name="event.entity.company.sole_trader_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={EventEntityCompanySoleTraderInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCompanyUsersDirectorInfoDateOfBirthArrayInputValidation =
  {};

export function EventEntityCompanyUsersDirectorInfoDateOfBirthArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoDateOfBirthArrayInputValidation
        }
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="date of birth"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCompanyUsersDirectorInfoHomeAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCompanyUsersDirectorInfoHomeAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoHomeAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCompanyUsersDirectorInfoHomeAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoHomeAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersDirectorInfoVerificationStatusArraySelectValidation =
  {
    disabled: {
      value: true,
      message: "Verification Status input is read only or disabled",
    },
  };

export function EventEntityCompanyUsersDirectorInfoVerificationStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="verification_status">
      <Field.Validator
        validation={
          EventEntityCompanyUsersDirectorInfoVerificationStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Verification Status"
          placeholder="Verification Status"
          label="Verification Status"
          placeholder="verification status"
          options={[
            { name: "Not Verified", value: "not_verified" },
            { name: "Verification Submitted", value: "verification_submitted" },
            { name: "Verification Declined", value: "verification_declined" },
            { name: "Verified", value: "verified" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersEmailArrayInputValidation = {
  required: { value: true, message: "Email is required." },
};

export function EventEntityCompanyUsersEmailArrayInput(props: any) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator
        validation={EventEntityCompanyUsersEmailArrayInputValidation}
      >
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersFirstNameArrayInputValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function EventEntityCompanyUsersFirstNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator
        validation={EventEntityCompanyUsersFirstNameArrayInputValidation}
      >
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersLastNameArrayInputValidation = {
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function EventEntityCompanyUsersLastNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator
        validation={EventEntityCompanyUsersLastNameArrayInputValidation}
      >
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersMobileArrayInputValidation = {
  minLength: { value: 1, message: "Mobile requires minimum length of 1" },
};

export function EventEntityCompanyUsersMobileArrayInput(props: any) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator
        validation={EventEntityCompanyUsersMobileArrayInputValidation}
      >
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersRoleArraySelectValidation = {
  required: { value: true, message: "Role is required." },
};

export function EventEntityCompanyUsersRoleArraySelect(props: any) {
  return (
    <Field.Array.Input name="role">
      <Field.Validator
        validation={EventEntityCompanyUsersRoleArrayInputValidation}
      >
        <Field.RadioSelect
          label="Role"
          placeholder="Role"
          label="Company Role"
          placeholder="company role"
          options={[
            { name: "Company-Admin", value: "company-admin" },
            { name: "Company-Manager", value: "company-manager" },
            { name: "Company-Staff", value: "company-staff" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCompanyUsersValidation = {};

export function EventEntityCompanyUsersArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.company.users"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCreditAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityCreditAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditAidValidation}>
      <Field.Input
        name="event.entity.credit.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityCreditAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCreditAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EventEntityCreditAmountAmountValidation}>
      <Field.NumberFormatInput
        name="event.entity.credit.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityCreditAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditAmountCurrencyValidation = {};

export function EventEntityCreditAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCreditAmountCurrencyValidation}>
      <Field.RadioSelect
        name="event.entity.credit.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function EventEntityCreditBankAccountAccountName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditBankAccountAccountNameValidation}
    >
      <Field.Input
        name="event.entity.credit.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={EventEntityCreditBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function EventEntityCreditBankAccountAccountNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditBankAccountAccountNumberValidation}
    >
      <Field.Input
        name="event.entity.credit.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={EventEntityCreditBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCreditBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditBankAccountMonthsHeldValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.credit.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={EventEntityCreditBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function EventEntityCreditBankAccountSortCode(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditBankAccountSortCodeValidation}
    >
      <Field.Input
        name="event.entity.credit.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={EventEntityCreditBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityCreditCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditCidValidation}>
      <Field.Input
        name="event.entity.credit.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityCreditCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCreditDocumentsAidArrayInputValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityCreditCreditDocumentsAidArrayInput(props: any) {
  return (
    <Field.Array.Input name="aid">
      <Field.Validator
        validation={EventEntityCreditCreditDocumentsAidArrayInputValidation}
      >
        <Field.Input
          label="Aid"
          placeholder="Aid"
          label="Author Id"
          placeholder="author id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsCidArrayInputValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityCreditCreditDocumentsCidArrayInput(props: any) {
  return (
    <Field.Array.Input name="cid">
      <Field.Validator
        validation={EventEntityCreditCreditDocumentsCidArrayInputValidation}
      >
        <Field.Input
          label="Cid"
          placeholder="Cid"
          label="Company Id"
          placeholder="company id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsContentArrayInputValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityCreditCreditDocumentsContentArrayInput(props: any) {
  return (
    <Field.Array.Input name="content">
      <Field.Validator
        validation={EventEntityCreditCreditDocumentsContentArrayInputValidation}
      >
        <Field.File
          label="Content"
          placeholder="Content"
          label="Document Content"
          placeholder="document content"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsIdArrayInputValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityCreditCreditDocumentsIdArrayInput(props: any) {
  return (
    <Field.Array.Input name="id">
      <Field.Validator
        validation={EventEntityCreditCreditDocumentsIdArrayInputValidation}
      >
        <Field.Input
          label="Id"
          placeholder="Id"
          label="Document Id"
          placeholder="document id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsMetadataCreatedAtArrayInputValidation =
  {
    required: { value: true, message: "Created At is required." },
    disabled: {
      value: true,
      message: "Created At input is read only or disabled",
    },
  };

export function EventEntityCreditCreditDocumentsMetadataCreatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="created_at">
      <Field.Validator
        validation={
          EventEntityCreditCreditDocumentsMetadataCreatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Created At"
          placeholder="Created At"
          label="Created At"
          placeholder="created at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsMetadataLivenessArrayInputValidation =
  {
    required: { value: true, message: "Liveness is required." },
    disabled: {
      value: true,
      message: "Liveness input is read only or disabled",
    },
  };

export function EventEntityCreditCreditDocumentsMetadataLivenessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="liveness">
      <Field.Validator
        validation={
          EventEntityCreditCreditDocumentsMetadataLivenessArrayInputValidation
        }
      >
        <Field.BooleanInput
          label="Liveness"
          placeholder="Liveness"
          label="Liveness"
          placeholder="liveness"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsMetadataUpdatedAtArrayInputValidation =
  {
    required: { value: true, message: "Updated At is required." },
    disabled: {
      value: true,
      message: "Updated At input is read only or disabled",
    },
  };

export function EventEntityCreditCreditDocumentsMetadataUpdatedAtArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="updated_at">
      <Field.Validator
        validation={
          EventEntityCreditCreditDocumentsMetadataUpdatedAtArrayInputValidation
        }
      >
        <Field.Input
          label="Updated At"
          placeholder="Updated At"
          label="Updated At"
          placeholder="updated at"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsMimetypeArrayInputValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EventEntityCreditCreditDocumentsMimetypeArrayInput(props: any) {
  return (
    <Field.Array.Input name="mimetype">
      <Field.Validator
        validation={
          EventEntityCreditCreditDocumentsMimetypeArrayInputValidation
        }
      >
        <Field.Input
          label="Mimetype"
          placeholder="Mimetype"
          label="Document Mime Type"
          placeholder="document mime type"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsNameArrayInputValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityCreditCreditDocumentsNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="name">
      <Field.Validator
        validation={EventEntityCreditCreditDocumentsNameArrayInputValidation}
      >
        <Field.Input
          label="Name"
          placeholder="Name"
          label="Document Name"
          placeholder="document name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsOidArrayInputValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityCreditCreditDocumentsOidArrayInput(props: any) {
  return (
    <Field.Array.Input name="oid">
      <Field.Validator
        validation={EventEntityCreditCreditDocumentsOidArrayInputValidation}
      >
        <Field.Input
          label="Oid"
          placeholder="Oid"
          label="Owner Id"
          placeholder="owner id"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditCreditDocumentsValidation = {};

export function EventEntityCreditCreditDocumentsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.credit.credit_documents"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsCurrentAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsCurrentAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsCurrentAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsCurrentAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function EventEntityCreditCustomerDetailsCurrentAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsCurrentAddressCityValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function EventEntityCreditCustomerDetailsCurrentAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsCurrentAddressCountryValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function EventEntityCreditCustomerDetailsCurrentAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsCurrentAddressCountyValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function EventEntityCreditCustomerDetailsCurrentAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsCurrentAddressLine1Validation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function EventEntityCreditCustomerDetailsCurrentAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsCurrentAddressLine2Validation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.current_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditCustomerDetailsCurrentAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsCurrentAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.customer_details.current_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsCurrentAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditCustomerDetailsCurrentAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsCurrentAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.credit.customer_details.current_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCreditCustomerDetailsCurrentAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsDateOfBirthValidation = {
  required: { value: true, message: "Date Of Birth is required." },
};

export function EventEntityCreditCustomerDetailsDateOfBirth(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsDateOfBirthValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.date_of_birth"
        label="Date Of Birth"
        placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
        validation={EventEntityCreditCustomerDetailsDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function EventEntityCreditCustomerDetailsEmail(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsEmailValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.email"
        label="Email"
        placeholder="email"
        validation={EventEntityCreditCustomerDetailsEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
};

export function EventEntityCreditCustomerDetailsFirstName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsFirstNameValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.first_name"
        label="First Name"
        placeholder="first name"
        validation={EventEntityCreditCustomerDetailsFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGenderValidation = {
  required: { value: true, message: "Gender is required." },
};

export function EventEntityCreditCustomerDetailsGender(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsGenderValidation}
    >
      <Field.RadioSelect
        name="event.entity.credit.customer_details.gender"
        label="Gender"
        placeholder="gender"
        options={[
          { name: "Male", value: "male" },
          { name: "Female", value: "female" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressCityValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressCityValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountryValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountyValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine1Validation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine2Validation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.goods_delivery_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.customer_details.goods_delivery_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditCustomerDetailsGoodsDeliveryAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.credit.customer_details.goods_delivery_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCreditCustomerDetailsGoodsDeliveryAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
};

export function EventEntityCreditCustomerDetailsLastName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsLastNameValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.last_name"
        label="Last Name"
        placeholder="last name"
        validation={EventEntityCreditCustomerDetailsLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsMaidenNameValidation = {};

export function EventEntityCreditCustomerDetailsMaidenName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsMaidenNameValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.maiden_name"
        label="Maiden Name"
        placeholder="maiden name"
        validation={EventEntityCreditCustomerDetailsMaidenNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsMaritalStatusValidation = {
  required: { value: true, message: "Marital Status is required." },
};

export function EventEntityCreditCustomerDetailsMaritalStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsMaritalStatusValidation}
    >
      <Field.Select
        name="event.entity.credit.customer_details.marital_status"
        label="Marital Status"
        placeholder="marital status"
        options={[
          { name: "Widowed", value: "widowed" },
          { name: "Other", value: "other" },
          { name: "Married", value: "married" },
          { name: "Divorced", value: "divorced" },
          { name: "Cohabiting", value: "cohabiting" },
          { name: "To Be Married", value: "to_be_married" },
          { name: "Separated", value: "separated" },
          { name: "Single", value: "single" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsMiddleNameValidation = {};

export function EventEntityCreditCustomerDetailsMiddleName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsMiddleNameValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.middle_name"
        label="Middle Name"
        placeholder="middle name"
        validation={EventEntityCreditCustomerDetailsMiddleNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsMobileValidation = {};

export function EventEntityCreditCustomerDetailsMobile(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsMobileValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={EventEntityCreditCustomerDetailsMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsMonthlyRentAmountAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditCustomerDetailsMonthlyRentAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsMonthlyRentAmountAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.customer_details.monthly_rent_amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          EventEntityCreditCustomerDetailsMonthlyRentAmountAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsMonthlyRentAmountCurrencyValidation =
  {};

export function EventEntityCreditCustomerDetailsMonthlyRentAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsMonthlyRentAmountCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="event.entity.credit.customer_details.monthly_rent_amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsNumberOfDependantsValidation = {
  required: { value: true, message: "Number Of Dependants is required." },
  min: { value: 0, message: "Number Of Dependants must be great than 0" },
  max: {
    value: 2147483647,
    message: "Number Of Dependants must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCreditCustomerDetailsNumberOfDependants(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsNumberOfDependantsValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.credit.customer_details.number_of_dependants"
        label="Number Of Dependants"
        placeholder="number of dependants"
        validation={
          EventEntityCreditCustomerDetailsNumberOfDependantsValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOneBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneCityValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOneCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneCityValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOneCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneCountryValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditCustomerDetailsPreviousAddressOneCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneCountyValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOneLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneLine1Validation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditCustomerDetailsPreviousAddressOneLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneLine2Validation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_one.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.customer_details.previous_address_one.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressOnePostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressOnePostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressOnePostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.credit.customer_details.previous_address_one.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressOnePostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNameValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoCityValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoCityValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoCountryValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.country"
        label="Country"
        placeholder="country"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoCountyValidation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.county"
        label="County / State"
        placeholder="county / state"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoLine1Validation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoLine2Validation
      }
    >
      <Field.Input
        name="event.entity.credit.customer_details.previous_address_two.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.customer_details.previous_address_two.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsPreviousAddressTwoPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditCustomerDetailsPreviousAddressTwoPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditCustomerDetailsPreviousAddressTwoPostcodeValidation
      }
    >
      <Field.Postcode
        name="event.entity.credit.customer_details.previous_address_two.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          EventEntityCreditCustomerDetailsPreviousAddressTwoPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsResidentialStatusValidation = {
  required: { value: true, message: "Residential Status is required." },
};

export function EventEntityCreditCustomerDetailsResidentialStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsResidentialStatusValidation}
    >
      <Field.Select
        name="event.entity.credit.customer_details.residential_status"
        label="Residential Status"
        placeholder="residential status"
        options={[
          { name: "Tenant", value: "tenant" },
          { name: "Council Tenant", value: "council tenant" },
          { name: "Living With Parents", value: "living with parents" },
          { name: "Owner", value: "owner" },
          { name: "Owner Without Mortgage", value: "owner without mortgage" },
          { name: "Lodger", value: "lodger" },
          { name: "Armed Forces", value: "armed forces" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsTelephoneValidation = {};

export function EventEntityCreditCustomerDetailsTelephone(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsTelephoneValidation}
    >
      <Field.Input
        name="event.entity.credit.customer_details.telephone"
        label="Telephone"
        placeholder="telephone"
        validation={EventEntityCreditCustomerDetailsTelephoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditCustomerDetailsTitleValidation = {
  required: { value: true, message: "Title is required." },
};

export function EventEntityCreditCustomerDetailsTitle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCreditCustomerDetailsTitleValidation}
    >
      <Field.Select
        name="event.entity.credit.customer_details.title"
        label="Title"
        placeholder="title"
        options={[
          { name: "Mrs", value: "mrs" },
          { name: "Mr", value: "mr" },
          { name: "Miss", value: "miss" },
          { name: "Ms", value: "ms" },
          { name: "Dr", value: "dr" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditDepositValueAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityCreditDepositValueAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EventEntityCreditDepositValueAmountValidation}>
      <Field.NumberFormatInput
        name="event.entity.credit.deposit_value.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityCreditDepositValueAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditDepositValueCurrencyValidation = {};

export function EventEntityCreditDepositValueCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityCreditDepositValueCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.credit.deposit_value.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsEmployedDetailsEmployerNameValidation =
  {
    required: { value: true, message: "Employer Name is required." },
    minLength: {
      value: 1,
      message: "Employer Name requires minimum length of 1",
    },
  };

export function EventEntityCreditEmploymentDetailsEmployedDetailsEmployerName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsEmployedDetailsEmployerNameValidation
      }
    >
      <Field.Input
        name="event.entity.credit.employment_details.employed_details.employer_name"
        label="Employer Name"
        placeholder="employer name"
        validation={
          EventEntityCreditEmploymentDetailsEmployedDetailsEmployerNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsEmployedDetailsMainOccupationValidation =
  {
    required: { value: true, message: "Main Occupation is required." },
    minLength: {
      value: 1,
      message: "Main Occupation requires minimum length of 1",
    },
  };

export function EventEntityCreditEmploymentDetailsEmployedDetailsMainOccupation(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsEmployedDetailsMainOccupationValidation
      }
    >
      <Field.Input
        name="event.entity.credit.employment_details.employed_details.main_occupation"
        label="Main Occupation"
        placeholder="main occupation"
        validation={
          EventEntityCreditEmploymentDetailsEmployedDetailsMainOccupationValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation =
  {
    required: { value: true, message: "Months Employed is required." },
    min: { value: 1, message: "Months Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Employed must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditEmploymentDetailsEmployedDetailsMonthsEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.employment_details.employed_details.months_employed"
        label="Months Employed"
        placeholder="months employed"
        validation={
          EventEntityCreditEmploymentDetailsEmployedDetailsMonthsEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsEmploymentStatusValidation = {
  required: { value: true, message: "Employment Status is required." },
};

export function EventEntityCreditEmploymentDetailsEmploymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={EventEntityCreditEmploymentDetailsEmploymentStatusValidation}
    >
      <Field.Select
        name="event.entity.credit.employment_details.employment_status"
        label="Employment Status"
        placeholder="employment status"
        options={[
          { name: "Employed", value: "employed" },
          { name: "Self Employed", value: "self_employed" },
          { name: "Not Employed", value: "not_employed" },
          { name: "Retired", value: "retired" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsGrossAnnualIncomeAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditEmploymentDetailsGrossAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsGrossAnnualIncomeAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.employment_details.gross_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          EventEntityCreditEmploymentDetailsGrossAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsGrossAnnualIncomeCurrencyValidation =
  {};

export function EventEntityCreditEmploymentDetailsGrossAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsGrossAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="event.entity.credit.employment_details.gross_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.employment_details.household_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation =
  {};

export function EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="event.entity.credit.employment_details.household_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function EventEntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncome(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation
      }
    >
      <Field.Select
        name="event.entity.credit.employment_details.not_employed_details.source_of_income"
        label="Source Of Income"
        placeholder="source of income"
        options={[
          { name: "Partner", value: "partner" },
          { name: "Benefits", value: "benefits" },
          { name: "Maintenance", value: "maintenance" },
          { name: "Disabled", value: "disabled" },
          { name: "Full-Time Carer", value: "full-time carer" },
          { name: "Homemaker", value: "homemaker" },
          { name: "Permanent Dla", value: "permanent dla" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function EventEntityCreditEmploymentDetailsSelfEmployedDetailsBusinessName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
      }
    >
      <Field.Input
        name="event.entity.credit.employment_details.self_employed_details.business_name"
        label="Business Name"
        placeholder="business name"
        validation={
          EventEntityCreditEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="event.entity.credit.employment_details.self_employed_details.months_self_employed"
        label="Months Self Employed"
        placeholder="months self employed"
        validation={
          EventEntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function EventEntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusiness(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        EventEntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
      }
    >
      <Field.Input
        name="event.entity.credit.employment_details.self_employed_details.type_of_business"
        label="Type Of Business"
        placeholder="type of business"
        validation={
          EventEntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditExtraApplicantsBankAccountAccountNameArrayInputValidation =
  {
    required: { value: true, message: "Account Name is required." },
    minLength: {
      value: 1,
      message: "Account Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsBankAccountAccountNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="account_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsBankAccountAccountNameArrayInputValidation
        }
      >
        <Field.Input
          label="Account Name"
          placeholder="Account Name"
          label="Account Name"
          placeholder="account name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsBankAccountAccountNumberArrayInputValidation =
  {
    required: { value: true, message: "Account Number is required." },
    minLength: {
      value: 1,
      message: "Account Number requires minimum length of 1",
    },
    pattern: {
      value: /^[0-9]{7,8}$/,
      message: "Account Number input is invalid",
    },
  };

export function EventEntityCreditExtraApplicantsBankAccountAccountNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="account_number">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsBankAccountAccountNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Account Number"
          placeholder="Account Number"
          label="Account Number"
          placeholder="account number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsBankAccountMonthsHeldArrayInputValidation =
  {
    min: { value: 0, message: "Months Held must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months Held must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsBankAccountMonthsHeldArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_held">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsBankAccountMonthsHeldArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Held"
          placeholder="Months Held"
          label="Months Held For Bank Account"
          placeholder="months held for bank account"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsBankAccountSortCodeArrayInputValidation =
  {
    required: { value: true, message: "Sort Code is required." },
    pattern: {
      value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
      message: "Sort Code input is invalid",
    },
  };

export function EventEntityCreditExtraApplicantsBankAccountSortCodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="sort_code">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsBankAccountSortCodeArrayInputValidation
        }
      >
        <Field.Input
          label="Sort Code"
          placeholder="Sort Code"
          label="Sort Code"
          placeholder="sort code"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsCurrentAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsDateOfBirthArrayInputValidation =
  { required: { value: true, message: "Date Of Birth is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsDateOfBirthArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsDateOfBirthArrayInputValidation
        }
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsEmailArrayInputValidation =
  { required: { value: true, message: "Email is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsEmailArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsEmailArrayInputValidation
        }
      >
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsFirstNameArrayInputValidation =
  { required: { value: true, message: "First Name is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsFirstNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsFirstNameArrayInputValidation
        }
      >
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGenderArraySelectValidation =
  { required: { value: true, message: "Gender is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsGenderArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="gender">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGenderArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Gender"
          placeholder="Gender"
          label="Gender"
          placeholder="gender"
          options={[
            { name: "Male", value: "male" },
            { name: "Female", value: "female" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsGoodsDeliveryAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsLastNameArrayInputValidation =
  { required: { value: true, message: "Last Name is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsLastNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsLastNameArrayInputValidation
        }
      >
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsMaidenNameArrayInputValidation =
  {};

export function EventEntityCreditExtraApplicantsCustomerDetailsMaidenNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="maiden_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsMaidenNameArrayInputValidation
        }
      >
        <Field.Input
          label="Maiden Name"
          placeholder="Maiden Name"
          label="Maiden Name"
          placeholder="maiden name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsMaritalStatusArraySelectValidation =
  { required: { value: true, message: "Marital Status is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsMaritalStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="marital_status">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsMaritalStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Marital Status"
          placeholder="Marital Status"
          label="Marital Status"
          placeholder="marital status"
          options={[
            { name: "Widowed", value: "widowed" },
            { name: "Other", value: "other" },
            { name: "Married", value: "married" },
            { name: "Divorced", value: "divorced" },
            { name: "Cohabiting", value: "cohabiting" },
            { name: "To Be Married", value: "to_be_married" },
            { name: "Separated", value: "separated" },
            { name: "Single", value: "single" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsMiddleNameArrayInputValidation =
  {};

export function EventEntityCreditExtraApplicantsCustomerDetailsMiddleNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="middle_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsMiddleNameArrayInputValidation
        }
      >
        <Field.Input
          label="Middle Name"
          placeholder="Middle Name"
          label="Middle Name"
          placeholder="middle name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsMobileArrayInputValidation =
  {};

export function EventEntityCreditExtraApplicantsCustomerDetailsMobileArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsMobileArrayInputValidation
        }
      >
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArraySelectValidation =
  {};

export function EventEntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsMonthlyRentAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInputValidation =
  {
    required: { value: true, message: "Number Of Dependants is required." },
    min: { value: 0, message: "Number Of Dependants must be great than 0" },
    max: {
      value: 2147483647,
      message: "Number Of Dependants must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="number_of_dependants">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsNumberOfDependantsArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Number Of Dependants"
          placeholder="Number Of Dependants"
          label="Number Of Dependants"
          placeholder="number of dependants"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOneMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressOnePostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsPreviousAddressTwoPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsResidentialStatusArraySelectValidation =
  { required: { value: true, message: "Residential Status is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsResidentialStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="residential_status">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsResidentialStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Residential Status"
          placeholder="Residential Status"
          label="Residential Status"
          placeholder="residential status"
          options={[
            { name: "Tenant", value: "tenant" },
            { name: "Council Tenant", value: "council tenant" },
            { name: "Living With Parents", value: "living with parents" },
            { name: "Owner", value: "owner" },
            { name: "Owner Without Mortgage", value: "owner without mortgage" },
            { name: "Lodger", value: "lodger" },
            { name: "Armed Forces", value: "armed forces" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsTelephoneArrayInputValidation =
  {};

export function EventEntityCreditExtraApplicantsCustomerDetailsTelephoneArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="telephone">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsTelephoneArrayInputValidation
        }
      >
        <Field.Input
          label="Telephone"
          placeholder="Telephone"
          label="Telephone"
          placeholder="telephone"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsCustomerDetailsTitleArraySelectValidation =
  { required: { value: true, message: "Title is required." } };

export function EventEntityCreditExtraApplicantsCustomerDetailsTitleArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="title">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsCustomerDetailsTitleArrayInputValidation
        }
      >
        <Field.Select
          label="Title"
          placeholder="Title"
          label="Title"
          placeholder="title"
          options={[
            { name: "Mrs", value: "mrs" },
            { name: "Mr", value: "mr" },
            { name: "Miss", value: "miss" },
            { name: "Ms", value: "ms" },
            { name: "Dr", value: "dr" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInputValidation =
  {
    required: { value: true, message: "Employer Name is required." },
    minLength: {
      value: 1,
      message: "Employer Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="employer_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsEmployerNameArrayInputValidation
        }
      >
        <Field.Input
          label="Employer Name"
          placeholder="Employer Name"
          label="Employer Name"
          placeholder="employer name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInputValidation =
  {
    required: { value: true, message: "Main Occupation is required." },
    minLength: {
      value: 1,
      message: "Main Occupation requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="main_occupation">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMainOccupationArrayInputValidation
        }
      >
        <Field.Input
          label="Main Occupation"
          placeholder="Main Occupation"
          label="Main Occupation"
          placeholder="main occupation"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInputValidation =
  {
    required: { value: true, message: "Months Employed is required." },
    min: { value: 1, message: "Months Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Employed must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_employed">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsEmployedDetailsMonthsEmployedArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Employed"
          placeholder="Months Employed"
          label="Months Employed"
          placeholder="months employed"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsEmploymentStatusArraySelectValidation =
  { required: { value: true, message: "Employment Status is required." } };

export function EventEntityCreditExtraApplicantsEmploymentDetailsEmploymentStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="employment_status">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsEmploymentStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Employment Status"
          placeholder="Employment Status"
          label="Employment Status"
          placeholder="employment status"
          options={[
            { name: "Employed", value: "employed" },
            { name: "Self Employed", value: "self_employed" },
            { name: "Not Employed", value: "not_employed" },
            { name: "Retired", value: "retired" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArraySelectValidation =
  {};

export function EventEntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsGrossAnnualIncomeCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArraySelectValidation =
  {};

export function EventEntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsHouseholdAnnualIncomeCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArraySelectValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function EventEntityCreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="source_of_income">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsNotEmployedDetailsSourceOfIncomeArrayInputValidation
        }
      >
        <Field.Select
          label="Source Of Income"
          placeholder="Source Of Income"
          label="Source Of Income"
          placeholder="source of income"
          options={[
            { name: "Partner", value: "partner" },
            { name: "Benefits", value: "benefits" },
            { name: "Maintenance", value: "maintenance" },
            { name: "Disabled", value: "disabled" },
            { name: "Full-Time Carer", value: "full-time carer" },
            { name: "Homemaker", value: "homemaker" },
            { name: "Permanent Dla", value: "permanent dla" },
            { name: "Other", value: "other" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInputValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="business_name">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsBusinessNameArrayInputValidation
        }
      >
        <Field.Input
          label="Business Name"
          placeholder="Business Name"
          label="Business Name"
          placeholder="business name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInputValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_self_employed">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months Self Employed"
          placeholder="Months Self Employed"
          label="Months Self Employed"
          placeholder="months self employed"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInputValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="type_of_business">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessArrayInputValidation
        }
      >
        <Field.Input
          label="Type Of Business"
          placeholder="Type Of Business"
          label="Type Of Business"
          placeholder="type of business"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArraySelectValidation =
  {};

export function EventEntityCreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="bankrupcy_or_iva_in_last_5_years">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsFinanceDetailsBankrupcyOrIvaInLast5YearsArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Bankrupcy Or Iva In Last 5 Years"
          placeholder="Bankrupcy Or Iva In Last 5 Years"
          label="Any Bankrupcy Or IVA In The Last 5 Years?"
          placeholder="any bankrupcy or IVA in the last 5 years?"
          options={[
            { name: "Yes", value: "yes" },
            { name: "No", value: "no" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function EventEntityCreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function EventEntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EventEntityCreditExtraApplicantsFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditExtraApplicantsFinanceDetailsExpendituresValidation =
  {};

export function EventEntityCreditExtraApplicantsFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.credit.extra_applicants.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCreditExtraApplicantsValidation = {};

export function EventEntityCreditExtraApplicantsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.credit.extra_applicants"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCreditFinanceDetailsBankrupcyOrIvaInLast5YearsValidation =
  {};

export function EventEntityCreditFinanceDetailsBankrupcyOrIvaInLast5Years(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        EventEntityCreditFinanceDetailsBankrupcyOrIvaInLast5YearsValidation
      }
    >
      <Field.RadioSelect
        name="event.entity.credit.finance_details.bankrupcy_or_iva_in_last_5_years"
        label="Any Bankrupcy Or IVA In The Last 5 Years?"
        placeholder="any bankrupcy or IVA in the last 5 years?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function EventEntityCreditFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          EventEntityCreditFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function EventEntityCreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          EventEntityCreditFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function EventEntityCreditFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          EventEntityCreditFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const EventEntityCreditFinanceDetailsExpendituresValidation = {};

export function EventEntityCreditFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="event.entity.credit.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const EventEntityCreditFinanceOptionValidation = {
  required: { value: true, message: "Finance Option is required." },
  disabled: {
    value: true,
    message: "Finance Option input is read only or disabled",
  },
};

export function EventEntityCreditFinanceOption(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditFinanceOptionValidation}>
      <Field.Input
        name="event.entity.credit.finance_option"
        label="Finance Option For This Credit"
        placeholder="finance option"
        validation={EventEntityCreditFinanceOptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityCreditId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditIdValidation}>
      <Field.Input
        name="event.entity.credit.id"
        label="Payment Id"
        placeholder="payment id"
        validation={EventEntityCreditIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditKidValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function EventEntityCreditKid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditKidValidation}>
      <Field.Input
        name="event.entity.credit.kid"
        label="Internal Kind Id"
        placeholder="internal kind id"
        validation={EventEntityCreditKidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditKindValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function EventEntityCreditKind(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCreditKindValidation}>
      <Field.RadioSelect
        name="event.entity.credit.kind"
        label="Internal Kind"
        placeholder="internal kind"
        options={[
          { name: "Job", value: "job" },
          { name: "Charge", value: "charge" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityCreditMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditMetadataCreatedAtValidation}>
      <Field.Input
        name="event.entity.credit.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityCreditMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityCreditMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EventEntityCreditMetadataLivenessValidation}>
      <Field.BooleanInput
        name="event.entity.credit.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityCreditMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityCreditMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditMetadataUpdatedAtValidation}>
      <Field.Input
        name="event.entity.credit.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityCreditMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityCreditOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditOidValidation}>
      <Field.Input
        name="event.entity.credit.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityCreditOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditProviderValidation = {
  disabled: { value: true, message: "Provider input is read only or disabled" },
};

export function EventEntityCreditProvider(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCreditProviderValidation}>
      <Field.RadioSelect
        name="event.entity.credit.provider"
        label="Provider Name"
        placeholder="provider name"
        options={[
          { name: "Omni", value: "omni" },
          { name: "Propensio", value: "propensio" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function EventEntityCreditSignatureFingerprint(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityCreditSignatureFingerprintValidation}
    >
      <Field.Input
        name="event.entity.credit.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={EventEntityCreditSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function EventEntityCreditSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityCreditSignatureSignedValidation}>
      <Field.RadioSelect
        name="event.entity.credit.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditStateValidation = {
  disabled: { value: true, message: "State input is read only or disabled" },
};

export function EventEntityCreditState(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityCreditStateValidation}>
      <Field.Select
        name="event.entity.credit.state"
        label="Credit State"
        placeholder="credit state"
        options={[
          { name: "Accepted", value: "accepted" },
          { name: "Declined", value: "declined" },
          { name: "Referred", value: "referred" },
          { name: "Action Lender", value: "action_lender" },
          { name: "Action Customer", value: "action_customer" },
          { name: "Pending", value: "pending" },
          { name: "Finished", value: "finished" },
          { name: "Paid Out", value: "paid_out" },
          { name: "Cancelled", value: "cancelled" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EventEntityCreditXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditXidValidation}>
      <Field.Input
        name="event.entity.credit.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={EventEntityCreditXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityCreditXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EventEntityCreditXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityCreditXrefValidation}>
      <Field.Input
        name="event.entity.credit.xref"
        label="External Reference"
        placeholder="external reference"
        validation={EventEntityCreditXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityDocumentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityDocumentAidValidation}>
      <Field.Input
        name="event.entity.document.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityDocumentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityDocumentCidValidation}>
      <Field.Input
        name="event.entity.document.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function EventEntityDocumentContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={EventEntityDocumentContentValidation}>
      <Field.File
        name="event.entity.document.content"
        label="Document Content"
        placeholder="document content"
        validation={EventEntityDocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityDocumentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityDocumentIdValidation}>
      <Field.Input
        name="event.entity.document.id"
        label="Document Id"
        placeholder="document id"
        validation={EventEntityDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityDocumentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityDocumentMetadataCreatedAtValidation}
    >
      <Field.Input
        name="event.entity.document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityDocumentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EventEntityDocumentMetadataLivenessValidation}>
      <Field.BooleanInput
        name="event.entity.document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityDocumentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityDocumentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntityDocumentMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="event.entity.document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityDocumentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function EventEntityDocumentMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityDocumentMimetypeValidation}>
      <Field.Input
        name="event.entity.document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={EventEntityDocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function EventEntityDocumentName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityDocumentNameValidation}>
      <Field.Input
        name="event.entity.document.name"
        label="Document Name"
        placeholder="document name"
        validation={EventEntityDocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityDocumentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityDocumentOidValidation}>
      <Field.Input
        name="event.entity.document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntityPaymentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentAidValidation}>
      <Field.Input
        name="event.entity.payment.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntityPaymentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntityPaymentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentCidValidation}>
      <Field.Input
        name="event.entity.payment.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntityPaymentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntityPaymentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentIdValidation}>
      <Field.Input
        name="event.entity.payment.id"
        label="Payment Id"
        placeholder="payment id"
        validation={EventEntityPaymentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentKidValidation = {
  disabled: { value: true, message: "Kid input is read only or disabled" },
};

export function EventEntityPaymentKid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentKidValidation}>
      <Field.Input
        name="event.entity.payment.kid"
        label="Internal Kind Id"
        placeholder="internal kind id"
        validation={EventEntityPaymentKidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentKindValidation = {
  disabled: { value: true, message: "Kind input is read only or disabled" },
};

export function EventEntityPaymentKind(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntityPaymentKindValidation}>
      <Field.RadioSelect
        name="event.entity.payment.kind"
        label="Internal Kind"
        placeholder="internal kind"
        options={[
          { name: "Job", value: "job" },
          { name: "Charge", value: "charge" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntityPaymentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityPaymentMetadataCreatedAtValidation}>
      <Field.Input
        name="event.entity.payment.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntityPaymentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntityPaymentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={EventEntityPaymentMetadataLivenessValidation}>
      <Field.BooleanInput
        name="event.entity.payment.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntityPaymentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntityPaymentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={EventEntityPaymentMetadataUpdatedAtValidation}>
      <Field.Input
        name="event.entity.payment.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntityPaymentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntityPaymentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentOidValidation}>
      <Field.Input
        name="event.entity.payment.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntityPaymentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentPaymentOptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntityPaymentPaymentOptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={EventEntityPaymentPaymentOptionAmountAmountValidation}
    >
      <Field.NumberFormatInput
        name="event.entity.payment.payment_option.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntityPaymentPaymentOptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentPaymentOptionAmountCurrencyValidation = {};

export function EventEntityPaymentPaymentOptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityPaymentPaymentOptionAmountCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.payment.payment_option.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentPaymentOptionPaymentMethodValidation = {
  required: { value: true, message: "Payment Method is required." },
};

export function EventEntityPaymentPaymentOptionPaymentMethod(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntityPaymentPaymentOptionPaymentMethodValidation}
    >
      <Field.RadioSelect
        name="event.entity.payment.payment_option.payment_method"
        label="Payment Method"
        placeholder="payment method"
        options={[
          { name: "Cash", value: "cash" },
          { name: "Card", value: "card" },
          { name: "Loan", value: "loan" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentStatusValidation = {
  disabled: { value: true, message: "Status input is read only or disabled" },
};

export function EventEntityPaymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={EventEntityPaymentStatusValidation}>
      <Field.Select
        name="event.entity.payment.status"
        label="Payment Status"
        placeholder="payment status"
        options={[
          { name: "Unpaid", value: "unpaid" },
          { name: "Pending", value: "pending" },
          { name: "Paid", value: "paid" },
          { name: "Disputed", value: "disputed" },
          { name: "Cancelled", value: "cancelled" },
          { name: "Refunded", value: "refunded" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EventEntityPaymentXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentXidValidation}>
      <Field.Input
        name="event.entity.payment.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={EventEntityPaymentXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntityPaymentXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EventEntityPaymentXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntityPaymentXrefValidation}>
      <Field.Input
        name="event.entity.payment.xref"
        label="External Reference"
        placeholder="external reference"
        validation={EventEntityPaymentXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventEntitySubscriptionAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionAidValidation}>
      <Field.Input
        name="event.entity.subscription.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventEntitySubscriptionAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function EventEntitySubscriptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EventEntitySubscriptionAmountAmountValidation}>
      <Field.NumberFormatInput
        name="event.entity.subscription.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={EventEntitySubscriptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionAmountCurrencyValidation = {};

export function EventEntitySubscriptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionAmountCurrencyValidation}
    >
      <Field.RadioSelect
        name="event.entity.subscription.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionAuthorisationUrlValidation = {
  disabled: {
    value: true,
    message: "Authorisation Url input is read only or disabled",
  },
};

export function EventEntitySubscriptionAuthorisationUrl(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionAuthorisationUrlValidation}
    >
      <Field.Input
        name="event.entity.subscription.authorisation_url"
        label="Authorisation Url To Submit A Mandate Agreement"
        placeholder="authorisation url to submit a mandate agreement"
        validation={EventEntitySubscriptionAuthorisationUrlValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionBillingStatusValidation = {
  disabled: {
    value: true,
    message: "Billing Status input is read only or disabled",
  },
};

export function EventEntitySubscriptionBillingStatus(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionBillingStatusValidation}
    >
      <Field.Input
        name="event.entity.subscription.billing_status"
        label="Billing Status"
        placeholder="billing status"
        validation={EventEntitySubscriptionBillingStatusValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionBillingValidation = {
  disabled: { value: true, message: "Billing input is read only or disabled" },
};

export function EventEntitySubscriptionBilling(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionBillingValidation}>
      <Field.Input
        name="event.entity.subscription.billing"
        label="Billing Reference"
        placeholder="billing reference"
        validation={EventEntitySubscriptionBillingValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventEntitySubscriptionCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionCidValidation}>
      <Field.Input
        name="event.entity.subscription.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventEntitySubscriptionCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionDayOfMonthValidation = {
  min: { value: -1, message: "Day Of Month must be great than -1" },
  max: { value: 28, message: "Day Of Month must be smaller than 28" },
};

export function EventEntitySubscriptionDayOfMonth(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={EventEntitySubscriptionDayOfMonthValidation}>
      <Field.NumberFormatInput
        name="event.entity.subscription.day_of_month"
        label="Day Of Month For Collection"
        placeholder="day of month for collection"
        validation={EventEntitySubscriptionDayOfMonthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventEntitySubscriptionId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionIdValidation}>
      <Field.Input
        name="event.entity.subscription.id"
        label="Subscription Id"
        placeholder="subscription id"
        validation={EventEntitySubscriptionIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionIntervalValidation = {};

export function EventEntitySubscriptionInterval(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventEntitySubscriptionIntervalValidation}>
      <Field.RadioSelect
        name="event.entity.subscription.interval"
        label="Subscription Interval"
        placeholder="subscription interval"
        options={[
          { name: "Monthly", value: "monthly" },
          { name: "Yearly", value: "yearly" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionMandateStatusValidation = {
  disabled: {
    value: true,
    message: "Mandate Status input is read only or disabled",
  },
};

export function EventEntitySubscriptionMandateStatus(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionMandateStatusValidation}
    >
      <Field.Input
        name="event.entity.subscription.mandate_status"
        label="Mandate Status"
        placeholder="mandate status"
        validation={EventEntitySubscriptionMandateStatusValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionMandateValidation = {
  disabled: { value: true, message: "Mandate input is read only or disabled" },
};

export function EventEntitySubscriptionMandate(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionMandateValidation}>
      <Field.Input
        name="event.entity.subscription.mandate"
        label="Mandate Reference"
        placeholder="mandate reference"
        validation={EventEntitySubscriptionMandateValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventEntitySubscriptionMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionMetadataCreatedAtValidation}
    >
      <Field.Input
        name="event.entity.subscription.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventEntitySubscriptionMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventEntitySubscriptionMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="event.entity.subscription.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventEntitySubscriptionMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventEntitySubscriptionMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={EventEntitySubscriptionMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="event.entity.subscription.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventEntitySubscriptionMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventEntitySubscriptionOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionOidValidation}>
      <Field.Input
        name="event.entity.subscription.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventEntitySubscriptionOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function EventEntitySubscriptionXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionXidValidation}>
      <Field.Input
        name="event.entity.subscription.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={EventEntitySubscriptionXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventEntitySubscriptionXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function EventEntitySubscriptionXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventEntitySubscriptionXrefValidation}>
      <Field.Input
        name="event.entity.subscription.xref"
        label="External Reference"
        placeholder="external reference"
        validation={EventEntitySubscriptionXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventActionValidation = {
  required: { value: true, message: "Action is required." },
  disabled: { value: true, message: "Action input is read only or disabled" },
};

export function EventAction(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventActionValidation}>
      <Field.Input
        name="event.action"
        label="Event Action"
        placeholder="event action"
        validation={EventActionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function EventAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventAidValidation}>
      <Field.Input
        name="event.aid"
        label="Author Id"
        placeholder="author id"
        validation={EventAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventCidValidation = {
  required: { value: true, message: "Cid is required." },
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function EventCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventCidValidation}>
      <Field.Input
        name="event.cid"
        label="Company Id"
        placeholder="company id"
        validation={EventCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventErrorCodeValidation = {
  disabled: { value: true, message: "Code input is read only or disabled" },
};

export function EventErrorCode(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={EventErrorCodeValidation}>
      <Field.NumberFormatInput
        name="event.error.code"
        label="Code"
        placeholder="code"
        validation={EventErrorCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventErrorMessageValidation = {
  required: { value: true, message: "Message is required." },
  disabled: { value: true, message: "Message input is read only or disabled" },
};

export function EventErrorMessage(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventErrorMessageValidation}>
      <Field.Input
        name="event.error.message"
        label="Message"
        placeholder="message"
        validation={EventErrorMessageValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventIdValidation = {
  required: { value: true, message: "Id is required." },
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function EventId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventIdValidation}>
      <Field.Input
        name="event.id"
        label="Event Id"
        placeholder="event id"
        validation={EventIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function EventMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventMetadataCreatedAtValidation}>
      <Field.Input
        name="event.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={EventMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function EventMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={EventMetadataLivenessValidation}>
      <Field.BooleanInput
        name="event.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={EventMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function EventMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventMetadataUpdatedAtValidation}>
      <Field.Input
        name="event.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={EventMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventOidValidation = {
  required: { value: true, message: "Oid is required." },
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function EventOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventOidValidation}>
      <Field.Input
        name="event.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={EventOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventRidValidation = {
  required: { value: true, message: "Rid is required." },
  disabled: { value: true, message: "Rid input is read only or disabled" },
};

export function EventRid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={EventRidValidation}>
      <Field.Input
        name="event.rid"
        label="Request Id"
        placeholder="request id"
        validation={EventRidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventSourceValidation = {
  required: { value: true, message: "Source is required." },
  disabled: { value: true, message: "Source input is read only or disabled" },
};

export function EventSource(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={EventSourceValidation}>
      <Field.RadioSelect
        name="event.source"
        label="Event Source"
        placeholder="event source"
        options={[
          { name: "Api", value: "api" },
          { name: "Kanda", value: "kanda" },
          { name: "Webhook", value: "webhook" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const EventSuccessValidation = {
  disabled: { value: true, message: "Success input is read only or disabled" },
};

export function EventSuccess(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={EventSuccessValidation}>
      <Field.BooleanInput
        name="event.success"
        label="Success"
        placeholder="success"
        validation={EventSuccessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function EventForm(props: any) {
  return (
    <>
      <EventEntityJobAid {...props} />
      <EventEntityJobArchived {...props} />
      <EventEntityJobCid {...props} />
      <EventEntityJobCustomerAddressBuildingName {...props} />
      <EventEntityJobCustomerAddressBuildingNumber {...props} />
      <EventEntityJobCustomerAddressCity {...props} />
      <EventEntityJobCustomerAddressCountry {...props} />
      <EventEntityJobCustomerAddressCounty {...props} />
      <EventEntityJobCustomerAddressLine1 {...props} />
      <EventEntityJobCustomerAddressLine2 {...props} />
      <EventEntityJobCustomerAddressMonthsAtAddress {...props} />
      <EventEntityJobCustomerAddressPostcode {...props} />
      <EventEntityJobCustomerEmail {...props} />
      <EventEntityJobCustomerFirstName {...props} />
      <EventEntityJobCustomerLastName {...props} />
      <EventEntityJobCustomerPhone {...props} />
      <EventEntityJobCustomerOptionsCheckoutOption {...props} />
      <EventEntityJobCustomerOptionsDepositValueAmount {...props} />
      <EventEntityJobCustomerOptionsDepositValueCurrency {...props} />
      <EventEntityJobCustomerOptionsFinanceOption {...props} />
      <EventEntityJobDepositType {...props} />
      <EventEntityJobDepositValueAmount {...props} />
      <EventEntityJobDepositValueCurrency {...props} />
      <EventEntityJobDescription {...props} />
      <EventEntityJobFinanceStatus {...props} />
      <EventEntityJobId {...props} />
      <EventEntityJobJobType {...props} />
      <EventEntityJobMetadataCreatedAt {...props} />
      <EventEntityJobMetadataLiveness {...props} />
      <EventEntityJobMetadataUpdatedAt {...props} />
      <EventEntityJobOid {...props} />
      <EventEntityJobSatNoteCertificateAid {...props} />
      <EventEntityJobSatNoteCertificateCid {...props} />
      <EventEntityJobSatNoteCertificateContent {...props} />
      <EventEntityJobSatNoteCertificateId {...props} />
      <EventEntityJobSatNoteCertificateMetadataCreatedAt {...props} />
      <EventEntityJobSatNoteCertificateMetadataLiveness {...props} />
      <EventEntityJobSatNoteCertificateMetadataUpdatedAt {...props} />
      <EventEntityJobSatNoteCertificateMimetype {...props} />
      <EventEntityJobSatNoteCertificateName {...props} />
      <EventEntityJobSatNoteCertificateOid {...props} />
      <EventEntityJobSatNoteQAdvice {...props} />
      <EventEntityJobSatNoteQApplication {...props} />
      <EventEntityJobSatNoteQAvailability {...props} />
      <EventEntityJobSatNoteQEasiness {...props} />
      <EventEntityJobSatNoteQPressure {...props} />
      <EventEntityJobSatNoteQSaving {...props} />
      <EventEntityJobSatNoteSignatureFingerprint {...props} />
      <EventEntityJobSatNoteSignatureSigned {...props} />
      <EventEntityJobSatNoteTimelineSentAt {...props} />
      <EventEntityJobSatNoteTimelineSignedAt {...props} />
      <EventEntityJobSatNoteTimelineViewedAt {...props} />
      <EventEntityJobStatus {...props} />
      <EventEntityJobTitle {...props} />
      <EventEntityJobTotalAmountVatAmount {...props} />
      <EventEntityJobTotalAmountVatCurrency {...props} />
      <EventEntityJobTotalAmountVatExclusiveAmount {...props} />
      <EventEntityJobTotalAmountVatExclusiveCurrency {...props} />
      <EventEntityJobTotalAmountVatInclusiveAmount {...props} />
      <EventEntityJobTotalAmountVatInclusiveCurrency {...props} />
      <EventEntityCompanyAid {...props} />
      <EventEntityCompanyBankAccountAccountName {...props} />
      <EventEntityCompanyBankAccountAccountNumber {...props} />
      <EventEntityCompanyBankAccountMonthsHeld {...props} />
      <EventEntityCompanyBankAccountSortCode {...props} />
      <EventEntityCompanyBilling {...props} />
      <EventEntityCompanyCid {...props} />
      <EventEntityCompanyCompanyInfoAverageJobValue {...props} />
      <EventEntityCompanyCompanyInfoAverageMonthlyJobs {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementAgreedTermsAndConditions
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementAgreedToBecomeIarOfKanda
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementContractAid {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementContractCid {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementContractContent
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementContractId {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementContractMetadataCreatedAt
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementContractMetadataLiveness
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementContractMetadataUpdatedAt
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementContractMimetype
        {...props}
      />
      <EventEntityCompanyCompanyInfoContractAgreementContractName {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementContractOid {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementPrintName {...props} />
      <EventEntityCompanyCompanyInfoContractAgreementSignedAt {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentAid {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentCid {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentContent {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentId {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentMetadataCreatedAt
        {...props}
      />
      <EventEntityCompanyCompanyInfoInsuranceDocumentMetadataLiveness
        {...props}
      />
      <EventEntityCompanyCompanyInfoInsuranceDocumentMetadataUpdatedAt
        {...props}
      />
      <EventEntityCompanyCompanyInfoInsuranceDocumentMimetype {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentName {...props} />
      <EventEntityCompanyCompanyInfoInsuranceDocumentOid {...props} />
      <EventEntityCompanyCompanyInfoTradeBodyName {...props} />
      <EventEntityCompanyCompanyInfoTradeBodyNumber {...props} />
      <EventEntityCompanyCompanyInfoTradeBody {...props} />
      <EventEntityCompanyCompanyInfoTradeTypeName {...props} />
      <EventEntityCompanyCompanyInfoTradeType {...props} />
      <EventEntityCompanyCompanyInfoUseSubcontractor {...props} />
      <EventEntityCompanyCompanyInfoWarrantyLength {...props} />
      <EventEntityCompanyCompanyLogoAid {...props} />
      <EventEntityCompanyCompanyLogoCid {...props} />
      <EventEntityCompanyCompanyLogoContent {...props} />
      <EventEntityCompanyCompanyLogoId {...props} />
      <EventEntityCompanyCompanyLogoMetadataCreatedAt {...props} />
      <EventEntityCompanyCompanyLogoMetadataLiveness {...props} />
      <EventEntityCompanyCompanyLogoMetadataUpdatedAt {...props} />
      <EventEntityCompanyCompanyLogoMimetype {...props} />
      <EventEntityCompanyCompanyLogoName {...props} />
      <EventEntityCompanyCompanyLogoOid {...props} />
      <EventEntityCompanyCompanyType {...props} />
      <EventEntityCompanyContactInfoContactAddressBuildingName {...props} />
      <EventEntityCompanyContactInfoContactAddressBuildingNumber {...props} />
      <EventEntityCompanyContactInfoContactAddressCity {...props} />
      <EventEntityCompanyContactInfoContactAddressCountry {...props} />
      <EventEntityCompanyContactInfoContactAddressCounty {...props} />
      <EventEntityCompanyContactInfoContactAddressLine1 {...props} />
      <EventEntityCompanyContactInfoContactAddressLine2 {...props} />
      <EventEntityCompanyContactInfoContactAddressMonthsAtAddress {...props} />
      <EventEntityCompanyContactInfoContactAddressPostcode {...props} />
      <EventEntityCompanyContactInfoContactEmail {...props} />
      <EventEntityCompanyContactInfoContactName {...props} />
      <EventEntityCompanyContactInfoContactPhone {...props} />
      <EventEntityCompanyContactInfoTradingName {...props} />
      <EventEntityCompanyId {...props} />
      <EventEntityCompanyLifecycle {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingName
        {...props}
      />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressBuildingNumber
        {...props}
      />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressCity {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressCountry {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressCounty {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressLine1 {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressLine2 {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressMonthsAtAddress
        {...props}
      />
      <EventEntityCompanyLimitedCompanyInfoCompanyAddressPostcode {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyName {...props} />
      <EventEntityCompanyLimitedCompanyInfoCompanyNumber {...props} />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingName
        {...props}
      />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressBuildingNumber
        {...props}
      />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressCity {...props} />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressCountry {...props} />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressCounty {...props} />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressLine1 {...props} />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressLine2 {...props} />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressMonthsAtAddress
        {...props}
      />
      <EventEntityCompanyLimitedCompanyInfoTradingAddressPostcode {...props} />
      <EventEntityCompanyLimitedCompanyInfoVatNumber {...props} />
      <EventEntityCompanyMetadataCreatedAt {...props} />
      <EventEntityCompanyMetadataLiveness {...props} />
      <EventEntityCompanyMetadataUpdatedAt {...props} />
      <EventEntityCompanyOid {...props} />
      <EventEntityCompanyQuotePreference {...props} />
      <EventEntityCompanyReferralCode {...props} />
      <EventEntityCompanySkipDeposit {...props} />
      <EventEntityCompanySolarCompanyInfoElectricalTradeAssociationNumber
        {...props}
      />
      <EventEntityCompanySolarCompanyInfoElectricalTradeAssociation
        {...props}
      />
      <EventEntityCompanySolarCompanyInfoEpvsRegistrationNumber {...props} />
      <EventEntityCompanySolarCompanyInfoSolarTradeAssociationNumber
        {...props}
      />
      <EventEntityCompanySolarCompanyInfoSolarTradeAssociation {...props} />
      <EventEntityCompanySoleTraderInfoNationalInsuranceNumber {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressBuildingName {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressBuildingNumber
        {...props}
      />
      <EventEntityCompanySoleTraderInfoTradingAddressCity {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressCountry {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressCounty {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressLine1 {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressLine2 {...props} />
      <EventEntityCompanySoleTraderInfoTradingAddressMonthsAtAddress
        {...props}
      />
      <EventEntityCompanySoleTraderInfoTradingAddressPostcode {...props} />
      <EventEntityCompanySoleTraderInfoTradingName {...props} />
      <EventEntityCreditAid {...props} />
      <EventEntityCreditAmountAmount {...props} />
      <EventEntityCreditAmountCurrency {...props} />
      <EventEntityCreditBankAccountAccountName {...props} />
      <EventEntityCreditBankAccountAccountNumber {...props} />
      <EventEntityCreditBankAccountMonthsHeld {...props} />
      <EventEntityCreditBankAccountSortCode {...props} />
      <EventEntityCreditCid {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressBuildingName {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressBuildingNumber
        {...props}
      />
      <EventEntityCreditCustomerDetailsCurrentAddressCity {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressCountry {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressCounty {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressLine1 {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressLine2 {...props} />
      <EventEntityCreditCustomerDetailsCurrentAddressMonthsAtAddress
        {...props}
      />
      <EventEntityCreditCustomerDetailsCurrentAddressPostcode {...props} />
      <EventEntityCreditCustomerDetailsDateOfBirth {...props} />
      <EventEntityCreditCustomerDetailsEmail {...props} />
      <EventEntityCreditCustomerDetailsFirstName {...props} />
      <EventEntityCreditCustomerDetailsGender {...props} />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingName
        {...props}
      />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressBuildingNumber
        {...props}
      />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressCity {...props} />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressCountry {...props} />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressCounty {...props} />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine1 {...props} />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressLine2 {...props} />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressMonthsAtAddress
        {...props}
      />
      <EventEntityCreditCustomerDetailsGoodsDeliveryAddressPostcode
        {...props}
      />
      <EventEntityCreditCustomerDetailsLastName {...props} />
      <EventEntityCreditCustomerDetailsMaidenName {...props} />
      <EventEntityCreditCustomerDetailsMaritalStatus {...props} />
      <EventEntityCreditCustomerDetailsMiddleName {...props} />
      <EventEntityCreditCustomerDetailsMobile {...props} />
      <EventEntityCreditCustomerDetailsMonthlyRentAmountAmount {...props} />
      <EventEntityCreditCustomerDetailsMonthlyRentAmountCurrency {...props} />
      <EventEntityCreditCustomerDetailsNumberOfDependants {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressOneBuildingName
        {...props}
      />
      <EventEntityCreditCustomerDetailsPreviousAddressOneBuildingNumber
        {...props}
      />
      <EventEntityCreditCustomerDetailsPreviousAddressOneCity {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressOneCountry {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressOneCounty {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressOneLine1 {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressOneLine2 {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressOneMonthsAtAddress
        {...props}
      />
      <EventEntityCreditCustomerDetailsPreviousAddressOnePostcode {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingName
        {...props}
      />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoBuildingNumber
        {...props}
      />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoCity {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoCountry {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoCounty {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoLine1 {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoLine2 {...props} />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoMonthsAtAddress
        {...props}
      />
      <EventEntityCreditCustomerDetailsPreviousAddressTwoPostcode {...props} />
      <EventEntityCreditCustomerDetailsResidentialStatus {...props} />
      <EventEntityCreditCustomerDetailsTelephone {...props} />
      <EventEntityCreditCustomerDetailsTitle {...props} />
      <EventEntityCreditDepositValueAmount {...props} />
      <EventEntityCreditDepositValueCurrency {...props} />
      <EventEntityCreditEmploymentDetailsEmployedDetailsEmployerName
        {...props}
      />
      <EventEntityCreditEmploymentDetailsEmployedDetailsMainOccupation
        {...props}
      />
      <EventEntityCreditEmploymentDetailsEmployedDetailsMonthsEmployed
        {...props}
      />
      <EventEntityCreditEmploymentDetailsEmploymentStatus {...props} />
      <EventEntityCreditEmploymentDetailsGrossAnnualIncomeAmount {...props} />
      <EventEntityCreditEmploymentDetailsGrossAnnualIncomeCurrency {...props} />
      <EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeAmount
        {...props}
      />
      <EventEntityCreditEmploymentDetailsHouseholdAnnualIncomeCurrency
        {...props}
      />
      <EventEntityCreditEmploymentDetailsNotEmployedDetailsSourceOfIncome
        {...props}
      />
      <EventEntityCreditEmploymentDetailsSelfEmployedDetailsBusinessName
        {...props}
      />
      <EventEntityCreditEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed
        {...props}
      />
      <EventEntityCreditEmploymentDetailsSelfEmployedDetailsTypeOfBusiness
        {...props}
      />
      <EventEntityCreditFinanceDetailsBankrupcyOrIvaInLast5Years {...props} />
      <EventEntityCreditFinanceOption {...props} />
      <EventEntityCreditId {...props} />
      <EventEntityCreditKid {...props} />
      <EventEntityCreditKind {...props} />
      <EventEntityCreditMetadataCreatedAt {...props} />
      <EventEntityCreditMetadataLiveness {...props} />
      <EventEntityCreditMetadataUpdatedAt {...props} />
      <EventEntityCreditOid {...props} />
      <EventEntityCreditProvider {...props} />
      <EventEntityCreditSignatureFingerprint {...props} />
      <EventEntityCreditSignatureSigned {...props} />
      <EventEntityCreditState {...props} />
      <EventEntityCreditXid {...props} />
      <EventEntityCreditXref {...props} />
      <EventEntityDocumentAid {...props} />
      <EventEntityDocumentCid {...props} />
      <EventEntityDocumentContent {...props} />
      <EventEntityDocumentId {...props} />
      <EventEntityDocumentMetadataCreatedAt {...props} />
      <EventEntityDocumentMetadataLiveness {...props} />
      <EventEntityDocumentMetadataUpdatedAt {...props} />
      <EventEntityDocumentMimetype {...props} />
      <EventEntityDocumentName {...props} />
      <EventEntityDocumentOid {...props} />
      <EventEntityPaymentAid {...props} />
      <EventEntityPaymentCid {...props} />
      <EventEntityPaymentId {...props} />
      <EventEntityPaymentKid {...props} />
      <EventEntityPaymentKind {...props} />
      <EventEntityPaymentMetadataCreatedAt {...props} />
      <EventEntityPaymentMetadataLiveness {...props} />
      <EventEntityPaymentMetadataUpdatedAt {...props} />
      <EventEntityPaymentOid {...props} />
      <EventEntityPaymentPaymentOptionAmountAmount {...props} />
      <EventEntityPaymentPaymentOptionAmountCurrency {...props} />
      <EventEntityPaymentPaymentOptionPaymentMethod {...props} />
      <EventEntityPaymentStatus {...props} />
      <EventEntityPaymentXid {...props} />
      <EventEntityPaymentXref {...props} />
      <EventEntitySubscriptionAid {...props} />
      <EventEntitySubscriptionAmountAmount {...props} />
      <EventEntitySubscriptionAmountCurrency {...props} />
      <EventEntitySubscriptionAuthorisationUrl {...props} />
      <EventEntitySubscriptionBillingStatus {...props} />
      <EventEntitySubscriptionBilling {...props} />
      <EventEntitySubscriptionCid {...props} />
      <EventEntitySubscriptionDayOfMonth {...props} />
      <EventEntitySubscriptionId {...props} />
      <EventEntitySubscriptionInterval {...props} />
      <EventEntitySubscriptionMandateStatus {...props} />
      <EventEntitySubscriptionMandate {...props} />
      <EventEntitySubscriptionMetadataCreatedAt {...props} />
      <EventEntitySubscriptionMetadataLiveness {...props} />
      <EventEntitySubscriptionMetadataUpdatedAt {...props} />
      <EventEntitySubscriptionOid {...props} />
      <EventEntitySubscriptionXid {...props} />
      <EventEntitySubscriptionXref {...props} />
      <EventAction {...props} />
      <EventAid {...props} />
      <EventCid {...props} />
      <EventErrorCode {...props} />
      <EventErrorMessage {...props} />
      <EventId {...props} />
      <EventMetadataCreatedAt {...props} />
      <EventMetadataLiveness {...props} />
      <EventMetadataUpdatedAt {...props} />
      <EventOid {...props} />
      <EventRid {...props} />
      <EventSource {...props} />
      <EventSuccess {...props} />
    </>
  );
}

export const JobItemDescriptionValidation = {
  minLength: { value: 1, message: "Description requires minimum length of 1" },
};

export function JobItemDescription(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemDescriptionValidation}>
      <Field.Input
        name="job_item.description"
        label="Job Item Description"
        placeholder="job item description"
        validation={JobItemDescriptionValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemPriceAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobItemPriceAmount(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={JobItemPriceAmountValidation}>
      <Field.NumberFormatInput
        name="job_item.price.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobItemPriceAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemPriceCurrencyValidation = {};

export function JobItemPriceCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobItemPriceCurrencyValidation}>
      <Field.RadioSelect
        name="job_item.price.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuantityValidation = {
  required: { value: true, message: "Quantity is required." },
  min: { value: 0, message: "Quantity must be great than 0" },
  max: {
    value: 2147483647,
    message: "Quantity must be smaller than 2.147483647e+09",
  },
};

export function JobItemQuantity(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={JobItemQuantityValidation}>
      <Field.NumberFormatInput
        name="job_item.quantity"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobItemQuantityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobItemQuoteDocumentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentAidValidation}>
      <Field.Input
        name="job_item.quote_document.aid"
        label="Author Id"
        placeholder="author id"
        validation={JobItemQuoteDocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobItemQuoteDocumentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentCidValidation}>
      <Field.Input
        name="job_item.quote_document.cid"
        label="Company Id"
        placeholder="company id"
        validation={JobItemQuoteDocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function JobItemQuoteDocumentContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentContentValidation}>
      <Field.File
        name="job_item.quote_document.content"
        label="Document Content"
        placeholder="document content"
        validation={JobItemQuoteDocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobItemQuoteDocumentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentIdValidation}>
      <Field.Input
        name="job_item.quote_document.id"
        label="Document Id"
        placeholder="document id"
        validation={JobItemQuoteDocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobItemQuoteDocumentMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobItemQuoteDocumentMetadataCreatedAtValidation}
    >
      <Field.Input
        name="job_item.quote_document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={JobItemQuoteDocumentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobItemQuoteDocumentMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={JobItemQuoteDocumentMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="job_item.quote_document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={JobItemQuoteDocumentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobItemQuoteDocumentMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobItemQuoteDocumentMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="job_item.quote_document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={JobItemQuoteDocumentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function JobItemQuoteDocumentMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentMimetypeValidation}>
      <Field.Input
        name="job_item.quote_document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={JobItemQuoteDocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function JobItemQuoteDocumentName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentNameValidation}>
      <Field.Input
        name="job_item.quote_document.name"
        label="Document Name"
        placeholder="document name"
        validation={JobItemQuoteDocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemQuoteDocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobItemQuoteDocumentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemQuoteDocumentOidValidation}>
      <Field.Input
        name="job_item.quote_document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={JobItemQuoteDocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemStyleValidation = {
  disabled: { value: true, message: "Style input is read only or disabled" },
};

export function JobItemStyle(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobItemStyleValidation}>
      <Field.RadioSelect
        name="job_item.style"
        label="Style"
        placeholder="style"
        options={[
          { name: "Kanda", value: "kanda" },
          { name: "Custom", value: "custom" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemTitleValidation = {
  required: { value: true, message: "Title is required." },
  minLength: { value: 1, message: "Title requires minimum length of 1" },
};

export function JobItemTitle(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobItemTitleValidation}>
      <Field.Input
        name="job_item.title"
        label="Job Item Title"
        placeholder="job item title"
        validation={JobItemTitleValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemVatAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function JobItemVatAmount(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={JobItemVatAmountValidation}>
      <Field.NumberFormatInput
        name="job_item.vat.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={JobItemVatAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemVatCurrencyValidation = {};

export function JobItemVatCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={JobItemVatCurrencyValidation}>
      <Field.RadioSelect
        name="job_item.vat.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobItemVatRateValidation = {};

export function JobItemVatRate(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={JobItemVatRateValidation}>
      <Field.Select
        name="job_item.vat_rate"
        label="Vat Applicable Rate"
        placeholder="vat applicable rate"
        options={[
          { name: "Vat Not Set", value: "vat_not_set" },
          { name: "Exempted", value: "exempted" },
          { name: "0%", value: "0%" },
          { name: "5%", value: "5%" },
          { name: "20%", value: "20%" },
          { name: "Custom", value: "custom" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function JobItemForm(props: any) {
  return (
    <>
      <JobItemDescription {...props} />
      <JobItemPriceAmount {...props} />
      <JobItemPriceCurrency {...props} />
      <JobItemQuantity {...props} />
      <JobItemQuoteDocumentAid {...props} />
      <JobItemQuoteDocumentCid {...props} />
      <JobItemQuoteDocumentContent {...props} />
      <JobItemQuoteDocumentId {...props} />
      <JobItemQuoteDocumentMetadataCreatedAt {...props} />
      <JobItemQuoteDocumentMetadataLiveness {...props} />
      <JobItemQuoteDocumentMetadataUpdatedAt {...props} />
      <JobItemQuoteDocumentMimetype {...props} />
      <JobItemQuoteDocumentName {...props} />
      <JobItemQuoteDocumentOid {...props} />
      <JobItemStyle {...props} />
      <JobItemTitle {...props} />
      <JobItemVatAmount {...props} />
      <JobItemVatCurrency {...props} />
      <JobItemVatRate {...props} />
    </>
  );
}

export const SatNoteCertificateAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function SatNoteCertificateAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteCertificateAidValidation}>
      <Field.Input
        name="sat_note.certificate.aid"
        label="Author Id"
        placeholder="author id"
        validation={SatNoteCertificateAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function SatNoteCertificateCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteCertificateCidValidation}>
      <Field.Input
        name="sat_note.certificate.cid"
        label="Company Id"
        placeholder="company id"
        validation={SatNoteCertificateCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function SatNoteCertificateContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={SatNoteCertificateContentValidation}>
      <Field.File
        name="sat_note.certificate.content"
        label="Document Content"
        placeholder="document content"
        validation={SatNoteCertificateContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function SatNoteCertificateId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteCertificateIdValidation}>
      <Field.Input
        name="sat_note.certificate.id"
        label="Document Id"
        placeholder="document id"
        validation={SatNoteCertificateIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function SatNoteCertificateMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={SatNoteCertificateMetadataCreatedAtValidation}>
      <Field.Input
        name="sat_note.certificate.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={SatNoteCertificateMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function SatNoteCertificateMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={SatNoteCertificateMetadataLivenessValidation}>
      <Field.BooleanInput
        name="sat_note.certificate.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={SatNoteCertificateMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function SatNoteCertificateMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={SatNoteCertificateMetadataUpdatedAtValidation}>
      <Field.Input
        name="sat_note.certificate.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={SatNoteCertificateMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function SatNoteCertificateMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteCertificateMimetypeValidation}>
      <Field.Input
        name="sat_note.certificate.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={SatNoteCertificateMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function SatNoteCertificateName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteCertificateNameValidation}>
      <Field.Input
        name="sat_note.certificate.name"
        label="Document Name"
        placeholder="document name"
        validation={SatNoteCertificateNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteCertificateOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function SatNoteCertificateOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteCertificateOidValidation}>
      <Field.Input
        name="sat_note.certificate.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={SatNoteCertificateOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteQAdviceValidation = {
  required: { value: true, message: "Q Advice is required." },
};

export function SatNoteQAdvice(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={SatNoteQAdviceValidation}>
      <Field.Select
        name="sat_note.q_advice"
        label="What Advice Did The Installer Give You On Your Finance Application?"
        placeholder="What advice did the installer give you on your finance application?"
        options={[
          {
            name: "They Just Sent Me A Link To Apply",
            value: "They just sent me a link to apply",
          },
          {
            name: "They Told Me What Rates Where Available",
            value: "They told me what rates where available",
          },
          {
            name: "They Helped Me Work Out My Potential Repayments",
            value: "They helped me work out my potential repayments",
          },
          {
            name: "They Completed The Application For Me",
            value: "They completed the application for me",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteQApplicationValidation = {
  required: { value: true, message: "Q Application is required." },
};

export function SatNoteQApplication(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={SatNoteQApplicationValidation}>
      <Field.Select
        name="sat_note.q_application"
        label="Who Completed Your Application For Finance?"
        placeholder="Who completed your application for finance?"
        options={[
          {
            name: "I Completed The Application Myself",
            value: "I completed the application myself",
          },
          {
            name: "Someone Completed The Appliation On My Behalf",
            value: "Someone completed the appliation on my behalf",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteQAvailabilityValidation = {
  required: { value: true, message: "Q Availability is required." },
};

export function SatNoteQAvailability(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={SatNoteQAvailabilityValidation}>
      <Field.Select
        name="sat_note.q_availability"
        label="How Did You First Become Aware That Finance Was Available?"
        placeholder="How did you first become aware that finance was available?"
        options={[
          {
            name: "The Installer Told Me When Quoting Me",
            value: "The installer told me when quoting me",
          },
          {
            name: "I Saw It Advertised By The Installer",
            value: "I saw it advertised by the installer",
          },
          {
            name: "I Found Out When The Installer Sent Me A Link Via Kanda",
            value: "I found out when the installer sent me a link via Kanda",
          },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteQEasinessValidation = {
  required: { value: true, message: "Q Easiness is required." },
};

export function SatNoteQEasiness(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={SatNoteQEasinessValidation}>
      <Field.Select
        name="sat_note.q_easiness"
        label="Do You Find It Hard To Apply For Finance With Kanda?"
        placeholder="Do you find it hard to apply for finance with Kanda?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteQPressureValidation = {
  required: { value: true, message: "Q Pressure is required." },
};

export function SatNoteQPressure(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={SatNoteQPressureValidation}>
      <Field.Select
        name="sat_note.q_pressure"
        label="Did The Installer Pressure You To Apply For Finance?"
        placeholder="Did the installer pressure you to apply for finance?"
        options={[
          { name: "No", value: "no" },
          { name: "Somewhat", value: "somewhat" },
          { name: "Yes", value: "yes" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteQSavingValidation = {};

export function SatNoteQSaving(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={SatNoteQSavingValidation}>
      <Field.RadioSelect
        name="sat_note.q_saving"
        label="Were You Told About Any Potential Feed In Tariffs, Savings, Returns Or Renewable Heat Incentive And Do You Understand That The Actual Amounts  You  Receive, And Your Estimated Returns/Savings Were Based On Varying Factors Including You Own Energy Consumption And Any Returns/Savings/Payback Periods Are Not Linked To Your Repayments On This Agreement."
        placeholder="Were you told about any potential feed in tariffs, savings, returns or Renewable Heat incentive and do you understand that the actual amounts  you  receive, and your estimated returns/savings were based on varying factors including you own energy consumption and any returns/savings/payback periods are not linked to your repayments on this agreement."
        options={[
          { name: "Yes I Understand", value: "Yes I understand" },
          { name: "No I Don'T Understand", value: "No I don't understand" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function SatNoteSignatureFingerprint(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SatNoteSignatureFingerprintValidation}>
      <Field.Input
        name="sat_note.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={SatNoteSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SatNoteSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function SatNoteSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={SatNoteSignatureSignedValidation}>
      <Field.RadioSelect
        name="sat_note.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function SatNoteForm(props: any) {
  return (
    <>
      <SatNoteCertificateAid {...props} />
      <SatNoteCertificateCid {...props} />
      <SatNoteCertificateContent {...props} />
      <SatNoteCertificateId {...props} />
      <SatNoteCertificateMetadataCreatedAt {...props} />
      <SatNoteCertificateMetadataLiveness {...props} />
      <SatNoteCertificateMetadataUpdatedAt {...props} />
      <SatNoteCertificateMimetype {...props} />
      <SatNoteCertificateName {...props} />
      <SatNoteCertificateOid {...props} />
      <SatNoteQAdvice {...props} />
      <SatNoteQApplication {...props} />
      <SatNoteQAvailability {...props} />
      <SatNoteQEasiness {...props} />
      <SatNoteQPressure {...props} />
      <SatNoteQSaving {...props} />
      <SatNoteSignatureFingerprint {...props} />
      <SatNoteSignatureSigned {...props} />
    </>
  );
}

export const SignDocumentQuoteAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function SignDocumentQuoteAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteAidValidation}>
      <Field.Input
        name="sign_document.quote.aid"
        label="Author Id"
        placeholder="author id"
        validation={SignDocumentQuoteAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function SignDocumentQuoteCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteCidValidation}>
      <Field.Input
        name="sign_document.quote.cid"
        label="Company Id"
        placeholder="company id"
        validation={SignDocumentQuoteCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function SignDocumentQuoteContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteContentValidation}>
      <Field.File
        name="sign_document.quote.content"
        label="Document Content"
        placeholder="document content"
        validation={SignDocumentQuoteContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function SignDocumentQuoteId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteIdValidation}>
      <Field.Input
        name="sign_document.quote.id"
        label="Document Id"
        placeholder="document id"
        validation={SignDocumentQuoteIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function SignDocumentQuoteMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteMetadataCreatedAtValidation}>
      <Field.Input
        name="sign_document.quote.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={SignDocumentQuoteMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function SignDocumentQuoteMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={SignDocumentQuoteMetadataLivenessValidation}>
      <Field.BooleanInput
        name="sign_document.quote.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={SignDocumentQuoteMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function SignDocumentQuoteMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteMetadataUpdatedAtValidation}>
      <Field.Input
        name="sign_document.quote.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={SignDocumentQuoteMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function SignDocumentQuoteMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteMimetypeValidation}>
      <Field.Input
        name="sign_document.quote.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={SignDocumentQuoteMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function SignDocumentQuoteName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteNameValidation}>
      <Field.Input
        name="sign_document.quote.name"
        label="Document Name"
        placeholder="document name"
        validation={SignDocumentQuoteNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentQuoteOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function SignDocumentQuoteOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentQuoteOidValidation}>
      <Field.Input
        name="sign_document.quote.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={SignDocumentQuoteOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentSignatureFingerprintValidation = {
  required: { value: true, message: "Fingerprint is required." },
};

export function SignDocumentSignatureFingerprint(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SignDocumentSignatureFingerprintValidation}>
      <Field.Input
        name="sign_document.signature.fingerprint"
        label="Fingerprint Reference Such As IP"
        placeholder="fingerprint reference such as IP"
        validation={SignDocumentSignatureFingerprintValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SignDocumentSignatureSignedValidation = {
  required: { value: true, message: "Signed is required." },
};

export function SignDocumentSignatureSigned(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={SignDocumentSignatureSignedValidation}>
      <Field.RadioSelect
        name="sign_document.signature.signed"
        label="Signed Your Signature"
        placeholder="signed your signature"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function SignDocumentForm(props: any) {
  return (
    <>
      <SignDocumentQuoteAid {...props} />
      <SignDocumentQuoteCid {...props} />
      <SignDocumentQuoteContent {...props} />
      <SignDocumentQuoteId {...props} />
      <SignDocumentQuoteMetadataCreatedAt {...props} />
      <SignDocumentQuoteMetadataLiveness {...props} />
      <SignDocumentQuoteMetadataUpdatedAt {...props} />
      <SignDocumentQuoteMimetype {...props} />
      <SignDocumentQuoteName {...props} />
      <SignDocumentQuoteOid {...props} />
      <SignDocumentSignatureFingerprint {...props} />
      <SignDocumentSignatureSigned {...props} />
    </>
  );
}

export const DirectorInfoDateOfBirthValidation = {};

export function DirectorInfoDateOfBirth(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DirectorInfoDateOfBirthValidation}>
      <Field.Input
        name="director_info.date_of_birth"
        label="Date Of Birth"
        placeholder="date of birth"
        validation={DirectorInfoDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function DirectorInfoHomeAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressBuildingNameValidation}>
      <Field.Input
        name="director_info.home_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={DirectorInfoHomeAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function DirectorInfoHomeAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={DirectorInfoHomeAddressBuildingNumberValidation}
    >
      <Field.Input
        name="director_info.home_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={DirectorInfoHomeAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function DirectorInfoHomeAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressCityValidation}>
      <Field.Input
        name="director_info.home_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={DirectorInfoHomeAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function DirectorInfoHomeAddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressCountryValidation}>
      <Field.Input
        name="director_info.home_address.country"
        label="Country"
        placeholder="country"
        validation={DirectorInfoHomeAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function DirectorInfoHomeAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressCountyValidation}>
      <Field.Input
        name="director_info.home_address.county"
        label="County / State"
        placeholder="county / state"
        validation={DirectorInfoHomeAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function DirectorInfoHomeAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressLine1Validation}>
      <Field.Input
        name="director_info.home_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={DirectorInfoHomeAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function DirectorInfoHomeAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressLine2Validation}>
      <Field.Input
        name="director_info.home_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={DirectorInfoHomeAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function DirectorInfoHomeAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={DirectorInfoHomeAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="director_info.home_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={DirectorInfoHomeAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoHomeAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function DirectorInfoHomeAddressPostcode(props: FieldProps["Postcode"]) {
  return (
    <Field.Validator validation={DirectorInfoHomeAddressPostcodeValidation}>
      <Field.Postcode
        name="director_info.home_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={DirectorInfoHomeAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DirectorInfoVerificationStatusValidation = {
  disabled: {
    value: true,
    message: "Verification Status input is read only or disabled",
  },
};

export function DirectorInfoVerificationStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={DirectorInfoVerificationStatusValidation}>
      <Field.Select
        name="director_info.verification_status"
        label="Verification Status"
        placeholder="verification status"
        options={[
          { name: "Not Verified", value: "not_verified" },
          { name: "Verification Submitted", value: "verification_submitted" },
          { name: "Verification Declined", value: "verification_declined" },
          { name: "Verified", value: "verified" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function DirectorInfoForm(props: any) {
  return (
    <>
      <DirectorInfoDateOfBirth {...props} />
      <DirectorInfoHomeAddressBuildingName {...props} />
      <DirectorInfoHomeAddressBuildingNumber {...props} />
      <DirectorInfoHomeAddressCity {...props} />
      <DirectorInfoHomeAddressCountry {...props} />
      <DirectorInfoHomeAddressCounty {...props} />
      <DirectorInfoHomeAddressLine1 {...props} />
      <DirectorInfoHomeAddressLine2 {...props} />
      <DirectorInfoHomeAddressMonthsAtAddress {...props} />
      <DirectorInfoHomeAddressPostcode {...props} />
      <DirectorInfoVerificationStatus {...props} />
    </>
  );
}

export const DocumentAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function DocumentAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentAidValidation}>
      <Field.Input
        name="document.aid"
        label="Author Id"
        placeholder="author id"
        validation={DocumentAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function DocumentCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentCidValidation}>
      <Field.Input
        name="document.cid"
        label="Company Id"
        placeholder="company id"
        validation={DocumentCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function DocumentContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={DocumentContentValidation}>
      <Field.File
        name="document.content"
        label="Document Content"
        placeholder="document content"
        validation={DocumentContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function DocumentId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentIdValidation}>
      <Field.Input
        name="document.id"
        label="Document Id"
        placeholder="document id"
        validation={DocumentIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function DocumentMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentMetadataCreatedAtValidation}>
      <Field.Input
        name="document.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={DocumentMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function DocumentMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={DocumentMetadataLivenessValidation}>
      <Field.BooleanInput
        name="document.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={DocumentMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function DocumentMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentMetadataUpdatedAtValidation}>
      <Field.Input
        name="document.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={DocumentMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function DocumentMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentMimetypeValidation}>
      <Field.Input
        name="document.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={DocumentMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function DocumentName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentNameValidation}>
      <Field.Input
        name="document.name"
        label="Document Name"
        placeholder="document name"
        validation={DocumentNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const DocumentOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function DocumentOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={DocumentOidValidation}>
      <Field.Input
        name="document.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={DocumentOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function DocumentForm(props: any) {
  return (
    <>
      <DocumentAid {...props} />
      <DocumentCid {...props} />
      <DocumentContent {...props} />
      <DocumentId {...props} />
      <DocumentMetadataCreatedAt {...props} />
      <DocumentMetadataLiveness {...props} />
      <DocumentMetadataUpdatedAt {...props} />
      <DocumentMimetype {...props} />
      <DocumentName {...props} />
      <DocumentOid {...props} />
    </>
  );
}

export const InfoAuthContinueUrlValidation = {};

export function InfoAuthContinueUrl(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoAuthContinueUrlValidation}>
      <Field.Input
        name="info_auth.continue_url"
        label="Continue Url"
        placeholder="continue url"
        validation={InfoAuthContinueUrlValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoAuthEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function InfoAuthEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoAuthEmailValidation}>
      <Field.Input
        name="info_auth.email"
        label="Email"
        placeholder="email"
        validation={InfoAuthEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function InfoAuthForm(props: any) {
  return (
    <>
      <InfoAuthContinueUrl {...props} />
      <InfoAuthEmail {...props} />
    </>
  );
}

export const MoneyAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function MoneyAmount(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={MoneyAmountValidation}>
      <Field.NumberFormatInput
        name="money.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={MoneyAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const MoneyCurrencyValidation = {};

export function MoneyCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={MoneyCurrencyValidation}>
      <Field.RadioSelect
        name="money.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export function MoneyForm(props: any) {
  return (
    <>
      <MoneyAmount {...props} />
      <MoneyCurrency {...props} />
    </>
  );
}

export const InfoGhostBearerTokenValidation = {};

export function InfoGhostBearerToken(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoGhostBearerTokenValidation}>
      <Field.Input
        name="info_ghost.bearer_token"
        label="Bearer Token"
        placeholder="bearer token"
        validation={InfoGhostBearerTokenValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoGhostCustomRoleValidation = {};

export function InfoGhostCustomRole(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoGhostCustomRoleValidation}>
      <Field.Input
        name="info_ghost.custom_role"
        label="Custom Role Set For Ghosted User"
        placeholder="custom role set for ghosted user"
        validation={InfoGhostCustomRoleValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoGhostCustomTokenValidation = {};

export function InfoGhostCustomToken(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoGhostCustomTokenValidation}>
      <Field.Input
        name="info_ghost.custom_token"
        label="Custom Token"
        placeholder="custom token"
        validation={InfoGhostCustomTokenValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoGhostEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function InfoGhostEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoGhostEmailValidation}>
      <Field.Input
        name="info_ghost.email"
        label="Email For Ghosted User"
        placeholder="email for ghosted user"
        validation={InfoGhostEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function InfoGhostForm(props: any) {
  return (
    <>
      <InfoGhostBearerToken {...props} />
      <InfoGhostCustomRole {...props} />
      <InfoGhostCustomToken {...props} />
      <InfoGhostEmail {...props} />
    </>
  );
}

export const InfoIPIpv4Validation = {
  required: { value: true, message: "Ipv4 is required." },
};

export function InfoIPIpv4(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoIPIpv4Validation}>
      <Field.Input
        name="info_ip.ipv4"
        label="Ipv4 Address"
        placeholder="ipv4 address"
        validation={InfoIPIpv4Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export function InfoIPForm(props: any) {
  return (
    <>
      <InfoIPIpv4 {...props} />
    </>
  );
}

export const LimitedCompanyInfoCompanyAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function LimitedCompanyInfoCompanyAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressBuildingNameValidation}
    >
      <Field.Input
        name="limited_company_info.company_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={LimitedCompanyInfoCompanyAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function LimitedCompanyInfoCompanyAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressBuildingNumberValidation}
    >
      <Field.Input
        name="limited_company_info.company_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={LimitedCompanyInfoCompanyAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function LimitedCompanyInfoCompanyAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressCityValidation}
    >
      <Field.Input
        name="limited_company_info.company_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={LimitedCompanyInfoCompanyAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function LimitedCompanyInfoCompanyAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressCountryValidation}
    >
      <Field.Input
        name="limited_company_info.company_address.country"
        label="Country"
        placeholder="country"
        validation={LimitedCompanyInfoCompanyAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function LimitedCompanyInfoCompanyAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressCountyValidation}
    >
      <Field.Input
        name="limited_company_info.company_address.county"
        label="County / State"
        placeholder="county / state"
        validation={LimitedCompanyInfoCompanyAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function LimitedCompanyInfoCompanyAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressLine1Validation}
    >
      <Field.Input
        name="limited_company_info.company_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={LimitedCompanyInfoCompanyAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function LimitedCompanyInfoCompanyAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressLine2Validation}
    >
      <Field.Input
        name="limited_company_info.company_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={LimitedCompanyInfoCompanyAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function LimitedCompanyInfoCompanyAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="limited_company_info.company_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={LimitedCompanyInfoCompanyAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function LimitedCompanyInfoCompanyAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoCompanyAddressPostcodeValidation}
    >
      <Field.Postcode
        name="limited_company_info.company_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={LimitedCompanyInfoCompanyAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyNameValidation = {
  required: { value: true, message: "Company Name is required." },
  minLength: { value: 1, message: "Company Name requires minimum length of 1" },
};

export function LimitedCompanyInfoCompanyName(props: FieldProps["Company"]) {
  return (
    <Field.Validator validation={LimitedCompanyInfoCompanyNameValidation}>
      <Field.Company
        name="limited_company_info.company_name"
        label="Company Name"
        placeholder="company name"
        validation={LimitedCompanyInfoCompanyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoCompanyNumberValidation = {
  required: { value: true, message: "Company Number is required." },
  minLength: {
    value: 1,
    message: "Company Number requires minimum length of 1",
  },
};

export function LimitedCompanyInfoCompanyNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={LimitedCompanyInfoCompanyNumberValidation}>
      <Field.Input
        name="limited_company_info.company_number"
        label="Company Number"
        placeholder="company number"
        validation={LimitedCompanyInfoCompanyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function LimitedCompanyInfoTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressBuildingNameValidation}
    >
      <Field.Input
        name="limited_company_info.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={LimitedCompanyInfoTradingAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function LimitedCompanyInfoTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressBuildingNumberValidation}
    >
      <Field.Input
        name="limited_company_info.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={LimitedCompanyInfoTradingAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function LimitedCompanyInfoTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressCityValidation}
    >
      <Field.Input
        name="limited_company_info.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={LimitedCompanyInfoTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function LimitedCompanyInfoTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressCountryValidation}
    >
      <Field.Input
        name="limited_company_info.trading_address.country"
        label="Country"
        placeholder="country"
        validation={LimitedCompanyInfoTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function LimitedCompanyInfoTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressCountyValidation}
    >
      <Field.Input
        name="limited_company_info.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={LimitedCompanyInfoTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function LimitedCompanyInfoTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressLine1Validation}
    >
      <Field.Input
        name="limited_company_info.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={LimitedCompanyInfoTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function LimitedCompanyInfoTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressLine2Validation}
    >
      <Field.Input
        name="limited_company_info.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={LimitedCompanyInfoTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function LimitedCompanyInfoTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="limited_company_info.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={LimitedCompanyInfoTradingAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function LimitedCompanyInfoTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={LimitedCompanyInfoTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="limited_company_info.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={LimitedCompanyInfoTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const LimitedCompanyInfoVatNumberValidation = {
  minLength: { value: 1, message: "Vat Number requires minimum length of 1" },
  pattern: {
    value: /^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/,
    message: "Vat Number input is invalid",
  },
};

export function LimitedCompanyInfoVatNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={LimitedCompanyInfoVatNumberValidation}>
      <Field.Input
        name="limited_company_info.vat_number"
        label="Vat Number"
        placeholder="vat number"
        validation={LimitedCompanyInfoVatNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function LimitedCompanyInfoForm(props: any) {
  return (
    <>
      <LimitedCompanyInfoCompanyAddressBuildingName {...props} />
      <LimitedCompanyInfoCompanyAddressBuildingNumber {...props} />
      <LimitedCompanyInfoCompanyAddressCity {...props} />
      <LimitedCompanyInfoCompanyAddressCountry {...props} />
      <LimitedCompanyInfoCompanyAddressCounty {...props} />
      <LimitedCompanyInfoCompanyAddressLine1 {...props} />
      <LimitedCompanyInfoCompanyAddressLine2 {...props} />
      <LimitedCompanyInfoCompanyAddressMonthsAtAddress {...props} />
      <LimitedCompanyInfoCompanyAddressPostcode {...props} />
      <LimitedCompanyInfoCompanyName {...props} />
      <LimitedCompanyInfoCompanyNumber {...props} />
      <LimitedCompanyInfoTradingAddressBuildingName {...props} />
      <LimitedCompanyInfoTradingAddressBuildingNumber {...props} />
      <LimitedCompanyInfoTradingAddressCity {...props} />
      <LimitedCompanyInfoTradingAddressCountry {...props} />
      <LimitedCompanyInfoTradingAddressCounty {...props} />
      <LimitedCompanyInfoTradingAddressLine1 {...props} />
      <LimitedCompanyInfoTradingAddressLine2 {...props} />
      <LimitedCompanyInfoTradingAddressMonthsAtAddress {...props} />
      <LimitedCompanyInfoTradingAddressPostcode {...props} />
      <LimitedCompanyInfoVatNumber {...props} />
    </>
  );
}

export const MetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function MetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={MetadataCreatedAtValidation}>
      <Field.Input
        name="metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={MetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const MetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function MetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={MetadataLivenessValidation}>
      <Field.BooleanInput
        name="metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={MetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const MetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function MetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={MetadataUpdatedAtValidation}>
      <Field.Input
        name="metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={MetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function MetadataForm(props: any) {
  return (
    <>
      <MetadataCreatedAt {...props} />
      <MetadataLiveness {...props} />
      <MetadataUpdatedAt {...props} />
    </>
  );
}

export const ApplicantDetailsBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function ApplicantDetailsBankAccountAccountName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsBankAccountAccountNameValidation}
    >
      <Field.Input
        name="applicant_details.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={ApplicantDetailsBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function ApplicantDetailsBankAccountAccountNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsBankAccountAccountNumberValidation}
    >
      <Field.Input
        name="applicant_details.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={ApplicantDetailsBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function ApplicantDetailsBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsBankAccountMonthsHeldValidation}
    >
      <Field.NumberFormatInput
        name="applicant_details.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={ApplicantDetailsBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function ApplicantDetailsBankAccountSortCode(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={ApplicantDetailsBankAccountSortCodeValidation}>
      <Field.Input
        name="applicant_details.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={ApplicantDetailsBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsCurrentAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsCurrentAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsCurrentAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsCurrentAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsCurrentAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsCurrentAddressCityValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={ApplicantDetailsCustomerDetailsCurrentAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsCurrentAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsCurrentAddressCountryValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.country"
        label="Country"
        placeholder="country"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsCurrentAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsCurrentAddressCountyValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsCurrentAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsCurrentAddressLine1Validation}
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsCurrentAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsCurrentAddressLine2Validation}
    >
      <Field.Input
        name="applicant_details.customer_details.current_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsCustomerDetailsCurrentAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsCurrentAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.customer_details.current_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsCurrentAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function ApplicantDetailsCustomerDetailsCurrentAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsCurrentAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="applicant_details.customer_details.current_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          ApplicantDetailsCustomerDetailsCurrentAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsDateOfBirthValidation = {
  required: { value: true, message: "Date Of Birth is required." },
};

export function ApplicantDetailsCustomerDetailsDateOfBirth(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsDateOfBirthValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.date_of_birth"
        label="Date Of Birth"
        placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
        validation={ApplicantDetailsCustomerDetailsDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function ApplicantDetailsCustomerDetailsEmail(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsEmailValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.email"
        label="Email"
        placeholder="email"
        validation={ApplicantDetailsCustomerDetailsEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
};

export function ApplicantDetailsCustomerDetailsFirstName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsFirstNameValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.first_name"
        label="First Name"
        placeholder="first name"
        validation={ApplicantDetailsCustomerDetailsFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGenderValidation = {
  required: { value: true, message: "Gender is required." },
};

export function ApplicantDetailsCustomerDetailsGender(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsGenderValidation}
    >
      <Field.RadioSelect
        name="applicant_details.customer_details.gender"
        label="Gender"
        placeholder="gender"
        options={[
          { name: "Male", value: "male" },
          { name: "Female", value: "female" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCityValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCityValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountryValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.country"
        label="Country"
        placeholder="country"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountyValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.county"
        label="County / State"
        placeholder="county / state"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine1Validation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine2Validation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.goods_delivery_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.customer_details.goods_delivery_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsGoodsDeliveryAddressPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function ApplicantDetailsCustomerDetailsGoodsDeliveryAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsGoodsDeliveryAddressPostcodeValidation
      }
    >
      <Field.Postcode
        name="applicant_details.customer_details.goods_delivery_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          ApplicantDetailsCustomerDetailsGoodsDeliveryAddressPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
};

export function ApplicantDetailsCustomerDetailsLastName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsLastNameValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.last_name"
        label="Last Name"
        placeholder="last name"
        validation={ApplicantDetailsCustomerDetailsLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsMaidenNameValidation = {};

export function ApplicantDetailsCustomerDetailsMaidenName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsMaidenNameValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.maiden_name"
        label="Maiden Name"
        placeholder="maiden name"
        validation={ApplicantDetailsCustomerDetailsMaidenNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsMaritalStatusValidation = {
  required: { value: true, message: "Marital Status is required." },
};

export function ApplicantDetailsCustomerDetailsMaritalStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsMaritalStatusValidation}
    >
      <Field.Select
        name="applicant_details.customer_details.marital_status"
        label="Marital Status"
        placeholder="marital status"
        options={[
          { name: "Widowed", value: "widowed" },
          { name: "Other", value: "other" },
          { name: "Married", value: "married" },
          { name: "Divorced", value: "divorced" },
          { name: "Cohabiting", value: "cohabiting" },
          { name: "To Be Married", value: "to_be_married" },
          { name: "Separated", value: "separated" },
          { name: "Single", value: "single" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsMiddleNameValidation = {};

export function ApplicantDetailsCustomerDetailsMiddleName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsMiddleNameValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.middle_name"
        label="Middle Name"
        placeholder="middle name"
        validation={ApplicantDetailsCustomerDetailsMiddleNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsMobileValidation = {};

export function ApplicantDetailsCustomerDetailsMobile(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsMobileValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={ApplicantDetailsCustomerDetailsMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsMonthlyRentAmountAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsCustomerDetailsMonthlyRentAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsMonthlyRentAmountAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.customer_details.monthly_rent_amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          ApplicantDetailsCustomerDetailsMonthlyRentAmountAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsMonthlyRentAmountCurrencyValidation =
  {};

export function ApplicantDetailsCustomerDetailsMonthlyRentAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsMonthlyRentAmountCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="applicant_details.customer_details.monthly_rent_amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsNumberOfDependantsValidation = {
  required: { value: true, message: "Number Of Dependants is required." },
  min: { value: 0, message: "Number Of Dependants must be great than 0" },
  max: {
    value: 2147483647,
    message: "Number Of Dependants must be smaller than 2.147483647e+09",
  },
};

export function ApplicantDetailsCustomerDetailsNumberOfDependants(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsNumberOfDependantsValidation}
    >
      <Field.NumberFormatInput
        name="applicant_details.customer_details.number_of_dependants"
        label="Number Of Dependants"
        placeholder="number of dependants"
        validation={ApplicantDetailsCustomerDetailsNumberOfDependantsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNameValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNumberValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsPreviousAddressOneCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneCityValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneCountryValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.country"
        label="Country"
        placeholder="country"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneCountyValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.county"
        label="County / State"
        placeholder="county / state"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneLine1Validation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneLine2Validation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_one.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOneMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressOneMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.customer_details.previous_address_one.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOneMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressOnePostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressOnePostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressOnePostcodeValidation
      }
    >
      <Field.Postcode
        name="applicant_details.customer_details.previous_address_one.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressOnePostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNameValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNameValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNumberValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNumberValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoCityValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.city"
        label="City / Town"
        placeholder="city / town"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoCityValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoCountryValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoCountryValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.country"
        label="Country"
        placeholder="country"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoCountryValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoCountyValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoCountyValidation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.county"
        label="County / State"
        placeholder="county / state"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoCountyValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoLine1Validation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoLine1Validation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoLine1Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoLine2Validation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoLine2Validation
      }
    >
      <Field.Input
        name="applicant_details.customer_details.previous_address_two.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoLine2Validation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.customer_details.previous_address_two.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsPreviousAddressTwoPostcodeValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function ApplicantDetailsCustomerDetailsPreviousAddressTwoPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsCustomerDetailsPreviousAddressTwoPostcodeValidation
      }
    >
      <Field.Postcode
        name="applicant_details.customer_details.previous_address_two.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={
          ApplicantDetailsCustomerDetailsPreviousAddressTwoPostcodeValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsResidentialStatusValidation = {
  required: { value: true, message: "Residential Status is required." },
};

export function ApplicantDetailsCustomerDetailsResidentialStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsResidentialStatusValidation}
    >
      <Field.Select
        name="applicant_details.customer_details.residential_status"
        label="Residential Status"
        placeholder="residential status"
        options={[
          { name: "Tenant", value: "tenant" },
          { name: "Council Tenant", value: "council tenant" },
          { name: "Living With Parents", value: "living with parents" },
          { name: "Owner", value: "owner" },
          { name: "Owner Without Mortgage", value: "owner without mortgage" },
          { name: "Lodger", value: "lodger" },
          { name: "Armed Forces", value: "armed forces" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsTelephoneValidation = {};

export function ApplicantDetailsCustomerDetailsTelephone(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsTelephoneValidation}
    >
      <Field.Input
        name="applicant_details.customer_details.telephone"
        label="Telephone"
        placeholder="telephone"
        validation={ApplicantDetailsCustomerDetailsTelephoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsCustomerDetailsTitleValidation = {
  required: { value: true, message: "Title is required." },
};

export function ApplicantDetailsCustomerDetailsTitle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={ApplicantDetailsCustomerDetailsTitleValidation}
    >
      <Field.Select
        name="applicant_details.customer_details.title"
        label="Title"
        placeholder="title"
        options={[
          { name: "Mrs", value: "mrs" },
          { name: "Mr", value: "mr" },
          { name: "Miss", value: "miss" },
          { name: "Ms", value: "ms" },
          { name: "Dr", value: "dr" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsEmployedDetailsEmployerNameValidation =
  {
    required: { value: true, message: "Employer Name is required." },
    minLength: {
      value: 1,
      message: "Employer Name requires minimum length of 1",
    },
  };

export function ApplicantDetailsEmploymentDetailsEmployedDetailsEmployerName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsEmployedDetailsEmployerNameValidation
      }
    >
      <Field.Input
        name="applicant_details.employment_details.employed_details.employer_name"
        label="Employer Name"
        placeholder="employer name"
        validation={
          ApplicantDetailsEmploymentDetailsEmployedDetailsEmployerNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsEmployedDetailsMainOccupationValidation =
  {
    required: { value: true, message: "Main Occupation is required." },
    minLength: {
      value: 1,
      message: "Main Occupation requires minimum length of 1",
    },
  };

export function ApplicantDetailsEmploymentDetailsEmployedDetailsMainOccupation(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsEmployedDetailsMainOccupationValidation
      }
    >
      <Field.Input
        name="applicant_details.employment_details.employed_details.main_occupation"
        label="Main Occupation"
        placeholder="main occupation"
        validation={
          ApplicantDetailsEmploymentDetailsEmployedDetailsMainOccupationValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsEmployedDetailsMonthsEmployedValidation =
  {
    required: { value: true, message: "Months Employed is required." },
    min: { value: 1, message: "Months Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Employed must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsEmploymentDetailsEmployedDetailsMonthsEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsEmployedDetailsMonthsEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.employment_details.employed_details.months_employed"
        label="Months Employed"
        placeholder="months employed"
        validation={
          ApplicantDetailsEmploymentDetailsEmployedDetailsMonthsEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsEmploymentStatusValidation = {
  required: { value: true, message: "Employment Status is required." },
};

export function ApplicantDetailsEmploymentDetailsEmploymentStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={ApplicantDetailsEmploymentDetailsEmploymentStatusValidation}
    >
      <Field.Select
        name="applicant_details.employment_details.employment_status"
        label="Employment Status"
        placeholder="employment status"
        options={[
          { name: "Employed", value: "employed" },
          { name: "Self Employed", value: "self_employed" },
          { name: "Not Employed", value: "not_employed" },
          { name: "Retired", value: "retired" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsGrossAnnualIncomeAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsEmploymentDetailsGrossAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsGrossAnnualIncomeAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.employment_details.gross_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          ApplicantDetailsEmploymentDetailsGrossAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsGrossAnnualIncomeCurrencyValidation =
  {};

export function ApplicantDetailsEmploymentDetailsGrossAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsGrossAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="applicant_details.employment_details.gross_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeAmountValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeAmountValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.employment_details.household_annual_income.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={
          ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeAmountValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation =
  {};

export function ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeCurrencyValidation
      }
    >
      <Field.RadioSelect
        name="applicant_details.employment_details.household_annual_income.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation =
  { required: { value: true, message: "Source Of Income is required." } };

export function ApplicantDetailsEmploymentDetailsNotEmployedDetailsSourceOfIncome(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsNotEmployedDetailsSourceOfIncomeValidation
      }
    >
      <Field.Select
        name="applicant_details.employment_details.not_employed_details.source_of_income"
        label="Source Of Income"
        placeholder="source of income"
        options={[
          { name: "Partner", value: "partner" },
          { name: "Benefits", value: "benefits" },
          { name: "Maintenance", value: "maintenance" },
          { name: "Disabled", value: "disabled" },
          { name: "Full-Time Carer", value: "full-time carer" },
          { name: "Homemaker", value: "homemaker" },
          { name: "Permanent Dla", value: "permanent dla" },
          { name: "Other", value: "other" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsSelfEmployedDetailsBusinessNameValidation =
  {
    required: { value: true, message: "Business Name is required." },
    minLength: {
      value: 1,
      message: "Business Name requires minimum length of 1",
    },
  };

export function ApplicantDetailsEmploymentDetailsSelfEmployedDetailsBusinessName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
      }
    >
      <Field.Input
        name="applicant_details.employment_details.self_employed_details.business_name"
        label="Business Name"
        placeholder="business name"
        validation={
          ApplicantDetailsEmploymentDetailsSelfEmployedDetailsBusinessNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation =
  {
    required: { value: true, message: "Months Self Employed is required." },
    min: { value: 1, message: "Months Self Employed must be great than 1" },
    max: {
      value: 2147483647,
      message: "Months Self Employed must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
      }
    >
      <Field.NumberFormatInput
        name="applicant_details.employment_details.self_employed_details.months_self_employed"
        label="Months Self Employed"
        placeholder="months self employed"
        validation={
          ApplicantDetailsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployedValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation =
  {
    required: { value: true, message: "Type Of Business is required." },
    minLength: {
      value: 1,
      message: "Type Of Business requires minimum length of 1",
    },
  };

export function ApplicantDetailsEmploymentDetailsSelfEmployedDetailsTypeOfBusiness(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
      }
    >
      <Field.Input
        name="applicant_details.employment_details.self_employed_details.type_of_business"
        label="Type Of Business"
        placeholder="type of business"
        validation={
          ApplicantDetailsEmploymentDetailsSelfEmployedDetailsTypeOfBusinessValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsFinanceDetailsBankrupcyOrIvaInLast5YearsValidation =
  {};

export function ApplicantDetailsFinanceDetailsBankrupcyOrIvaInLast5Years(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={
        ApplicantDetailsFinanceDetailsBankrupcyOrIvaInLast5YearsValidation
      }
    >
      <Field.RadioSelect
        name="applicant_details.finance_details.bankrupcy_or_iva_in_last_5_years"
        label="Any Bankrupcy Or IVA In The Last 5 Years?"
        placeholder="any bankrupcy or IVA in the last 5 years?"
        options={[
          { name: "Yes", value: "yes" },
          { name: "No", value: "no" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const ApplicantDetailsFinanceDetailsExpendituresExpenditureTypeArraySelectValidation =
  {};

export function ApplicantDetailsFinanceDetailsExpendituresExpenditureTypeArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="expenditure_type">
      <Field.Validator
        validation={
          ApplicantDetailsFinanceDetailsExpendituresExpenditureTypeArrayInputValidation
        }
      >
        <Field.Select
          label="Expenditure Type"
          placeholder="Expenditure Type"
          label="Expenditure Type"
          placeholder=""
          options={[
            { name: "Credit Card", value: "credit card" },
            { name: "Clothes", value: "clothes" },
            { name: "Council Tax And Bills", value: "council tax and bills" },
            { name: "Child Support Agency", value: "child support agency" },
            { name: "Healthcare", value: "healthcare" },
            { name: "Holidays", value: "holidays" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const ApplicantDetailsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation =
  {
    required: { value: true, message: "Amount is required." },
    min: { value: 0, message: "Amount must be great than 0" },
    max: {
      value: 2147483647,
      message: "Amount must be smaller than 2.147483647e+09",
    },
  };

export function ApplicantDetailsFinanceDetailsExpendituresMonthlyAmountAmountArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="amount">
      <Field.Validator
        validation={
          ApplicantDetailsFinanceDetailsExpendituresMonthlyAmountAmountArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Amount"
          placeholder="Amount"
          label="Amount / Number In Pence"
          placeholder="amount / number in pence"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const ApplicantDetailsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelectValidation =
  {};

export function ApplicantDetailsFinanceDetailsExpendituresMonthlyAmountCurrencyArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="currency">
      <Field.Validator
        validation={
          ApplicantDetailsFinanceDetailsExpendituresMonthlyAmountCurrencyArrayInputValidation
        }
      >
        <Field.RadioSelect
          label="Currency"
          placeholder="Currency"
          label="Currency"
          placeholder="currency"
          options={[{ name: "GBP", value: "GBP" }]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const ApplicantDetailsFinanceDetailsExpendituresValidation = {};

export function ApplicantDetailsFinanceDetailsExpendituresArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="applicant_details.finance_details.expenditures"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export function ApplicantDetailsForm(props: any) {
  return (
    <>
      <ApplicantDetailsBankAccountAccountName {...props} />
      <ApplicantDetailsBankAccountAccountNumber {...props} />
      <ApplicantDetailsBankAccountMonthsHeld {...props} />
      <ApplicantDetailsBankAccountSortCode {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressBuildingName {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressBuildingNumber {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressCity {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressCountry {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressCounty {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressLine1 {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressLine2 {...props} />
      <ApplicantDetailsCustomerDetailsCurrentAddressMonthsAtAddress
        {...props}
      />
      <ApplicantDetailsCustomerDetailsCurrentAddressPostcode {...props} />
      <ApplicantDetailsCustomerDetailsDateOfBirth {...props} />
      <ApplicantDetailsCustomerDetailsEmail {...props} />
      <ApplicantDetailsCustomerDetailsFirstName {...props} />
      <ApplicantDetailsCustomerDetailsGender {...props} />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingName
        {...props}
      />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressBuildingNumber
        {...props}
      />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCity {...props} />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCountry {...props} />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressCounty {...props} />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine1 {...props} />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressLine2 {...props} />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressMonthsAtAddress
        {...props}
      />
      <ApplicantDetailsCustomerDetailsGoodsDeliveryAddressPostcode {...props} />
      <ApplicantDetailsCustomerDetailsLastName {...props} />
      <ApplicantDetailsCustomerDetailsMaidenName {...props} />
      <ApplicantDetailsCustomerDetailsMaritalStatus {...props} />
      <ApplicantDetailsCustomerDetailsMiddleName {...props} />
      <ApplicantDetailsCustomerDetailsMobile {...props} />
      <ApplicantDetailsCustomerDetailsMonthlyRentAmountAmount {...props} />
      <ApplicantDetailsCustomerDetailsMonthlyRentAmountCurrency {...props} />
      <ApplicantDetailsCustomerDetailsNumberOfDependants {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingName
        {...props}
      />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneBuildingNumber
        {...props}
      />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneCity {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneCountry {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneCounty {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneLine1 {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneLine2 {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressOneMonthsAtAddress
        {...props}
      />
      <ApplicantDetailsCustomerDetailsPreviousAddressOnePostcode {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingName
        {...props}
      />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoBuildingNumber
        {...props}
      />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoCity {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoCountry {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoCounty {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoLine1 {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoLine2 {...props} />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoMonthsAtAddress
        {...props}
      />
      <ApplicantDetailsCustomerDetailsPreviousAddressTwoPostcode {...props} />
      <ApplicantDetailsCustomerDetailsResidentialStatus {...props} />
      <ApplicantDetailsCustomerDetailsTelephone {...props} />
      <ApplicantDetailsCustomerDetailsTitle {...props} />
      <ApplicantDetailsEmploymentDetailsEmployedDetailsEmployerName
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsEmployedDetailsMainOccupation
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsEmployedDetailsMonthsEmployed
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsEmploymentStatus {...props} />
      <ApplicantDetailsEmploymentDetailsGrossAnnualIncomeAmount {...props} />
      <ApplicantDetailsEmploymentDetailsGrossAnnualIncomeCurrency {...props} />
      <ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeAmount
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsHouseholdAnnualIncomeCurrency
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsNotEmployedDetailsSourceOfIncome
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsSelfEmployedDetailsBusinessName
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsSelfEmployedDetailsMonthsSelfEmployed
        {...props}
      />
      <ApplicantDetailsEmploymentDetailsSelfEmployedDetailsTypeOfBusiness
        {...props}
      />
      <ApplicantDetailsFinanceDetailsBankrupcyOrIvaInLast5Years {...props} />
    </>
  );
}

export const AvailableRateEnabledValidation = {
  required: { value: true, message: "Enabled is required." },
};

export function AvailableRateEnabled(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={AvailableRateEnabledValidation}>
      <Field.BooleanInput
        name="available_rate.enabled"
        label="Enabled?"
        placeholder="enabled?"
        validation={AvailableRateEnabledValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AvailableRateFeeValidation = {
  required: { value: true, message: "Fee is required." },
  min: { value: 0, message: "Fee must be great than 0" },
  max: {
    value: 2147483647,
    message: "Fee must be smaller than 2.147483647e+09",
  },
};

export function AvailableRateFee(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={AvailableRateFeeValidation}>
      <Field.NumberFormatInput
        name="available_rate.fee"
        label="Fee"
        placeholder="fee"
        validation={AvailableRateFeeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const AvailableRateNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function AvailableRateName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={AvailableRateNameValidation}>
      <Field.Input
        name="available_rate.name"
        label="Name"
        placeholder="name"
        validation={AvailableRateNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function AvailableRateForm(props: any) {
  return (
    <>
      <AvailableRateEnabled {...props} />
      <AvailableRateFee {...props} />
      <AvailableRateName {...props} />
    </>
  );
}

export const ContactInfoContactAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function ContactInfoContactAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ContactInfoContactAddressBuildingNameValidation}
    >
      <Field.Input
        name="contact_info.contact_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={ContactInfoContactAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function ContactInfoContactAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={ContactInfoContactAddressBuildingNumberValidation}
    >
      <Field.Input
        name="contact_info.contact_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={ContactInfoContactAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function ContactInfoContactAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactAddressCityValidation}>
      <Field.Input
        name="contact_info.contact_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={ContactInfoContactAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function ContactInfoContactAddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactAddressCountryValidation}>
      <Field.Input
        name="contact_info.contact_address.country"
        label="Country"
        placeholder="country"
        validation={ContactInfoContactAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function ContactInfoContactAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactAddressCountyValidation}>
      <Field.Input
        name="contact_info.contact_address.county"
        label="County / State"
        placeholder="county / state"
        validation={ContactInfoContactAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function ContactInfoContactAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactAddressLine1Validation}>
      <Field.Input
        name="contact_info.contact_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={ContactInfoContactAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function ContactInfoContactAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactAddressLine2Validation}>
      <Field.Input
        name="contact_info.contact_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={ContactInfoContactAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function ContactInfoContactAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={ContactInfoContactAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="contact_info.contact_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={ContactInfoContactAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function ContactInfoContactAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator validation={ContactInfoContactAddressPostcodeValidation}>
      <Field.Postcode
        name="contact_info.contact_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={ContactInfoContactAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactEmailValidation = {};

export function ContactInfoContactEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactEmailValidation}>
      <Field.Input
        name="contact_info.contact_email"
        label="Contact Email"
        placeholder="contact email"
        validation={ContactInfoContactEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactNameValidation = {};

export function ContactInfoContactName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactNameValidation}>
      <Field.Input
        name="contact_info.contact_name"
        label="Contact Name"
        placeholder="contact name"
        validation={ContactInfoContactNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoContactPhoneValidation = {};

export function ContactInfoContactPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoContactPhoneValidation}>
      <Field.Input
        name="contact_info.contact_phone"
        label="Contact Phone Number"
        placeholder="contact phone number"
        validation={ContactInfoContactPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const ContactInfoTradingNameValidation = {};

export function ContactInfoTradingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={ContactInfoTradingNameValidation}>
      <Field.Input
        name="contact_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={ContactInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function ContactInfoForm(props: any) {
  return (
    <>
      <ContactInfoContactAddressBuildingName {...props} />
      <ContactInfoContactAddressBuildingNumber {...props} />
      <ContactInfoContactAddressCity {...props} />
      <ContactInfoContactAddressCountry {...props} />
      <ContactInfoContactAddressCounty {...props} />
      <ContactInfoContactAddressLine1 {...props} />
      <ContactInfoContactAddressLine2 {...props} />
      <ContactInfoContactAddressMonthsAtAddress {...props} />
      <ContactInfoContactAddressPostcode {...props} />
      <ContactInfoContactEmail {...props} />
      <ContactInfoContactName {...props} />
      <ContactInfoContactPhone {...props} />
      <ContactInfoTradingName {...props} />
    </>
  );
}

export const InfoCompanyDirectorsDirectorInfoDateOfBirthArrayInputValidation =
  {};

export function InfoCompanyDirectorsDirectorInfoDateOfBirthArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="date_of_birth">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoDateOfBirthArrayInputValidation
        }
      >
        <Field.Input
          label="Date Of Birth"
          placeholder="Date Of Birth"
          label="Date Of Birth"
          placeholder="date of birth"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressBuildingNameArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Name requires minimum length of 1",
    },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressBuildingNameArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_name">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressBuildingNameArrayInputValidation
        }
      >
        <Field.Input
          label="Building Name"
          placeholder="Building Name"
          label="Building Name"
          placeholder="building name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressBuildingNumberArrayInputValidation =
  {
    minLength: {
      value: 1,
      message: "Building Number requires minimum length of 1",
    },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressBuildingNumberArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="building_number">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressBuildingNumberArrayInputValidation
        }
      >
        <Field.Input
          label="Building Number"
          placeholder="Building Number"
          label="Building Number"
          placeholder="building number"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressCityArrayInputValidation =
  {
    required: { value: true, message: "City is required." },
    minLength: { value: 1, message: "City requires minimum length of 1" },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressCityArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="city">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressCityArrayInputValidation
        }
      >
        <Field.Input
          label="City"
          placeholder="City"
          label="City / Town"
          placeholder="city / town"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressCountryArrayInputValidation =
  {
    required: { value: true, message: "Country is required." },
    minLength: { value: 1, message: "Country requires minimum length of 1" },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressCountryArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="country">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressCountryArrayInputValidation
        }
      >
        <Field.Input
          label="Country"
          placeholder="Country"
          label="Country"
          placeholder="country"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressCountyArrayInputValidation =
  { minLength: { value: 1, message: "County requires minimum length of 1" } };

export function InfoCompanyDirectorsDirectorInfoHomeAddressCountyArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="county">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressCountyArrayInputValidation
        }
      >
        <Field.Input
          label="County"
          placeholder="County"
          label="County / State"
          placeholder="county / state"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressLine1ArrayInputValidation =
  {
    required: { value: true, message: "Line 1 is required." },
    minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressLine1ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_1">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressLine1ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 1"
          placeholder="Line 1"
          label="Line 1"
          placeholder="line 1"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressLine2ArrayInputValidation =
  { minLength: { value: 1, message: "Line 2 requires minimum length of 1" } };

export function InfoCompanyDirectorsDirectorInfoHomeAddressLine2ArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="line_2">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressLine2ArrayInputValidation
        }
      >
        <Field.Input
          label="Line 2"
          placeholder="Line 2"
          label="Line 2"
          placeholder="line 2"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressMonthsAtAddressArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="months_at_address">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressMonthsAtAddressArrayInputValidation
        }
      >
        <Field.NumberFormatInput
          label="Months At Address"
          placeholder="Months At Address"
          label="Months At Address"
          placeholder="months at address"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoHomeAddressPostcodeArrayInputValidation =
  {
    required: { value: true, message: "Postcode is required." },
    pattern: {
      value:
        /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
      message: "Postcode input is invalid",
    },
  };

export function InfoCompanyDirectorsDirectorInfoHomeAddressPostcodeArrayInput(
  props: any
) {
  return (
    <Field.Array.Input name="postcode">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoHomeAddressPostcodeArrayInputValidation
        }
      >
        <Field.Postcode
          label="Postcode"
          placeholder="Postcode"
          label="Postcode / Zipcode"
          placeholder="postcode / zipcode"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsDirectorInfoVerificationStatusArraySelectValidation =
  {
    disabled: {
      value: true,
      message: "Verification Status input is read only or disabled",
    },
  };

export function InfoCompanyDirectorsDirectorInfoVerificationStatusArraySelect(
  props: any
) {
  return (
    <Field.Array.Input name="verification_status">
      <Field.Validator
        validation={
          InfoCompanyDirectorsDirectorInfoVerificationStatusArrayInputValidation
        }
      >
        <Field.Select
          label="Verification Status"
          placeholder="Verification Status"
          label="Verification Status"
          placeholder="verification status"
          options={[
            { name: "Not Verified", value: "not_verified" },
            { name: "Verification Submitted", value: "verification_submitted" },
            { name: "Verification Declined", value: "verification_declined" },
            { name: "Verified", value: "verified" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsEmailArrayInputValidation = {
  required: { value: true, message: "Email is required." },
};

export function InfoCompanyDirectorsEmailArrayInput(props: any) {
  return (
    <Field.Array.Input name="email">
      <Field.Validator
        validation={InfoCompanyDirectorsEmailArrayInputValidation}
      >
        <Field.Input
          label="Email"
          placeholder="Email"
          label="Email"
          placeholder="email"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsFirstNameArrayInputValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function InfoCompanyDirectorsFirstNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="first_name">
      <Field.Validator
        validation={InfoCompanyDirectorsFirstNameArrayInputValidation}
      >
        <Field.Input
          label="First Name"
          placeholder="First Name"
          label="First Name"
          placeholder="first name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsLastNameArrayInputValidation = {
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function InfoCompanyDirectorsLastNameArrayInput(props: any) {
  return (
    <Field.Array.Input name="last_name">
      <Field.Validator
        validation={InfoCompanyDirectorsLastNameArrayInputValidation}
      >
        <Field.Input
          label="Last Name"
          placeholder="Last Name"
          label="Last Name"
          placeholder="last name"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsMobileArrayInputValidation = {
  minLength: { value: 1, message: "Mobile requires minimum length of 1" },
};

export function InfoCompanyDirectorsMobileArrayInput(props: any) {
  return (
    <Field.Array.Input name="mobile">
      <Field.Validator
        validation={InfoCompanyDirectorsMobileArrayInputValidation}
      >
        <Field.Input
          label="Mobile"
          placeholder="Mobile"
          label="Mobile"
          placeholder="mobile"
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsRoleArraySelectValidation = {
  required: { value: true, message: "Role is required." },
};

export function InfoCompanyDirectorsRoleArraySelect(props: any) {
  return (
    <Field.Array.Input name="role">
      <Field.Validator
        validation={InfoCompanyDirectorsRoleArrayInputValidation}
      >
        <Field.RadioSelect
          label="Role"
          placeholder="Role"
          label="Company Role"
          placeholder="company role"
          options={[
            { name: "Company-Admin", value: "company-admin" },
            { name: "Company-Manager", value: "company-manager" },
            { name: "Company-Staff", value: "company-staff" },
          ]}
          {...props}
        />
      </Field.Validator>
    </Field.Array.Input>
  );
}

export const InfoCompanyDirectorsValidation = {
  disabled: {
    value: true,
    message: "Directors input is read only or disabled",
  },
};

export function InfoCompanyDirectorsArrayWrapper({
  children,
  initialData = null,
}: any) {
  return (
    <Field.Array.Wrapper
      arrayName="info_company.directors"
      initialData={initialData}
    >
      {(props: any) => children(props)}
    </Field.Array.Wrapper>
  );
}

export const InfoCompanyIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function InfoCompanyId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoCompanyIdValidation}>
      <Field.Input
        name="info_company.id"
        label="Company Info Unique Id"
        placeholder="company info unique id"
        validation={InfoCompanyIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function InfoCompanyLimitedCompanyCompanyAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressBuildingNameValidation}
    >
      <Field.Input
        name="info_company.limited_company.company_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          InfoCompanyLimitedCompanyCompanyAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function InfoCompanyLimitedCompanyCompanyAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        InfoCompanyLimitedCompanyCompanyAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="info_company.limited_company.company_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          InfoCompanyLimitedCompanyCompanyAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyCompanyAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressCityValidation}
    >
      <Field.Input
        name="info_company.limited_company.company_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={InfoCompanyLimitedCompanyCompanyAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyCompanyAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressCountryValidation}
    >
      <Field.Input
        name="info_company.limited_company.company_address.country"
        label="Country"
        placeholder="country"
        validation={InfoCompanyLimitedCompanyCompanyAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyCompanyAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressCountyValidation}
    >
      <Field.Input
        name="info_company.limited_company.company_address.county"
        label="County / State"
        placeholder="county / state"
        validation={InfoCompanyLimitedCompanyCompanyAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyCompanyAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressLine1Validation}
    >
      <Field.Input
        name="info_company.limited_company.company_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={InfoCompanyLimitedCompanyCompanyAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyCompanyAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressLine2Validation}
    >
      <Field.Input
        name="info_company.limited_company.company_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={InfoCompanyLimitedCompanyCompanyAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function InfoCompanyLimitedCompanyCompanyAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        InfoCompanyLimitedCompanyCompanyAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="info_company.limited_company.company_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          InfoCompanyLimitedCompanyCompanyAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function InfoCompanyLimitedCompanyCompanyAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyAddressPostcodeValidation}
    >
      <Field.Postcode
        name="info_company.limited_company.company_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={InfoCompanyLimitedCompanyCompanyAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyNameValidation = {
  required: { value: true, message: "Company Name is required." },
  minLength: { value: 1, message: "Company Name requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyCompanyName(
  props: FieldProps["Company"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyNameValidation}
    >
      <Field.Company
        name="info_company.limited_company.company_name"
        label="Company Name"
        placeholder="company name"
        validation={InfoCompanyLimitedCompanyCompanyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyCompanyNumberValidation = {
  required: { value: true, message: "Company Number is required." },
  minLength: {
    value: 1,
    message: "Company Number requires minimum length of 1",
  },
};

export function InfoCompanyLimitedCompanyCompanyNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyCompanyNumberValidation}
    >
      <Field.Input
        name="info_company.limited_company.company_number"
        label="Company Number"
        placeholder="company number"
        validation={InfoCompanyLimitedCompanyCompanyNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function InfoCompanyLimitedCompanyTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressBuildingNameValidation}
    >
      <Field.Input
        name="info_company.limited_company.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          InfoCompanyLimitedCompanyTradingAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function InfoCompanyLimitedCompanyTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        InfoCompanyLimitedCompanyTradingAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="info_company.limited_company.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          InfoCompanyLimitedCompanyTradingAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressCityValidation}
    >
      <Field.Input
        name="info_company.limited_company.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={InfoCompanyLimitedCompanyTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressCountryValidation}
    >
      <Field.Input
        name="info_company.limited_company.trading_address.country"
        label="Country"
        placeholder="country"
        validation={InfoCompanyLimitedCompanyTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressCountyValidation}
    >
      <Field.Input
        name="info_company.limited_company.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={InfoCompanyLimitedCompanyTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressLine1Validation}
    >
      <Field.Input
        name="info_company.limited_company.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={InfoCompanyLimitedCompanyTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function InfoCompanyLimitedCompanyTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressLine2Validation}
    >
      <Field.Input
        name="info_company.limited_company.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={InfoCompanyLimitedCompanyTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function InfoCompanyLimitedCompanyTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        InfoCompanyLimitedCompanyTradingAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="info_company.limited_company.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          InfoCompanyLimitedCompanyTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function InfoCompanyLimitedCompanyTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={InfoCompanyLimitedCompanyTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="info_company.limited_company.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={InfoCompanyLimitedCompanyTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyLimitedCompanyVatNumberValidation = {
  minLength: { value: 1, message: "Vat Number requires minimum length of 1" },
  pattern: {
    value: /^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/,
    message: "Vat Number input is invalid",
  },
};

export function InfoCompanyLimitedCompanyVatNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoCompanyLimitedCompanyVatNumberValidation}>
      <Field.Input
        name="info_company.limited_company.vat_number"
        label="Vat Number"
        placeholder="vat number"
        validation={InfoCompanyLimitedCompanyVatNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function InfoCompanyMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoCompanyMetadataCreatedAtValidation}>
      <Field.Input
        name="info_company.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={InfoCompanyMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function InfoCompanyMetadataLiveness(props: FieldProps["BooleanInput"]) {
  return (
    <Field.Validator validation={InfoCompanyMetadataLivenessValidation}>
      <Field.BooleanInput
        name="info_company.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={InfoCompanyMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanyMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function InfoCompanyMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoCompanyMetadataUpdatedAtValidation}>
      <Field.Input
        name="info_company.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={InfoCompanyMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderNationalInsuranceNumberValidation = {
  minLength: {
    value: 1,
    message: "National Insurance Number requires minimum length of 1",
  },
};

export function InfoCompanySoleTraderNationalInsuranceNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderNationalInsuranceNumberValidation}
    >
      <Field.Input
        name="info_company.sole_trader.national_insurance_number"
        label="National Insurance Number"
        placeholder="national insurance number"
        validation={InfoCompanySoleTraderNationalInsuranceNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function InfoCompanySoleTraderTradingAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressBuildingNameValidation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={InfoCompanySoleTraderTradingAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function InfoCompanySoleTraderTradingAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressBuildingNumberValidation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={InfoCompanySoleTraderTradingAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function InfoCompanySoleTraderTradingAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressCityValidation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={InfoCompanySoleTraderTradingAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function InfoCompanySoleTraderTradingAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressCountryValidation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.country"
        label="Country"
        placeholder="country"
        validation={InfoCompanySoleTraderTradingAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function InfoCompanySoleTraderTradingAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressCountyValidation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.county"
        label="County / State"
        placeholder="county / state"
        validation={InfoCompanySoleTraderTradingAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function InfoCompanySoleTraderTradingAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressLine1Validation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={InfoCompanySoleTraderTradingAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function InfoCompanySoleTraderTradingAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressLine2Validation}
    >
      <Field.Input
        name="info_company.sole_trader.trading_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={InfoCompanySoleTraderTradingAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function InfoCompanySoleTraderTradingAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="info_company.sole_trader.trading_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          InfoCompanySoleTraderTradingAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function InfoCompanySoleTraderTradingAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={InfoCompanySoleTraderTradingAddressPostcodeValidation}
    >
      <Field.Postcode
        name="info_company.sole_trader.trading_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={InfoCompanySoleTraderTradingAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const InfoCompanySoleTraderTradingNameValidation = {
  required: { value: true, message: "Trading Name is required." },
  minLength: { value: 1, message: "Trading Name requires minimum length of 1" },
};

export function InfoCompanySoleTraderTradingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={InfoCompanySoleTraderTradingNameValidation}>
      <Field.Input
        name="info_company.sole_trader.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={InfoCompanySoleTraderTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function InfoCompanyForm(props: any) {
  return (
    <>
      <InfoCompanyId {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressBuildingName {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressBuildingNumber {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressCity {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressCountry {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressCounty {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressLine1 {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressLine2 {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressMonthsAtAddress {...props} />
      <InfoCompanyLimitedCompanyCompanyAddressPostcode {...props} />
      <InfoCompanyLimitedCompanyCompanyName {...props} />
      <InfoCompanyLimitedCompanyCompanyNumber {...props} />
      <InfoCompanyLimitedCompanyTradingAddressBuildingName {...props} />
      <InfoCompanyLimitedCompanyTradingAddressBuildingNumber {...props} />
      <InfoCompanyLimitedCompanyTradingAddressCity {...props} />
      <InfoCompanyLimitedCompanyTradingAddressCountry {...props} />
      <InfoCompanyLimitedCompanyTradingAddressCounty {...props} />
      <InfoCompanyLimitedCompanyTradingAddressLine1 {...props} />
      <InfoCompanyLimitedCompanyTradingAddressLine2 {...props} />
      <InfoCompanyLimitedCompanyTradingAddressMonthsAtAddress {...props} />
      <InfoCompanyLimitedCompanyTradingAddressPostcode {...props} />
      <InfoCompanyLimitedCompanyVatNumber {...props} />
      <InfoCompanyMetadataCreatedAt {...props} />
      <InfoCompanyMetadataLiveness {...props} />
      <InfoCompanyMetadataUpdatedAt {...props} />
      <InfoCompanySoleTraderNationalInsuranceNumber {...props} />
      <InfoCompanySoleTraderTradingAddressBuildingName {...props} />
      <InfoCompanySoleTraderTradingAddressBuildingNumber {...props} />
      <InfoCompanySoleTraderTradingAddressCity {...props} />
      <InfoCompanySoleTraderTradingAddressCountry {...props} />
      <InfoCompanySoleTraderTradingAddressCounty {...props} />
      <InfoCompanySoleTraderTradingAddressLine1 {...props} />
      <InfoCompanySoleTraderTradingAddressLine2 {...props} />
      <InfoCompanySoleTraderTradingAddressMonthsAtAddress {...props} />
      <InfoCompanySoleTraderTradingAddressPostcode {...props} />
      <InfoCompanySoleTraderTradingName {...props} />
    </>
  );
}

export const SubscriptionAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function SubscriptionAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionAidValidation}>
      <Field.Input
        name="subscription.aid"
        label="Author Id"
        placeholder="author id"
        validation={SubscriptionAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function SubscriptionAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={SubscriptionAmountAmountValidation}>
      <Field.NumberFormatInput
        name="subscription.amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={SubscriptionAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionAmountCurrencyValidation = {};

export function SubscriptionAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={SubscriptionAmountCurrencyValidation}>
      <Field.RadioSelect
        name="subscription.amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionAuthorisationUrlValidation = {
  disabled: {
    value: true,
    message: "Authorisation Url input is read only or disabled",
  },
};

export function SubscriptionAuthorisationUrl(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionAuthorisationUrlValidation}>
      <Field.Input
        name="subscription.authorisation_url"
        label="Authorisation Url To Submit A Mandate Agreement"
        placeholder="authorisation url to submit a mandate agreement"
        validation={SubscriptionAuthorisationUrlValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionBillingStatusValidation = {
  disabled: {
    value: true,
    message: "Billing Status input is read only or disabled",
  },
};

export function SubscriptionBillingStatus(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionBillingStatusValidation}>
      <Field.Input
        name="subscription.billing_status"
        label="Billing Status"
        placeholder="billing status"
        validation={SubscriptionBillingStatusValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionBillingValidation = {
  disabled: { value: true, message: "Billing input is read only or disabled" },
};

export function SubscriptionBilling(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionBillingValidation}>
      <Field.Input
        name="subscription.billing"
        label="Billing Reference"
        placeholder="billing reference"
        validation={SubscriptionBillingValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function SubscriptionCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionCidValidation}>
      <Field.Input
        name="subscription.cid"
        label="Company Id"
        placeholder="company id"
        validation={SubscriptionCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionDayOfMonthValidation = {
  min: { value: -1, message: "Day Of Month must be great than -1" },
  max: { value: 28, message: "Day Of Month must be smaller than 28" },
};

export function SubscriptionDayOfMonth(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={SubscriptionDayOfMonthValidation}>
      <Field.NumberFormatInput
        name="subscription.day_of_month"
        label="Day Of Month For Collection"
        placeholder="day of month for collection"
        validation={SubscriptionDayOfMonthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function SubscriptionId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionIdValidation}>
      <Field.Input
        name="subscription.id"
        label="Subscription Id"
        placeholder="subscription id"
        validation={SubscriptionIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionIntervalValidation = {};

export function SubscriptionInterval(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={SubscriptionIntervalValidation}>
      <Field.RadioSelect
        name="subscription.interval"
        label="Subscription Interval"
        placeholder="subscription interval"
        options={[
          { name: "Monthly", value: "monthly" },
          { name: "Yearly", value: "yearly" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionMandateStatusValidation = {
  disabled: {
    value: true,
    message: "Mandate Status input is read only or disabled",
  },
};

export function SubscriptionMandateStatus(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionMandateStatusValidation}>
      <Field.Input
        name="subscription.mandate_status"
        label="Mandate Status"
        placeholder="mandate status"
        validation={SubscriptionMandateStatusValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionMandateValidation = {
  disabled: { value: true, message: "Mandate input is read only or disabled" },
};

export function SubscriptionMandate(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionMandateValidation}>
      <Field.Input
        name="subscription.mandate"
        label="Mandate Reference"
        placeholder="mandate reference"
        validation={SubscriptionMandateValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function SubscriptionMetadataCreatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionMetadataCreatedAtValidation}>
      <Field.Input
        name="subscription.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={SubscriptionMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function SubscriptionMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator validation={SubscriptionMetadataLivenessValidation}>
      <Field.BooleanInput
        name="subscription.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={SubscriptionMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function SubscriptionMetadataUpdatedAt(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionMetadataUpdatedAtValidation}>
      <Field.Input
        name="subscription.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={SubscriptionMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function SubscriptionOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionOidValidation}>
      <Field.Input
        name="subscription.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={SubscriptionOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionXidValidation = {
  disabled: { value: true, message: "Xid input is read only or disabled" },
};

export function SubscriptionXid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionXidValidation}>
      <Field.Input
        name="subscription.xid"
        label="External Reference Id"
        placeholder="external reference id"
        validation={SubscriptionXidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const SubscriptionXrefValidation = {
  disabled: { value: true, message: "Xref input is read only or disabled" },
};

export function SubscriptionXref(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={SubscriptionXrefValidation}>
      <Field.Input
        name="subscription.xref"
        label="External Reference"
        placeholder="external reference"
        validation={SubscriptionXrefValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function SubscriptionForm(props: any) {
  return (
    <>
      <SubscriptionAid {...props} />
      <SubscriptionAmountAmount {...props} />
      <SubscriptionAmountCurrency {...props} />
      <SubscriptionAuthorisationUrl {...props} />
      <SubscriptionBillingStatus {...props} />
      <SubscriptionBilling {...props} />
      <SubscriptionCid {...props} />
      <SubscriptionDayOfMonth {...props} />
      <SubscriptionId {...props} />
      <SubscriptionInterval {...props} />
      <SubscriptionMandateStatus {...props} />
      <SubscriptionMandate {...props} />
      <SubscriptionMetadataCreatedAt {...props} />
      <SubscriptionMetadataLiveness {...props} />
      <SubscriptionMetadataUpdatedAt {...props} />
      <SubscriptionOid {...props} />
      <SubscriptionXid {...props} />
      <SubscriptionXref {...props} />
    </>
  );
}

export const JobCompanyInfoBankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function JobCompanyInfoBankAccountAccountName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoBankAccountAccountNameValidation}
    >
      <Field.Input
        name="job_company_info.bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={JobCompanyInfoBankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoBankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function JobCompanyInfoBankAccountAccountNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoBankAccountAccountNumberValidation}
    >
      <Field.Input
        name="job_company_info.bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={JobCompanyInfoBankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoBankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function JobCompanyInfoBankAccountMonthsHeld(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={JobCompanyInfoBankAccountMonthsHeldValidation}>
      <Field.NumberFormatInput
        name="job_company_info.bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={JobCompanyInfoBankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoBankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function JobCompanyInfoBankAccountSortCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoBankAccountSortCodeValidation}>
      <Field.Input
        name="job_company_info.bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={JobCompanyInfoBankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoAidValidation = {
  disabled: { value: true, message: "Aid input is read only or disabled" },
};

export function JobCompanyInfoCompanyLogoAid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoAidValidation}>
      <Field.Input
        name="job_company_info.company_logo.aid"
        label="Author Id"
        placeholder="author id"
        validation={JobCompanyInfoCompanyLogoAidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoCidValidation = {
  disabled: { value: true, message: "Cid input is read only or disabled" },
};

export function JobCompanyInfoCompanyLogoCid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoCidValidation}>
      <Field.Input
        name="job_company_info.company_logo.cid"
        label="Company Id"
        placeholder="company id"
        validation={JobCompanyInfoCompanyLogoCidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoContentValidation = {
  maxLength: {
    value: 1048487,
    message: "Content requires maximum length of 1048487",
  },
};

export function JobCompanyInfoCompanyLogoContent(props: FieldProps["File"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoContentValidation}>
      <Field.File
        name="job_company_info.company_logo.content"
        label="Document Content"
        placeholder="document content"
        validation={JobCompanyInfoCompanyLogoContentValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoIdValidation = {
  disabled: { value: true, message: "Id input is read only or disabled" },
};

export function JobCompanyInfoCompanyLogoId(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoIdValidation}>
      <Field.Input
        name="job_company_info.company_logo.id"
        label="Document Id"
        placeholder="document id"
        validation={JobCompanyInfoCompanyLogoIdValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoMetadataCreatedAtValidation = {
  required: { value: true, message: "Created At is required." },
  disabled: {
    value: true,
    message: "Created At input is read only or disabled",
  },
};

export function JobCompanyInfoCompanyLogoMetadataCreatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoCompanyLogoMetadataCreatedAtValidation}
    >
      <Field.Input
        name="job_company_info.company_logo.metadata.created_at"
        label="Created At"
        placeholder="created at"
        validation={JobCompanyInfoCompanyLogoMetadataCreatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoMetadataLivenessValidation = {
  required: { value: true, message: "Liveness is required." },
  disabled: { value: true, message: "Liveness input is read only or disabled" },
};

export function JobCompanyInfoCompanyLogoMetadataLiveness(
  props: FieldProps["BooleanInput"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoCompanyLogoMetadataLivenessValidation}
    >
      <Field.BooleanInput
        name="job_company_info.company_logo.metadata.liveness"
        label="Liveness"
        placeholder="liveness"
        validation={JobCompanyInfoCompanyLogoMetadataLivenessValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoMetadataUpdatedAtValidation = {
  required: { value: true, message: "Updated At is required." },
  disabled: {
    value: true,
    message: "Updated At input is read only or disabled",
  },
};

export function JobCompanyInfoCompanyLogoMetadataUpdatedAt(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoCompanyLogoMetadataUpdatedAtValidation}
    >
      <Field.Input
        name="job_company_info.company_logo.metadata.updated_at"
        label="Updated At"
        placeholder="updated at"
        validation={JobCompanyInfoCompanyLogoMetadataUpdatedAtValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoMimetypeValidation = {
  disabled: { value: true, message: "Mimetype input is read only or disabled" },
};

export function JobCompanyInfoCompanyLogoMimetype(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoMimetypeValidation}>
      <Field.Input
        name="job_company_info.company_logo.mimetype"
        label="Document Mime Type"
        placeholder="document mime type"
        validation={JobCompanyInfoCompanyLogoMimetypeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoNameValidation = {
  required: { value: true, message: "Name is required." },
  minLength: { value: 1, message: "Name requires minimum length of 1" },
};

export function JobCompanyInfoCompanyLogoName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoNameValidation}>
      <Field.Input
        name="job_company_info.company_logo.name"
        label="Document Name"
        placeholder="document name"
        validation={JobCompanyInfoCompanyLogoNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyLogoOidValidation = {
  disabled: { value: true, message: "Oid input is read only or disabled" },
};

export function JobCompanyInfoCompanyLogoOid(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyLogoOidValidation}>
      <Field.Input
        name="job_company_info.company_logo.oid"
        label="Owner Id"
        placeholder="owner id"
        validation={JobCompanyInfoCompanyLogoOidValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoCompanyNameValidation = {
  required: { value: true, message: "Company Name is required." },
  disabled: {
    value: true,
    message: "Company Name input is read only or disabled",
  },
};

export function JobCompanyInfoCompanyName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoCompanyNameValidation}>
      <Field.Input
        name="job_company_info.company_name"
        label="Company Name"
        placeholder="company name"
        validation={JobCompanyInfoCompanyNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function JobCompanyInfoContactInfoContactAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressBuildingNameValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={
          JobCompanyInfoContactInfoContactAddressBuildingNameValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function JobCompanyInfoContactInfoContactAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={
        JobCompanyInfoContactInfoContactAddressBuildingNumberValidation
      }
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={
          JobCompanyInfoContactInfoContactAddressBuildingNumberValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function JobCompanyInfoContactInfoContactAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressCityValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={JobCompanyInfoContactInfoContactAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function JobCompanyInfoContactInfoContactAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressCountryValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.country"
        label="Country"
        placeholder="country"
        validation={JobCompanyInfoContactInfoContactAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function JobCompanyInfoContactInfoContactAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressCountyValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.county"
        label="County / State"
        placeholder="county / state"
        validation={JobCompanyInfoContactInfoContactAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function JobCompanyInfoContactInfoContactAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressLine1Validation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={JobCompanyInfoContactInfoContactAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function JobCompanyInfoContactInfoContactAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressLine2Validation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={JobCompanyInfoContactInfoContactAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressMonthsAtAddressValidation =
  {
    min: { value: 0, message: "Months At Address must be great than 0" },
    max: {
      value: 2147483647,
      message: "Months At Address must be smaller than 2.147483647e+09",
    },
  };

export function JobCompanyInfoContactInfoContactAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={
        JobCompanyInfoContactInfoContactAddressMonthsAtAddressValidation
      }
    >
      <Field.NumberFormatInput
        name="job_company_info.contact_info.contact_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          JobCompanyInfoContactInfoContactAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function JobCompanyInfoContactInfoContactAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactAddressPostcodeValidation}
    >
      <Field.Postcode
        name="job_company_info.contact_info.contact_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={JobCompanyInfoContactInfoContactAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactEmailValidation = {};

export function JobCompanyInfoContactInfoContactEmail(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactEmailValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_email"
        label="Contact Email"
        placeholder="contact email"
        validation={JobCompanyInfoContactInfoContactEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactNameValidation = {};

export function JobCompanyInfoContactInfoContactName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactNameValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_name"
        label="Contact Name"
        placeholder="contact name"
        validation={JobCompanyInfoContactInfoContactNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoContactPhoneValidation = {};

export function JobCompanyInfoContactInfoContactPhone(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoContactPhoneValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.contact_phone"
        label="Contact Phone Number"
        placeholder="contact phone number"
        validation={JobCompanyInfoContactInfoContactPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoContactInfoTradingNameValidation = {};

export function JobCompanyInfoContactInfoTradingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={JobCompanyInfoContactInfoTradingNameValidation}
    >
      <Field.Input
        name="job_company_info.contact_info.trading_name"
        label="Trading Name"
        placeholder="trading name"
        validation={JobCompanyInfoContactInfoTradingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const JobCompanyInfoVatNumberValidation = {
  disabled: {
    value: true,
    message: "Vat Number input is read only or disabled",
  },
};

export function JobCompanyInfoVatNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={JobCompanyInfoVatNumberValidation}>
      <Field.Input
        name="job_company_info.vat_number"
        label="Vat Number"
        placeholder="vat number"
        validation={JobCompanyInfoVatNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function JobCompanyInfoForm(props: any) {
  return (
    <>
      <JobCompanyInfoBankAccountAccountName {...props} />
      <JobCompanyInfoBankAccountAccountNumber {...props} />
      <JobCompanyInfoBankAccountMonthsHeld {...props} />
      <JobCompanyInfoBankAccountSortCode {...props} />
      <JobCompanyInfoCompanyLogoAid {...props} />
      <JobCompanyInfoCompanyLogoCid {...props} />
      <JobCompanyInfoCompanyLogoContent {...props} />
      <JobCompanyInfoCompanyLogoId {...props} />
      <JobCompanyInfoCompanyLogoMetadataCreatedAt {...props} />
      <JobCompanyInfoCompanyLogoMetadataLiveness {...props} />
      <JobCompanyInfoCompanyLogoMetadataUpdatedAt {...props} />
      <JobCompanyInfoCompanyLogoMimetype {...props} />
      <JobCompanyInfoCompanyLogoName {...props} />
      <JobCompanyInfoCompanyLogoOid {...props} />
      <JobCompanyInfoCompanyName {...props} />
      <JobCompanyInfoContactInfoContactAddressBuildingName {...props} />
      <JobCompanyInfoContactInfoContactAddressBuildingNumber {...props} />
      <JobCompanyInfoContactInfoContactAddressCity {...props} />
      <JobCompanyInfoContactInfoContactAddressCountry {...props} />
      <JobCompanyInfoContactInfoContactAddressCounty {...props} />
      <JobCompanyInfoContactInfoContactAddressLine1 {...props} />
      <JobCompanyInfoContactInfoContactAddressLine2 {...props} />
      <JobCompanyInfoContactInfoContactAddressMonthsAtAddress {...props} />
      <JobCompanyInfoContactInfoContactAddressPostcode {...props} />
      <JobCompanyInfoContactInfoContactEmail {...props} />
      <JobCompanyInfoContactInfoContactName {...props} />
      <JobCompanyInfoContactInfoContactPhone {...props} />
      <JobCompanyInfoContactInfoTradingName {...props} />
      <JobCompanyInfoVatNumber {...props} />
    </>
  );
}

export const BankAccountAccountNameValidation = {
  required: { value: true, message: "Account Name is required." },
  minLength: { value: 1, message: "Account Name requires minimum length of 1" },
};

export function BankAccountAccountName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={BankAccountAccountNameValidation}>
      <Field.Input
        name="bank_account.account_name"
        label="Account Name"
        placeholder="account name"
        validation={BankAccountAccountNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const BankAccountAccountNumberValidation = {
  required: { value: true, message: "Account Number is required." },
  minLength: {
    value: 1,
    message: "Account Number requires minimum length of 1",
  },
  pattern: {
    value: /^[0-9]{7,8}$/,
    message: "Account Number input is invalid",
  },
};

export function BankAccountAccountNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={BankAccountAccountNumberValidation}>
      <Field.Input
        name="bank_account.account_number"
        label="Account Number"
        placeholder="account number"
        validation={BankAccountAccountNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const BankAccountMonthsHeldValidation = {
  min: { value: 0, message: "Months Held must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months Held must be smaller than 2.147483647e+09",
  },
};

export function BankAccountMonthsHeld(props: FieldProps["NumberFormatInput"]) {
  return (
    <Field.Validator validation={BankAccountMonthsHeldValidation}>
      <Field.NumberFormatInput
        name="bank_account.months_held"
        label="Months Held For Bank Account"
        placeholder="months held for bank account"
        validation={BankAccountMonthsHeldValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const BankAccountSortCodeValidation = {
  required: { value: true, message: "Sort Code is required." },
  pattern: {
    value: /^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$/,
    message: "Sort Code input is invalid",
  },
};

export function BankAccountSortCode(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={BankAccountSortCodeValidation}>
      <Field.Input
        name="bank_account.sort_code"
        label="Sort Code"
        placeholder="sort code"
        validation={BankAccountSortCodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function BankAccountForm(props: any) {
  return (
    <>
      <BankAccountAccountName {...props} />
      <BankAccountAccountNumber {...props} />
      <BankAccountMonthsHeld {...props} />
      <BankAccountSortCode {...props} />
    </>
  );
}

export const CheckoutOptionValidation = {};

export function CheckoutOption(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CheckoutOptionValidation}>
      <Field.RadioSelect
        name="checkout_option."
        label="Checkout Option"
        placeholder="checkout option picked by customer, updated only via custom action"
        options={[
          { name: "Apply For Finance", value: "apply_for_finance" },
          { name: "Decline Job", value: "decline_job" },
          { name: "Pay On Completion", value: "pay_on_completion" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function CheckoutOptionForm(props: any) {
  return (
    <>
      <CheckoutOption {...props} />
    </>
  );
}

export const CustomerAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CustomerAddressBuildingName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressBuildingNameValidation}>
      <Field.Input
        name="customer.address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CustomerAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CustomerAddressBuildingNumber(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressBuildingNumberValidation}>
      <Field.Input
        name="customer.address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CustomerAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CustomerAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressCityValidation}>
      <Field.Input
        name="customer.address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CustomerAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CustomerAddressCountry(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressCountryValidation}>
      <Field.Input
        name="customer.address.country"
        label="Country"
        placeholder="country"
        validation={CustomerAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CustomerAddressCounty(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressCountyValidation}>
      <Field.Input
        name="customer.address.county"
        label="County / State"
        placeholder="county / state"
        validation={CustomerAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CustomerAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressLine1Validation}>
      <Field.Input
        name="customer.address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CustomerAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CustomerAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerAddressLine2Validation}>
      <Field.Input
        name="customer.address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CustomerAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CustomerAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CustomerAddressMonthsAtAddressValidation}>
      <Field.NumberFormatInput
        name="customer.address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={CustomerAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CustomerAddressPostcode(props: FieldProps["Postcode"]) {
  return (
    <Field.Validator validation={CustomerAddressPostcodeValidation}>
      <Field.Postcode
        name="customer.address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CustomerAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function CustomerEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerEmailValidation}>
      <Field.Input
        name="customer.email"
        label="Email"
        placeholder="email"
        validation={CustomerEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
  minLength: { value: 1, message: "First Name requires minimum length of 1" },
};

export function CustomerFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerFirstNameValidation}>
      <Field.Input
        name="customer.first_name"
        label="First Name"
        placeholder="first name"
        validation={CustomerFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
  minLength: { value: 1, message: "Last Name requires minimum length of 1" },
};

export function CustomerLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerLastNameValidation}>
      <Field.Input
        name="customer.last_name"
        label="Last Name"
        placeholder="last name"
        validation={CustomerLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerPhoneValidation = {
  required: { value: true, message: "Phone is required." },
  minLength: { value: 1, message: "Phone requires minimum length of 1" },
};

export function CustomerPhone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerPhoneValidation}>
      <Field.Input
        name="customer.phone"
        label="Phone Number"
        placeholder="phone number"
        validation={CustomerPhoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export function CustomerForm(props: any) {
  return (
    <>
      <CustomerAddressBuildingName {...props} />
      <CustomerAddressBuildingNumber {...props} />
      <CustomerAddressCity {...props} />
      <CustomerAddressCountry {...props} />
      <CustomerAddressCounty {...props} />
      <CustomerAddressLine1 {...props} />
      <CustomerAddressLine2 {...props} />
      <CustomerAddressMonthsAtAddress {...props} />
      <CustomerAddressPostcode {...props} />
      <CustomerEmail {...props} />
      <CustomerFirstName {...props} />
      <CustomerLastName {...props} />
      <CustomerPhone {...props} />
    </>
  );
}

export const CustomerDetailsCurrentAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CustomerDetailsCurrentAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsCurrentAddressBuildingNameValidation}
    >
      <Field.Input
        name="customer_details.current_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CustomerDetailsCurrentAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CustomerDetailsCurrentAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsCurrentAddressBuildingNumberValidation}
    >
      <Field.Input
        name="customer_details.current_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CustomerDetailsCurrentAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CustomerDetailsCurrentAddressCity(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsCurrentAddressCityValidation}>
      <Field.Input
        name="customer_details.current_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CustomerDetailsCurrentAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CustomerDetailsCurrentAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsCurrentAddressCountryValidation}
    >
      <Field.Input
        name="customer_details.current_address.country"
        label="Country"
        placeholder="country"
        validation={CustomerDetailsCurrentAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CustomerDetailsCurrentAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator validation={CustomerDetailsCurrentAddressCountyValidation}>
      <Field.Input
        name="customer_details.current_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CustomerDetailsCurrentAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CustomerDetailsCurrentAddressLine1(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsCurrentAddressLine1Validation}>
      <Field.Input
        name="customer_details.current_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CustomerDetailsCurrentAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CustomerDetailsCurrentAddressLine2(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsCurrentAddressLine2Validation}>
      <Field.Input
        name="customer_details.current_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CustomerDetailsCurrentAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CustomerDetailsCurrentAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsCurrentAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="customer_details.current_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={CustomerDetailsCurrentAddressMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsCurrentAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CustomerDetailsCurrentAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsCurrentAddressPostcodeValidation}
    >
      <Field.Postcode
        name="customer_details.current_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CustomerDetailsCurrentAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsDateOfBirthValidation = {
  required: { value: true, message: "Date Of Birth is required." },
};

export function CustomerDetailsDateOfBirth(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsDateOfBirthValidation}>
      <Field.Input
        name="customer_details.date_of_birth"
        label="Date Of Birth"
        placeholder="Customer's date of birth. Format to use: `dd/mm/yyyy`"
        validation={CustomerDetailsDateOfBirthValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsEmailValidation = {
  required: { value: true, message: "Email is required." },
};

export function CustomerDetailsEmail(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsEmailValidation}>
      <Field.Input
        name="customer_details.email"
        label="Email"
        placeholder="email"
        validation={CustomerDetailsEmailValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsFirstNameValidation = {
  required: { value: true, message: "First Name is required." },
};

export function CustomerDetailsFirstName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsFirstNameValidation}>
      <Field.Input
        name="customer_details.first_name"
        label="First Name"
        placeholder="first name"
        validation={CustomerDetailsFirstNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGenderValidation = {
  required: { value: true, message: "Gender is required." },
};

export function CustomerDetailsGender(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator validation={CustomerDetailsGenderValidation}>
      <Field.RadioSelect
        name="customer_details.gender"
        label="Gender"
        placeholder="gender"
        options={[
          { name: "Male", value: "male" },
          { name: "Female", value: "female" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CustomerDetailsGoodsDeliveryAddressBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressBuildingNameValidation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CustomerDetailsGoodsDeliveryAddressBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CustomerDetailsGoodsDeliveryAddressBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressBuildingNumberValidation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CustomerDetailsGoodsDeliveryAddressBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CustomerDetailsGoodsDeliveryAddressCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressCityValidation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.city"
        label="City / Town"
        placeholder="city / town"
        validation={CustomerDetailsGoodsDeliveryAddressCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CustomerDetailsGoodsDeliveryAddressCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressCountryValidation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.country"
        label="Country"
        placeholder="country"
        validation={CustomerDetailsGoodsDeliveryAddressCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CustomerDetailsGoodsDeliveryAddressCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressCountyValidation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.county"
        label="County / State"
        placeholder="county / state"
        validation={CustomerDetailsGoodsDeliveryAddressCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CustomerDetailsGoodsDeliveryAddressLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressLine1Validation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CustomerDetailsGoodsDeliveryAddressLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CustomerDetailsGoodsDeliveryAddressLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressLine2Validation}
    >
      <Field.Input
        name="customer_details.goods_delivery_address.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CustomerDetailsGoodsDeliveryAddressLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CustomerDetailsGoodsDeliveryAddressMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="customer_details.goods_delivery_address.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={
          CustomerDetailsGoodsDeliveryAddressMonthsAtAddressValidation
        }
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsGoodsDeliveryAddressPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CustomerDetailsGoodsDeliveryAddressPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsGoodsDeliveryAddressPostcodeValidation}
    >
      <Field.Postcode
        name="customer_details.goods_delivery_address.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CustomerDetailsGoodsDeliveryAddressPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsLastNameValidation = {
  required: { value: true, message: "Last Name is required." },
};

export function CustomerDetailsLastName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsLastNameValidation}>
      <Field.Input
        name="customer_details.last_name"
        label="Last Name"
        placeholder="last name"
        validation={CustomerDetailsLastNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsMaidenNameValidation = {};

export function CustomerDetailsMaidenName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsMaidenNameValidation}>
      <Field.Input
        name="customer_details.maiden_name"
        label="Maiden Name"
        placeholder="maiden name"
        validation={CustomerDetailsMaidenNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsMaritalStatusValidation = {
  required: { value: true, message: "Marital Status is required." },
};

export function CustomerDetailsMaritalStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CustomerDetailsMaritalStatusValidation}>
      <Field.Select
        name="customer_details.marital_status"
        label="Marital Status"
        placeholder="marital status"
        options={[
          { name: "Widowed", value: "widowed" },
          { name: "Other", value: "other" },
          { name: "Married", value: "married" },
          { name: "Divorced", value: "divorced" },
          { name: "Cohabiting", value: "cohabiting" },
          { name: "To Be Married", value: "to_be_married" },
          { name: "Separated", value: "separated" },
          { name: "Single", value: "single" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsMiddleNameValidation = {};

export function CustomerDetailsMiddleName(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsMiddleNameValidation}>
      <Field.Input
        name="customer_details.middle_name"
        label="Middle Name"
        placeholder="middle name"
        validation={CustomerDetailsMiddleNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsMobileValidation = {};

export function CustomerDetailsMobile(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsMobileValidation}>
      <Field.Input
        name="customer_details.mobile"
        label="Mobile"
        placeholder="mobile"
        validation={CustomerDetailsMobileValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsMonthlyRentAmountAmountValidation = {
  required: { value: true, message: "Amount is required." },
  min: { value: 0, message: "Amount must be great than 0" },
  max: {
    value: 2147483647,
    message: "Amount must be smaller than 2.147483647e+09",
  },
};

export function CustomerDetailsMonthlyRentAmountAmount(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsMonthlyRentAmountAmountValidation}
    >
      <Field.NumberFormatInput
        name="customer_details.monthly_rent_amount.amount"
        label="Amount / Number In Pence"
        placeholder="amount / number in pence"
        validation={CustomerDetailsMonthlyRentAmountAmountValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsMonthlyRentAmountCurrencyValidation = {};

export function CustomerDetailsMonthlyRentAmountCurrency(
  props: FieldProps["RadioSelect"]
): FunctionComponent<FieldProps["RadioSelect"]> {
  return (
    <Field.Validator
      validation={CustomerDetailsMonthlyRentAmountCurrencyValidation}
    >
      <Field.RadioSelect
        name="customer_details.monthly_rent_amount.currency"
        label="Currency"
        placeholder="currency"
        options={[{ name: "GBP", value: "GBP" }]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsNumberOfDependantsValidation = {
  required: { value: true, message: "Number Of Dependants is required." },
  min: { value: 0, message: "Number Of Dependants must be great than 0" },
  max: {
    value: 2147483647,
    message: "Number Of Dependants must be smaller than 2.147483647e+09",
  },
};

export function CustomerDetailsNumberOfDependants(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator validation={CustomerDetailsNumberOfDependantsValidation}>
      <Field.NumberFormatInput
        name="customer_details.number_of_dependants"
        label="Number Of Dependants"
        placeholder="number of dependants"
        validation={CustomerDetailsNumberOfDependantsValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CustomerDetailsPreviousAddressOneBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneBuildingNameValidation}
    >
      <Field.Input
        name="customer_details.previous_address_one.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CustomerDetailsPreviousAddressOneBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CustomerDetailsPreviousAddressOneBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneBuildingNumberValidation}
    >
      <Field.Input
        name="customer_details.previous_address_one.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CustomerDetailsPreviousAddressOneBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressOneCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneCityValidation}
    >
      <Field.Input
        name="customer_details.previous_address_one.city"
        label="City / Town"
        placeholder="city / town"
        validation={CustomerDetailsPreviousAddressOneCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressOneCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneCountryValidation}
    >
      <Field.Input
        name="customer_details.previous_address_one.country"
        label="Country"
        placeholder="country"
        validation={CustomerDetailsPreviousAddressOneCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressOneCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneCountyValidation}
    >
      <Field.Input
        name="customer_details.previous_address_one.county"
        label="County / State"
        placeholder="county / state"
        validation={CustomerDetailsPreviousAddressOneCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressOneLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneLine1Validation}
    >
      <Field.Input
        name="customer_details.previous_address_one.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CustomerDetailsPreviousAddressOneLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressOneLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneLine2Validation}
    >
      <Field.Input
        name="customer_details.previous_address_one.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CustomerDetailsPreviousAddressOneLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOneMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CustomerDetailsPreviousAddressOneMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOneMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="customer_details.previous_address_one.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={CustomerDetailsPreviousAddressOneMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressOnePostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CustomerDetailsPreviousAddressOnePostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressOnePostcodeValidation}
    >
      <Field.Postcode
        name="customer_details.previous_address_one.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CustomerDetailsPreviousAddressOnePostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoBuildingNameValidation = {
  minLength: {
    value: 1,
    message: "Building Name requires minimum length of 1",
  },
};

export function CustomerDetailsPreviousAddressTwoBuildingName(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoBuildingNameValidation}
    >
      <Field.Input
        name="customer_details.previous_address_two.building_name"
        label="Building Name"
        placeholder="building name"
        validation={CustomerDetailsPreviousAddressTwoBuildingNameValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoBuildingNumberValidation = {
  minLength: {
    value: 1,
    message: "Building Number requires minimum length of 1",
  },
};

export function CustomerDetailsPreviousAddressTwoBuildingNumber(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoBuildingNumberValidation}
    >
      <Field.Input
        name="customer_details.previous_address_two.building_number"
        label="Building Number"
        placeholder="building number"
        validation={CustomerDetailsPreviousAddressTwoBuildingNumberValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoCityValidation = {
  required: { value: true, message: "City is required." },
  minLength: { value: 1, message: "City requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressTwoCity(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoCityValidation}
    >
      <Field.Input
        name="customer_details.previous_address_two.city"
        label="City / Town"
        placeholder="city / town"
        validation={CustomerDetailsPreviousAddressTwoCityValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoCountryValidation = {
  required: { value: true, message: "Country is required." },
  minLength: { value: 1, message: "Country requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressTwoCountry(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoCountryValidation}
    >
      <Field.Input
        name="customer_details.previous_address_two.country"
        label="Country"
        placeholder="country"
        validation={CustomerDetailsPreviousAddressTwoCountryValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoCountyValidation = {
  minLength: { value: 1, message: "County requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressTwoCounty(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoCountyValidation}
    >
      <Field.Input
        name="customer_details.previous_address_two.county"
        label="County / State"
        placeholder="county / state"
        validation={CustomerDetailsPreviousAddressTwoCountyValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoLine1Validation = {
  required: { value: true, message: "Line 1 is required." },
  minLength: { value: 1, message: "Line 1 requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressTwoLine1(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoLine1Validation}
    >
      <Field.Input
        name="customer_details.previous_address_two.line_1"
        label="Line 1"
        placeholder="line 1"
        validation={CustomerDetailsPreviousAddressTwoLine1Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoLine2Validation = {
  minLength: { value: 1, message: "Line 2 requires minimum length of 1" },
};

export function CustomerDetailsPreviousAddressTwoLine2(
  props: FieldProps["Input"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoLine2Validation}
    >
      <Field.Input
        name="customer_details.previous_address_two.line_2"
        label="Line 2"
        placeholder="line 2"
        validation={CustomerDetailsPreviousAddressTwoLine2Validation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoMonthsAtAddressValidation = {
  min: { value: 0, message: "Months At Address must be great than 0" },
  max: {
    value: 2147483647,
    message: "Months At Address must be smaller than 2.147483647e+09",
  },
};

export function CustomerDetailsPreviousAddressTwoMonthsAtAddress(
  props: FieldProps["NumberFormatInput"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoMonthsAtAddressValidation}
    >
      <Field.NumberFormatInput
        name="customer_details.previous_address_two.months_at_address"
        label="Months At Address"
        placeholder="months at address"
        validation={CustomerDetailsPreviousAddressTwoMonthsAtAddressValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsPreviousAddressTwoPostcodeValidation = {
  required: { value: true, message: "Postcode is required." },
  pattern: {
    value:
      /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/,
    message: "Postcode input is invalid",
  },
};

export function CustomerDetailsPreviousAddressTwoPostcode(
  props: FieldProps["Postcode"]
) {
  return (
    <Field.Validator
      validation={CustomerDetailsPreviousAddressTwoPostcodeValidation}
    >
      <Field.Postcode
        name="customer_details.previous_address_two.postcode"
        label="Postcode / Zipcode"
        placeholder="postcode / zipcode"
        validation={CustomerDetailsPreviousAddressTwoPostcodeValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsResidentialStatusValidation = {
  required: { value: true, message: "Residential Status is required." },
};

export function CustomerDetailsResidentialStatus(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CustomerDetailsResidentialStatusValidation}>
      <Field.Select
        name="customer_details.residential_status"
        label="Residential Status"
        placeholder="residential status"
        options={[
          { name: "Tenant", value: "tenant" },
          { name: "Council Tenant", value: "council tenant" },
          { name: "Living With Parents", value: "living with parents" },
          { name: "Owner", value: "owner" },
          { name: "Owner Without Mortgage", value: "owner without mortgage" },
          { name: "Lodger", value: "lodger" },
          { name: "Armed Forces", value: "armed forces" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsTelephoneValidation = {};

export function CustomerDetailsTelephone(props: FieldProps["Input"]) {
  return (
    <Field.Validator validation={CustomerDetailsTelephoneValidation}>
      <Field.Input
        name="customer_details.telephone"
        label="Telephone"
        placeholder="telephone"
        validation={CustomerDetailsTelephoneValidation}
        {...props}
      />
    </Field.Validator>
  );
}

export const CustomerDetailsTitleValidation = {
  required: { value: true, message: "Title is required." },
};

export function CustomerDetailsTitle(
  props: FieldProps["Select"]
): FunctionComponent<FieldProps["Select"]> {
  return (
    <Field.Validator validation={CustomerDetailsTitleValidation}>
      <Field.Select
        name="customer_details.title"
        label="Title"
        placeholder="title"
        options={[
          { name: "Mrs", value: "mrs" },
          { name: "Mr", value: "mr" },
          { name: "Miss", value: "miss" },
          { name: "Ms", value: "ms" },
          { name: "Dr", value: "dr" },
        ]}
        {...props}
      />
    </Field.Validator>
  );
}

export function CustomerDetailsForm(props: any) {
  return (
    <>
      <CustomerDetailsCurrentAddressBuildingName {...props} />
      <CustomerDetailsCurrentAddressBuildingNumber {...props} />
      <CustomerDetailsCurrentAddressCity {...props} />
      <CustomerDetailsCurrentAddressCountry {...props} />
      <CustomerDetailsCurrentAddressCounty {...props} />
      <CustomerDetailsCurrentAddressLine1 {...props} />
      <CustomerDetailsCurrentAddressLine2 {...props} />
      <CustomerDetailsCurrentAddressMonthsAtAddress {...props} />
      <CustomerDetailsCurrentAddressPostcode {...props} />
      <CustomerDetailsDateOfBirth {...props} />
      <CustomerDetailsEmail {...props} />
      <CustomerDetailsFirstName {...props} />
      <CustomerDetailsGender {...props} />
      <CustomerDetailsGoodsDeliveryAddressBuildingName {...props} />
      <CustomerDetailsGoodsDeliveryAddressBuildingNumber {...props} />
      <CustomerDetailsGoodsDeliveryAddressCity {...props} />
      <CustomerDetailsGoodsDeliveryAddressCountry {...props} />
      <CustomerDetailsGoodsDeliveryAddressCounty {...props} />
      <CustomerDetailsGoodsDeliveryAddressLine1 {...props} />
      <CustomerDetailsGoodsDeliveryAddressLine2 {...props} />
      <CustomerDetailsGoodsDeliveryAddressMonthsAtAddress {...props} />
      <CustomerDetailsGoodsDeliveryAddressPostcode {...props} />
      <CustomerDetailsLastName {...props} />
      <CustomerDetailsMaidenName {...props} />
      <CustomerDetailsMaritalStatus {...props} />
      <CustomerDetailsMiddleName {...props} />
      <CustomerDetailsMobile {...props} />
      <CustomerDetailsMonthlyRentAmountAmount {...props} />
      <CustomerDetailsMonthlyRentAmountCurrency {...props} />
      <CustomerDetailsNumberOfDependants {...props} />
      <CustomerDetailsPreviousAddressOneBuildingName {...props} />
      <CustomerDetailsPreviousAddressOneBuildingNumber {...props} />
      <CustomerDetailsPreviousAddressOneCity {...props} />
      <CustomerDetailsPreviousAddressOneCountry {...props} />
      <CustomerDetailsPreviousAddressOneCounty {...props} />
      <CustomerDetailsPreviousAddressOneLine1 {...props} />
      <CustomerDetailsPreviousAddressOneLine2 {...props} />
      <CustomerDetailsPreviousAddressOneMonthsAtAddress {...props} />
      <CustomerDetailsPreviousAddressOnePostcode {...props} />
      <CustomerDetailsPreviousAddressTwoBuildingName {...props} />
      <CustomerDetailsPreviousAddressTwoBuildingNumber {...props} />
      <CustomerDetailsPreviousAddressTwoCity {...props} />
      <CustomerDetailsPreviousAddressTwoCountry {...props} />
      <CustomerDetailsPreviousAddressTwoCounty {...props} />
      <CustomerDetailsPreviousAddressTwoLine1 {...props} />
      <CustomerDetailsPreviousAddressTwoLine2 {...props} />
      <CustomerDetailsPreviousAddressTwoMonthsAtAddress {...props} />
      <CustomerDetailsPreviousAddressTwoPostcode {...props} />
      <CustomerDetailsResidentialStatus {...props} />
      <CustomerDetailsTelephone {...props} />
      <CustomerDetailsTitle {...props} />
    </>
  );
}
