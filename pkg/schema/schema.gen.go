// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
	Uid      string              `json:"uid"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate   `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo        `json:"company_info"`
	CompanyType     CompanyCompanyType `json:"company_type"`
	CompanyTypeInfo interface{}        `json:"company_type_info"`
	Metadata        Metadata           `json:"metadata"`
	Uid             string             `json:"uid"`
	Users           *[]UserType        `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// Post new Company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing Company
	// (DELETE /api/company/{uid})
	DeleteCompany(ctx echo.Context, uid string) error
	// get existing Company
	// (GET /api/company/{uid})
	GetCompany(ctx echo.Context, uid string) error
	// put existing Company
	// (PUT /api/company/{uid})
	PutCompany(ctx echo.Context, uid string) error
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, uid)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, uid)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, uid)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:uid", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:uid", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:uid", wrapper.PutCompany)
	router.GET(baseURL+"/api/me", wrapper.Me)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mpw3538GAAD//xurg0xAIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

