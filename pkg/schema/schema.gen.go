// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ApplicationDepositType.
const (
	ApplicationDepositTypeFixedDeposit   ApplicationDepositType = "fixed_deposit"
	ApplicationDepositTypeNoDeposit      ApplicationDepositType = "no_deposit"
	ApplicationDepositTypePartialDeposit ApplicationDepositType = "partial_deposit"
)

// Defines values for CheckoutOption.
const (
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup CompanyLifecycle = "completed_setup"
	CompanyLifecycleOnboarded      CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered     CompanyLifecycle = "registered"
	CompanyLifecycleVerified       CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	Elecsa  CompanyInfoTradeBody = "elecsa"
	GasSafe CompanyInfoTradeBody = "gas_safe"
	Napit   CompanyInfoTradeBody = "napit"
	Niceic  CompanyInfoTradeBody = "niceic"
	Other   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Tiler                        CompanyInfoTradeType = "tiler"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"
	DirectorInfoVerificationStatusVerified    DirectorInfoVerificationStatus = "verified"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinacneNotApproved FinanceStatus = "finacne_not_approved"
	FinanceStatusFinanceDepositPaid FinanceStatus = "finance_deposit_paid"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for JobDepositType.
const (
	JobDepositTypeFixedDeposit   JobDepositType = "fixed_deposit"
	JobDepositTypeNoDeposit      JobDepositType = "no_deposit"
	JobDepositTypePartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobStatus.
const (
	Accepted JobStatus = "accepted"
	Archived JobStatus = "archived"
	Declined JobStatus = "declined"
	Draft    JobStatus = "draft"
	Sent     JobStatus = "sent"
)

// Defines values for JobItemVatRate.
const (
	JobItemVatRateCustom    JobItemVatRate = "custom"
	JobItemVatRateExempted  JobItemVatRate = "exempted"
	JobItemVatRateN0        JobItemVatRate = "0%"
	JobItemVatRateN20       JobItemVatRate = "20%"
	JobItemVatRateN5        JobItemVatRate = "5%"
	JobItemVatRateVatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for PaymentKind.
const (
	PaymentKindApplication PaymentKind = "application"
	PaymentKindCharge      PaymentKind = "charge"
)

// Defines values for PaymentPaymentMethod.
const (
	Card        PaymentPaymentMethod = "card"
	Cash        PaymentPaymentMethod = "cash"
	DirectDebit PaymentPaymentMethod = "direct_debit"
	Loan        PaymentPaymentMethod = "loan"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// Application defines model for Application.
type Application struct {
	CheckoutOptions *[]CheckoutOption       `json:"checkout_options,omitempty"`
	Cid             *string                 `json:"cid,omitempty"`
	Customer        *Customer               `json:"customer,omitempty"`
	DepositType     *ApplicationDepositType `json:"deposit_type,omitempty"`
	DepositValue    *Money                  `json:"deposit_value,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	FinanceOption   string                  `json:"finance_option"`
	FinanceOptions  *[]string               `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus          `json:"finance_status,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Metadata        *Metadata               `json:"metadata,omitempty"`
	Oid             *string                 `json:"oid,omitempty"`
	Payments        *[]Payment              `json:"payments,omitempty"`
	QuoteItems      *[]JobItem              `json:"quote_items,omitempty"`
	Title           *string                 `json:"title,omitempty"`
	Total           *MoneyTotal             `json:"total,omitempty"`
}

// ApplicationDepositType defines model for Application.DepositType.
type ApplicationDepositType string

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// CheckoutOption defines model for CheckoutOption.
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate        `json:"available_rates,omitempty"`
	Cid             *string                 `json:"cid,omitempty"`
	CompanyInfo     *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo     *Document               `json:"company_logo,omitempty"`
	CompanyType     CompanyCompanyType      `json:"company_type"`
	CompanyTypeInfo interface{}             `json:"company_type_info"`
	Emails          *[]openapi_types.Email  `json:"emails,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Lifecycle       *CompanyLifecycle       `json:"lifecycle,omitempty"`
	Metadata        *Metadata               `json:"metadata,omitempty"`
	Oid             *string                 `json:"oid,omitempty"`
	QuotePreference *CompanyQuotePreference `json:"quote_preference,omitempty"`
	SkipDeposit     *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	Users           *[]UserType             `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                         `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  string    `json:"content"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
}

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        Money                `json:"amount"`
	Cid           *string              `json:"cid,omitempty"`
	Id            *string              `json:"id,omitempty"`
	Kid           *string              `json:"kid,omitempty"`
	Kind          *PaymentKind         `json:"kind,omitempty"`
	Metadata      *Metadata            `json:"metadata,omitempty"`
	Oid           *string              `json:"oid,omitempty"`
	PaymentMethod PaymentPaymentMethod `json:"payment_method"`
	Status        *PaymentStatus       `json:"status,omitempty"`
	Xid           *string              `json:"xid,omitempty"`
	Xref          *string              `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// Pence defines model for Pence.
type Pence int32

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostApplicationJSONBody defines parameters for PostApplication.
type PostApplicationJSONBody Application

// PutApplicationJSONBody defines parameters for PutApplication.
type PutApplicationJSONBody Application

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostApplicationJSONRequestBody defines body for PostApplication for application/json ContentType.
type PostApplicationJSONRequestBody PostApplicationJSONBody

// PutApplicationJSONRequestBody defines body for PutApplication for application/json ContentType.
type PutApplicationJSONRequestBody PutApplicationJSONBody

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all applications
	// (GET /api/application)
	GetApplications(ctx echo.Context) error
	// post new application
	// (POST /api/application)
	PostApplication(ctx echo.Context) error
	// delete existing application
	// (DELETE /api/application/{id})
	DeleteApplication(ctx echo.Context, id string) error
	// get existing application
	// (GET /api/application/{id})
	GetApplication(ctx echo.Context, id string) error
	// put existing application
	// (PUT /api/application/{id})
	PutApplication(ctx echo.Context, id string) error
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// PostApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApplication(ctx)
	return err
}

// DeleteApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApplication(ctx, id)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// PutApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PutApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutApplication(ctx, id)
	return err
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/application", wrapper.GetApplications)
	router.POST(baseURL+"/api/application", wrapper.PostApplication)
	router.DELETE(baseURL+"/api/application/:id", wrapper.DeleteApplication)
	router.GET(baseURL+"/api/application/:id", wrapper.GetApplication)
	router.PUT(baseURL+"/api/application/:id", wrapper.PutApplication)
	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fzr701lyvDr+IwAA//8VD4X5mnIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
