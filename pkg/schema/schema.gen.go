// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusDispute PaymentStatus = "dispute"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for PaymentMethod.
const (
	PaymentMethodCard PaymentMethod = "card"

	PaymentMethodDirectDebit PaymentMethod = "direct_debit"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
	Uid      string              `json:"uid"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate   `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo        `json:"company_info"`
	CompanyType     CompanyCompanyType `json:"company_type"`
	CompanyTypeInfo interface{}        `json:"company_type_info"`
	Metadata        Metadata           `json:"metadata"`
	Uid             string             `json:"uid"`
	Users           *[]UserType        `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// Customer defines model for Customer.
type Customer struct {
	Address   Address             `json:"address"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	Cid            string          `json:"cid"`
	Customer       Customer        `json:"customer"`
	DepositType    string          `json:"deposit_type"`
	DepositValue   int32           `json:"deposit_value"`
	Description    string          `json:"description"`
	JobItems       *[]JobItem      `json:"job_items,omitempty"`
	Metadata       Metadata        `json:"metadata"`
	Notes          *[]string       `json:"notes,omitempty"`
	Oid            string          `json:"oid"`
	PaymentMethods []PaymentMethod `json:"payment_methods"`
	Payments       *[]Payment      `json:"payments,omitempty"`
	Title          string          `json:"title"`
	Uid            string          `json:"uid"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description *string `json:"description,omitempty"`
	Price       *int32  `json:"price,omitempty"`
	Quantity    *int32  `json:"quantity,omitempty"`
	Title       *string `json:"title,omitempty"`
	Vat         *int32  `json:"vat,omitempty"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount   int32           `json:"amount"`
	Kid      string          `json:"kid"`
	Kind     PaymentKind     `json:"kind"`
	Metadata Metadata        `json:"metadata"`
	Provider PaymentProvider `json:"provider"`
	Status   PaymentStatus   `json:"status"`
	Uid      string          `json:"uid"`
	Xid      string          `json:"xid"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentMethod defines model for PaymentMethod.
type PaymentMethod string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// Post new Company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing Company
	// (DELETE /api/company/{uid})
	DeleteCompany(ctx echo.Context, uid string) error
	// get existing Company
	// (GET /api/company/{uid})
	GetCompany(ctx echo.Context, uid string) error
	// put existing Company
	// (PUT /api/company/{uid})
	PutCompany(ctx echo.Context, uid string) error
	// Get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// Post new Job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing Job
	// (DELETE /api/job/{uid})
	DeleteJob(ctx echo.Context, uid string) error
	// get existing Job
	// (GET /api/job/{uid})
	GetJob(ctx echo.Context, uid string) error
	// put existing Job
	// (PUT /api/job/{uid})
	PutJob(ctx echo.Context, uid string) error
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, uid)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, uid)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, uid)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, uid)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, uid)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uid", runtime.ParamLocationPath, ctx.Param("uid"), &uid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, uid)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:uid", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:uid", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:uid", wrapper.PutCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:uid", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:uid", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:uid", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CwAA//+dlDGRcDYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

