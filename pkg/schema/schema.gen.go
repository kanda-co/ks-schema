// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusDispute PaymentStatus = "dispute"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for PaymentMethod.
const (
	PaymentMethodCard PaymentMethod = "card"

	PaymentMethodDirectDebit PaymentMethod = "direct_debit"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate   `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo        `json:"company_info"`
	CompanyType     CompanyCompanyType `json:"company_type"`
	CompanyTypeInfo interface{}        `json:"company_type_info"`
	Id              string             `json:"id"`
	Metadata        Metadata           `json:"metadata"`
	Users           *[]UserType        `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// Customer defines model for Customer.
type Customer struct {
	Address   Address             `json:"address"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	Cid            string          `json:"cid"`
	Customer       Customer        `json:"customer"`
	DepositType    string          `json:"deposit_type"`
	DepositValue   int32           `json:"deposit_value"`
	Description    string          `json:"description"`
	Id             string          `json:"id"`
	JobItems       *[]JobItem      `json:"job_items,omitempty"`
	Metadata       Metadata        `json:"metadata"`
	Notes          *[]string       `json:"notes,omitempty"`
	Oid            string          `json:"oid"`
	PaymentMethods []PaymentMethod `json:"payment_methods"`
	Payments       *[]Payment      `json:"payments,omitempty"`
	Title          string          `json:"title"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description *string `json:"description,omitempty"`
	Price       *int32  `json:"price,omitempty"`
	Quantity    *int32  `json:"quantity,omitempty"`
	Title       *string `json:"title,omitempty"`
	Vat         *int32  `json:"vat,omitempty"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount   int32           `json:"amount"`
	Id       string          `json:"id"`
	Kid      string          `json:"kid"`
	Kind     PaymentKind     `json:"kind"`
	Metadata Metadata        `json:"metadata"`
	Provider PaymentProvider `json:"provider"`
	Status   PaymentStatus   `json:"status"`
	Xid      string          `json:"xid"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentMethod defines model for PaymentMethod.
type PaymentMethod string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// Post new Company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing Company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing Company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing Company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// Get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// Post new Job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing Job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing Job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing Job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/C8AAP//+/uHGVM2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

