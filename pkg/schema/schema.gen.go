// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentPaymentMethod.
const (
	PaymentPaymentMethodCard PaymentPaymentMethod = "card"

	PaymentPaymentMethodDirectDebit PaymentPaymentMethod = "direct_debit"

	PaymentPaymentMethodLoan PaymentPaymentMethod = "loan"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderDuologi PaymentProvider = "duologi"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderOmni PaymentProvider = "omni"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"

	PaymentStatusDisputed PaymentStatus = "disputed"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate       `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo            `json:"company_info"`
	CompanyType     CompanyCompanyType     `json:"company_type"`
	CompanyTypeInfo interface{}            `json:"company_type_info"`
	Emails          *[]openapi_types.Email `json:"emails,omitempty"`
	Id              string                 `json:"id"`
	Metadata        Metadata               `json:"metadata"`
	Users           *[]UserType            `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// Customer defines model for Customer.
type Customer struct {
	Address   Address             `json:"address"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	Cid          string     `json:"cid"`
	Customer     Customer   `json:"customer"`
	DepositType  string     `json:"deposit_type"`
	DepositValue int32      `json:"deposit_value"`
	Description  string     `json:"description"`
	Id           string     `json:"id"`
	JobItems     *[]JobItem `json:"job_items,omitempty"`
	Metadata     Metadata   `json:"metadata"`
	Notes        *[]string  `json:"notes,omitempty"`
	Oid          string     `json:"oid"`
	Payments     *[]Payment `json:"payments,omitempty"`
	Title        string     `json:"title"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description   string  `json:"description"`
	Price         int32   `json:"price"`
	Quantity      int32   `json:"quantity"`
	QuoteDocument *string `json:"quote_document,omitempty"`
	Title         string  `json:"title"`
	Vat           int32   `json:"vat"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        int32                `json:"amount"`
	Cid           string               `json:"cid"`
	Id            string               `json:"id"`
	Kid           string               `json:"kid"`
	Kind          PaymentKind          `json:"kind"`
	Metadata      Metadata             `json:"metadata"`
	Oid           string               `json:"oid"`
	PaymentMethod PaymentPaymentMethod `json:"payment_method"`
	Provider      PaymentProvider      `json:"provider"`
	Status        PaymentStatus        `json:"status"`
	Xid           string               `json:"xid"`
	Xref          *string              `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// Post new Company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing Company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing Company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing Company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// Get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// Post new Job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing Job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing Job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing Job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// Get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// Post new Payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing Payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing Payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing Payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"w0VyXB3/HwAA//8BTbSXbUIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

