// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           *string `json:"city,omitempty"`
	Country        *string `json:"country,omitempty"`
	County         *string `json:"county,omitempty"`
	Line1          *string `json:"line_1,omitempty"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       *string `json:"postcode,omitempty"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string `json:"audience,omitempty"`
	Disabled *bool   `json:"disabled,omitempty"`
	Email    *string `json:"email,omitempty"`
	Issuer   *string `json:"issuer,omitempty"`
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
	Provider *string `json:"provider,omitempty"`
	Role     *string `json:"role,omitempty"`
	Subject  *string `json:"subject,omitempty"`
	Token    *string `json:"token,omitempty"`
	Uid      *string `json:"uid,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled *bool   `json:"enabled,omitempty"`
	Fee     *int    `json:"fee,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate    `json:"available_rates,omitempty"`
	CompanyInfo     *CompanyInfo        `json:"company_info,omitempty"`
	CompanyType     *CompanyCompanyType `json:"company_type,omitempty"`
	CompanyTypeInfo *interface{}        `json:"company_type_info,omitempty"`
	Users           *[]UserType         `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    *int                  `json:"average_job_value,omitempty"`
	AverageMonthlyJobs *int                  `json:"average_monthly_jobs,omitempty"`
	InsuranceDocument  *string               `json:"insurance_document,omitempty"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          *CompanyInfoTradeType `json:"trade_type,omitempty"`
	UseSubcontractor   *bool                 `json:"use_subcontractor,omitempty"`
	WarrantyLength     *int                  `json:"warranty_length,omitempty"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        *Address                        `json:"home_address,omitempty"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress *Address `json:"company_address,omitempty"`
	CompanyName    *string  `json:"company_name,omitempty"`
	TradingAddress *Address `json:"trading_address,omitempty"`
}

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber *string  `json:"national_insurance_number,omitempty"`
	TradingAddress          *Address `json:"trading_address,omitempty"`
	TradingName             *string  `json:"trading_name,omitempty"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo        `json:"director_info,omitempty"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	FirstName    *string              `json:"first_name,omitempty"`
	LastName     *string              `json:"last_name,omitempty"`
	Mobile       *string              `json:"mobile,omitempty"`
	Role         *UserTypeRole        `json:"role,omitempty"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// CreateOnboardingJSONBody defines parameters for CreateOnboarding.
type CreateOnboardingJSONBody Company

// CreateOnboardingJSONRequestBody defines body for CreateOnboarding for application/json ContentType.
type CreateOnboardingJSONRequestBody CreateOnboardingJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// Create new Onboarding
	// (POST /api/onboarding)
	CreateOnboarding(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// CreateOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOnboarding(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOnboarding(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/me", wrapper.Me)
	router.POST(baseURL+"/api/onboarding", wrapper.CreateOnboarding)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW8bNxP+KwLf96hYTlL0oFuSfsBtghT5QA+GsBiRs9LEXHIznJUrBPrvBcldr2Rz",
	"FadIgZ4scmaHM8888+EvSvum9Q6dBLX8ooLeYgPp5wtjGEP62bJvkYUwndYdWUNuUzloMF7IvkW1VEGY",
	"3EYd5kcaXbNGLupokn1Z4DsnfEZWFllyWD2dFj0rilofRHtTCuMwH278+hNqieovOtl+DDmiU1CgM4RO",
	"l/EwFGBt0RwJ195bBBel2ADZ4ncUQjcB3yT27da7SYn4j+9el4Xsd2QmHmNvyyZDl6EpycTfoCtKOjKP",
	"xXsHZCN070DwIejozsBa47HP5AQ3yGegK73/yjctuH0h3YNjFYPkKxJs0o//M9Zqqf63GEtr0dfV4jSg",
	"8Ulghn1meHqxIlf7rxnrvbuKqkefZpMRna5Ry2tlqSFBU/VyNVfBW6yEIeZ7NS+V2WjpzhPv8G2tltfn",
	"fXqdHzt17fwn773FD8mZrL4qJKILyI9HOZboh2jiAcBnknzVx3k/0ciwweqTX1c7sN0Epwa1xjvZ2n1U",
	"D2VNcqFjcBor43XXoEvVU3tuQCKBIeCPP6hCUlK+qrU3++PkOtJIWs0VWtQB1FxtIFQBalSR6S2Jmisv",
	"24lMj0bP9eqsdZ9X8SF0G3KI3DsgTJrAxdOu0lvgDXJFLghYm5SE8t8bEr1FV9Ukki5q6z1XFvbppLXs",
	"KnCmCqg7JtnPeiMg5F1Qc3VLzvjbkJSM9xzvLDgTNLTR67kC4kp7Zyh+kq/WIFv2vonKhmmHt7DPJtpo",
	"OCT0Uh4HkzUxthY0xkPTWaFcNwOo/akEbRewCt1aeycMWjyX29RtZKaTfWXRbWRbIk2JtD8RYzRaZu3W",
	"N1jBOMDPtqRe7TBXO2SqSSeQqyAgXTjhmpcqq6BRgzaaQvQlj39m9oXBOUzfuwogJ8+fjQVwVDoNhgCb",
	"id7N+LkjjsPgOtsc9UsNpdCnCq7lNvjtQA5fTk7pSJu4IH2r6RKw9/rngzBcyifYamw9X6n1f+LZ+OU3",
	"zNe7Rv3AadPz+1GD8KQYjjeqO1Llm0KV1sRBpvNk4Zy08Wua2IyGlWmonZ4RT8A0FPvjcG7AwSb3vP4m",
	"CNT1o2oqLmB9f3wfkcjIvURg5LippmU9nX4ZcPjtzw9x/ift2IeSdMRlK9KqwyGNqQy7waCZ2sggtVS/",
	"gzMwe4+8I42zF39czdLDkDq7xIjvqTxJSmFQ2iGHbOnpxeXFZQTKtxjHlFqq5+lqrlqQbYpkAS0tMvQb",
	"TGMyMiSx+cqopXoTi5wxtN6FHPuzy8tcuE76wQpta/uOtvgUvBv/yfkqs4ddP+FxisMbnFHPNYM1dFa+",
	"27O5TRbe7Bz+1aIWNDPsdeIC3jQQ/1lSv6LMBrfmSmATIu3uglhF7QSod2sPHCs1VZ0PBWRfMYLg21Ez",
	"91cM8rLfP75LrMN6XYh29HLWF8asp/1xqxfu8PAvcuCMgxkiM5t29D9EjuzszOHt7CSpA02GOFeH46aS",
	"lv3jdnK9ist5QN6lbfz6i+rY9m0jLBdH1HryGS5uYie40P6iu1GH1eHvAAAA//90sWaPaxAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

