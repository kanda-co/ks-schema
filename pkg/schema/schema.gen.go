// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string `json:"audience,omitempty"`
	Disabled *bool   `json:"disabled,omitempty"`
	Email    *string `json:"email,omitempty"`
	Issuer   *string `json:"issuer,omitempty"`
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
	Provider *string `json:"provider,omitempty"`
	Role     *string `json:"role,omitempty"`
	Subject  *string `json:"subject,omitempty"`
	Token    *string `json:"token,omitempty"`
	Uid      *string `json:"uid,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate   `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo        `json:"company_info"`
	CompanyType     CompanyCompanyType `json:"company_type"`
	CompanyTypeInfo interface{}        `json:"company_type_info"`
	Metadata        *Metadata          `json:"metadata,omitempty"`
	Uid             *string            `json:"uid,omitempty"`
	Users           *[]UserType        `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// CreateOnboardingJSONBody defines parameters for CreateOnboarding.
type CreateOnboardingJSONBody Company

// CreateOnboardingJSONRequestBody defines body for CreateOnboarding for application/json ContentType.
type CreateOnboardingJSONRequestBody CreateOnboardingJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// Create new Onboarding
	// (POST /api/onboarding)
	CreateOnboarding(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// CreateOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOnboarding(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOnboarding(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/me", wrapper.Me)
	router.POST(baseURL+"/api/onboarding", wrapper.CreateOnboarding)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8wYW2/bNvevEPy+R6VO02EPfhnSrNuyNejQtNhDEAjH4pHNVCJVXpx5hf/7wIvulJMO",
	"HbCnROd+P4f+QgtZN1KgMJquv1Bd7LAG/+8lYwq1/7dRskFlOPqvjeUV42KbC6jRAQw3FdJ1hyAekVFz",
	"aBxYG8XFlh6zAaetN6jSvAGV4C64OQxZ3DdZESMfRZJcWmHUmCOClqjnxE6BNmCS7lRcYP5yyOMg5OUi",
	"7cWM9iJF20htCslGsW1hZEX+4o3HzjiPGVX42XKFjK7vWvNi4LKB952C+06G3DxgYZz2S2t2H3XIzjjx",
	"YBlHUQS7pkYzrmFTOc0dciNlhSAcFmvgVZKPa21jKUxRXX3NArSTYhFj5Mf3b9NIJfecLShTskqL1DaE",
	"JoUz8hOKJMZyloAfU/HeA69c6N67MpsFHUUf1lgLEfRDXwGDSJc4qhv32ZFxYXCLahTbSJdu2UlFRaIg",
	"szUsVUNXsm5AHBIl1DqbKzABxA3W/p//Kyzpmv5v1Y+kVZxHq3GQXBij3Z1AEgR2xoBScAid7W3JuSjl",
	"U2qi3deOdMAaRLpc2Dp0Vs0NsjziaUa1rDA3Clx13WeDGeIJiBeQnDq9gs5AKfBdSdd3p019G2wYW3ya",
	"5VZW+MHbGMgXDCXekERWazTAwMBTUbxp6QZ9MNFjBf9skXCWiorVqJ5fGm5WfXAiBlURJExrYVLNo8KY",
	"JDuVmhOFfh1TNy12VLDF/EFu8j1UdtRwEUke5IYEZKpNWxG1FGZXHZwonZIS8cTjU4K40FaBKDBnsrA1",
	"Cj/QSqlqMG6AgMbvv6N9BDt60tEnMuUrPt9Idhi2h+AF8sKNiAoLDTSjW9C5htL5KKDhTpY0u3GveFnE",
	"yzqpKXE89KwnzocgYdrKzjIUWy7QczmLjeIFB3dT4D4vdqC2qHIutIGqCqJ5+PuJm2KHIi+5MR5QVlKq",
	"vIKD/yoKs89BsFxjYRU3h1YIGC6FS9MjF0w+ak/EpPQlW4FguoDGWZ1R4CovpGDcsQTQBsxOSVk7Yqb4",
	"Hh/hEEQ0TrD24fZF04osucKmgsKPx9pWhodR1WYhfs1ysTS1rMZc200hhVFQGDnKhdVIRsj0mnp0PSnM",
	"Ia9QbM1uKKFFkYial/OkkQeZnQte6KEs0Z0pz5Kdk5oEP3KFjiM9Cnayxhz6i/rkrotkx4zuUfGSF75g",
	"cneHWj1qNGnyQIJukHb/DjI5lECihKfWfEprNnYhFYE3SsnE1dhest2s4cK8uqDD3cPSw69GrWE7mpot",
	"6CkXosyWPGVuYoEmbA9L4Osz13JO76x2AS49kVwtuxfS12pc2G1RzdSPuZ5UhG4G+34SF4XgDiAYbxEG",
	"Bs8MD561DgdSAib9LNqjiH72D6MIS80N27Dnao6kSc2pQ3xyHs2cFr4hoMr7iTBfRS0R6Rfo6ZX0T5Ld",
	"c07LK8LJM8/5JYcmCp5XLt0hNosci7PxWTf4aJAOn45dsgOkT3T3PY1vyZU2sxh56GIDVpBgccBFjlpu",
	"eDWeUgGSLb8y2wkeG/MMWM1F36hnNQjYhisiQrSBsky9LbzIp1IdiQYBybqwRWvnKXWP33i63LrkhGS+",
	"RlCoLm1Y2hv/9VObml//+OBeQ57aNa7H9tbtjGno8ejv0VAJDHWheOMKka7pbyAYkFtUe14gufz9mnjF",
	"MEj2mOTME+mWaI9KB0kvX5y/OHcRlw26k5Ou6SsPymgDZuc9WUHDVyHRW/TzxBWtb4prRtf0xkVJoW6k",
	"0MH3i/PzsBaEiRc0NE0VV+XqQUvR/4j2ZDe3v7P4eIzjcBMfYR5Rgq3MN1MbtnRCpxX4Z4OFm5gYaTKq",
	"bV2DOtA1/RkNuenfhrDVrq46J+4dtQ+oFBsJyk0LPwikTkT2yi+Fdz1lqFbU5nV8S3wTX9ufIRLe9laS",
	"tpFi2Q8bxyiLx3+xBk4YeBX35rKh/6HiCMYSgY9klNS2TFo/74/DoeJ/4xiOk7v7471Dq73/AeDuC7Wq",
	"imNDr1er26tf3txc5h/fv6XH++PfAQAA///oHfzSvBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

