// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ApplicationDepositType.
const (
	ApplicationDepositTypeFixedDeposit   ApplicationDepositType = "fixed_deposit"
	ApplicationDepositTypeNoDeposit      ApplicationDepositType = "no_deposit"
	ApplicationDepositTypePartialDeposit ApplicationDepositType = "partial_deposit"
)

// Defines values for CheckoutOption.
const (
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup CompanyLifecycle = "completed_setup"
	CompanyLifecycleOnboarded      CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered     CompanyLifecycle = "registered"
	CompanyLifecycleVerified       CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Tiler                        CompanyInfoTradeType = "tiler"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for CreditProvider.
const (
	Omni CreditProvider = "omni"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsGender.
const (
	Female CustomerDetailsGender = "female"
	Male   CustomerDetailsGender = "male"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	CouncilTenant     CustomerDetailsResidentialStatus = "council tenant"
	LivingWithParents CustomerDetailsResidentialStatus = "living with parents"
	Owner             CustomerDetailsResidentialStatus = "owner"
	Tenant            CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for CustomerDetailsTitle.
const (
	Dr   CustomerDetailsTitle = "dr"
	Miss CustomerDetailsTitle = "miss"
	Mr   CustomerDetailsTitle = "mr"
	Mrs  CustomerDetailsTitle = "mrs"
	Ms   CustomerDetailsTitle = "ms"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"
	DirectorInfoVerificationStatusVerified    DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for EmploymentDetailsSourceOfIncome.
const (
	Benefits    EmploymentDetailsSourceOfIncome = "benefits"
	Maintenance EmploymentDetailsSourceOfIncome = "maintenance"
	Other       EmploymentDetailsSourceOfIncome = "other"
	Partner     EmploymentDetailsSourceOfIncome = "partner"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinacneNotApproved FinanceStatus = "finacne_not_approved"
	FinanceStatusFinanceDepositPaid FinanceStatus = "finance_deposit_paid"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusNotApplied         FinanceStatus = "not_applied"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for JobDepositType.
const (
	JobDepositTypeFixedDeposit   JobDepositType = "fixed_deposit"
	JobDepositTypeNoDeposit      JobDepositType = "no_deposit"
	JobDepositTypePartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusArchived JobStatus = "archived"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobItemVatRate.
const (
	JobItemVatRateCustom    JobItemVatRate = "custom"
	JobItemVatRateExempted  JobItemVatRate = "exempted"
	JobItemVatRateN0        JobItemVatRate = "0%"
	JobItemVatRateN20       JobItemVatRate = "20%"
	JobItemVatRateN5        JobItemVatRate = "5%"
	JobItemVatRateVatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for PaymentKind.
const (
	PaymentKindApplication PaymentKind = "application"
	PaymentKindCharge      PaymentKind = "charge"
)

// Defines values for PaymentPaymentMethod.
const (
	Card        PaymentPaymentMethod = "card"
	Cash        PaymentPaymentMethod = "cash"
	DirectDebit PaymentPaymentMethod = "direct_debit"
	Loan        PaymentPaymentMethod = "loan"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// Application defines model for Application.
type Application struct {
	CheckoutOptions *[]CheckoutOption       `json:"checkout_options,omitempty"`
	Cid             *string                 `json:"cid,omitempty"`
	Customer        *Customer               `json:"customer,omitempty"`
	DepositType     *ApplicationDepositType `json:"deposit_type,omitempty"`
	DepositValue    *Money                  `json:"deposit_value,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	FinanceOption   string                  `json:"finance_option"`
	FinanceOptions  *[]string               `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus          `json:"finance_status,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Metadata        *Metadata               `json:"metadata,omitempty"`
	Oid             *string                 `json:"oid,omitempty"`
	Payments        *[]Payment              `json:"payments,omitempty"`
	QuoteItems      *[]JobItem              `json:"quote_items,omitempty"`
	Title           *string                 `json:"title,omitempty"`
	Total           *MoneyTotal             `json:"total,omitempty"`
}

// ApplicationDepositType defines model for Application.DepositType.
type ApplicationDepositType string

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	SortCode      string `json:"sort_code"`
}

// CheckoutOption defines model for CheckoutOption.
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate        `json:"available_rates,omitempty"`
	Cid             *string                 `json:"cid,omitempty"`
	CompanyInfo     *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo     *Document               `json:"company_logo,omitempty"`
	CompanyType     CompanyCompanyType      `json:"company_type"`
	CompanyTypeInfo interface{}             `json:"company_type_info"`
	Emails          *[]openapi_types.Email  `json:"emails,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Lifecycle       *CompanyLifecycle       `json:"lifecycle,omitempty"`
	Metadata        *Metadata               `json:"metadata,omitempty"`
	Oid             *string                 `json:"oid,omitempty"`
	QuotePreference *CompanyQuotePreference `json:"quote_preference,omitempty"`
	SkipDeposit     *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	Users           *[]UserType             `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                         `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// Credit defines model for Credit.
type Credit struct {
	Amount            Money             `json:"amount"`
	BankAccount       BankAccount       `json:"bank_account"`
	Cid               *string           `json:"cid,omitempty"`
	CustomerDetails   CustomerDetails   `json:"customer_details"`
	EmploymentDetails EmploymentDetails `json:"employment_details"`
	Id                *string           `json:"id,omitempty"`
	Metadata          *Metadata         `json:"metadata,omitempty"`
	Oid               *string           `json:"oid,omitempty"`
	Pid               *string           `json:"pid,omitempty"`
	Provider          *CreditProvider   `json:"provider,omitempty"`
	State             *CreditState      `json:"state,omitempty"`
	Xid               *string           `json:"xid,omitempty"`
	Xref              *string           `json:"xref,omitempty"`
}

// CreditProvider defines model for Credit.Provider.
type CreditProvider string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `dd/mm/yyyy`
	DateOfBirth          *time.Time                       `json:"date_of_birth,omitempty"`
	Email                openapi_types.Email              `json:"email"`
	FirstName            string                           `json:"first_name"`
	Gender               CustomerDetailsGender            `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`
	Title                CustomerDetailsTitle             `json:"title"`
}

// CustomerDetailsGender defines model for CustomerDetails.Gender.
type CustomerDetailsGender string

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerDetailsTitle defines model for CustomerDetails.Title.
type CustomerDetailsTitle string

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  string    `json:"content"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	BusinessName          *string                           `json:"business_name,omitempty"`
	EmployerName          *string                           `json:"employer_name,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome Money                             `json:"household_annual_income"`
	MainOccupation        *string                           `json:"main_occupation,omitempty"`
	MonthsEmployed        *int32                            `json:"months_employed,omitempty"`
	SourceOfIncome        *EmploymentDetailsSourceOfIncome  `json:"source_of_income,omitempty"`
	TypeOfBusiness        *string                           `json:"type_of_business,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// EmploymentDetailsSourceOfIncome defines model for EmploymentDetails.SourceOfIncome.
type EmploymentDetailsSourceOfIncome string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
}

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        Money                `json:"amount"`
	Cid           *string              `json:"cid,omitempty"`
	Id            *string              `json:"id,omitempty"`
	Kid           *string              `json:"kid,omitempty"`
	Kind          *PaymentKind         `json:"kind,omitempty"`
	Metadata      *Metadata            `json:"metadata,omitempty"`
	Oid           *string              `json:"oid,omitempty"`
	PaymentMethod PaymentPaymentMethod `json:"payment_method"`
	Status        *PaymentStatus       `json:"status,omitempty"`
	Xid           *string              `json:"xid,omitempty"`
	Xref          *string              `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// Pence defines model for Pence.
type Pence int32

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostApplicationJSONBody defines parameters for PostApplication.
type PostApplicationJSONBody Application

// PutApplicationJSONBody defines parameters for PutApplication.
type PutApplicationJSONBody Application

// PostApplicationPaymentMethodParamsPaymentMethod defines parameters for PostApplicationPaymentMethod.
type PostApplicationPaymentMethodParamsPaymentMethod string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostApplicationJSONRequestBody defines body for PostApplication for application/json ContentType.
type PostApplicationJSONRequestBody PostApplicationJSONBody

// PutApplicationJSONRequestBody defines body for PutApplication for application/json ContentType.
type PutApplicationJSONRequestBody PutApplicationJSONBody

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all applications
	// (GET /api/application)
	GetApplications(ctx echo.Context) error
	// post new application
	// (POST /api/application)
	PostApplication(ctx echo.Context) error
	// delete existing application
	// (DELETE /api/application/{id})
	DeleteApplication(ctx echo.Context, id string) error
	// get existing application
	// (GET /api/application/{id})
	GetApplication(ctx echo.Context, id string) error
	// put existing application
	// (PUT /api/application/{id})
	PutApplication(ctx echo.Context, id string) error
	// post new application payment method
	// (POST /api/application/{id}/{payment_method})
	PostApplicationPaymentMethod(ctx echo.Context, id string, paymentMethod PostApplicationPaymentMethodParamsPaymentMethod) error
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// PostApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApplication(ctx)
	return err
}

// DeleteApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApplication(ctx, id)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// PutApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PutApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutApplication(ctx, id)
	return err
}

// PostApplicationPaymentMethod converts echo context to params.
func (w *ServerInterfaceWrapper) PostApplicationPaymentMethod(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "payment_method" -------------
	var paymentMethod PostApplicationPaymentMethodParamsPaymentMethod

	err = runtime.BindStyledParameterWithLocation("simple", false, "payment_method", runtime.ParamLocationPath, ctx.Param("payment_method"), &paymentMethod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payment_method: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApplicationPaymentMethod(ctx, id, paymentMethod)
	return err
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/application", wrapper.GetApplications)
	router.POST(baseURL+"/api/application", wrapper.PostApplication)
	router.DELETE(baseURL+"/api/application/:id", wrapper.DeleteApplication)
	router.GET(baseURL+"/api/application/:id", wrapper.GetApplication)
	router.PUT(baseURL+"/api/application/:id", wrapper.PutApplication)
	router.POST(baseURL+"/api/application/:id/:payment_method", wrapper.PostApplicationPaymentMethod)
	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
