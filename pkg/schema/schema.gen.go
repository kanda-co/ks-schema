// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentPaymentMethod.
const (
	PaymentPaymentMethodCard PaymentPaymentMethod = "card"

	PaymentPaymentMethodCash PaymentPaymentMethod = "cash"

	PaymentPaymentMethodDirectDebit PaymentPaymentMethod = "direct_debit"

	PaymentPaymentMethodLoan PaymentPaymentMethod = "loan"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderDuologi PaymentProvider = "duologi"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderOmni PaymentProvider = "omni"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"

	PaymentStatusDisputed PaymentStatus = "disputed"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate       `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo            `json:"company_info"`
	CompanyType     CompanyCompanyType     `json:"company_type"`
	CompanyTypeInfo interface{}            `json:"company_type_info"`
	Emails          *[]openapi_types.Email `json:"emails,omitempty"`
	Id              string                 `json:"id"`
	Metadata        Metadata               `json:"metadata"`
	Users           *[]UserType            `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// Customer defines model for Customer.
type Customer struct {
	Address   Address             `json:"address"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	Cid          string     `json:"cid"`
	Customer     Customer   `json:"customer"`
	DepositType  string     `json:"deposit_type"`
	DepositValue int32      `json:"deposit_value"`
	Description  string     `json:"description"`
	Id           string     `json:"id"`
	JobItems     *[]JobItem `json:"job_items,omitempty"`
	Metadata     Metadata   `json:"metadata"`
	Notes        *[]string  `json:"notes,omitempty"`
	Oid          string     `json:"oid"`
	Status       *string    `json:"status,omitempty"`
	Title        string     `json:"title"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string `json:"description,omitempty"`
	Price         int32   `json:"price"`
	Quantity      int32   `json:"quantity"`
	QuoteDocument *string `json:"quote_document,omitempty"`
	Title         string  `json:"title"`
	Vat           int32   `json:"vat"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        int32                `json:"amount"`
	Cid           string               `json:"cid"`
	Customer      *Customer            `json:"customer,omitempty"`
	Id            string               `json:"id"`
	Kid           string               `json:"kid"`
	Kind          PaymentKind          `json:"kind"`
	Metadata      Metadata             `json:"metadata"`
	Oid           string               `json:"oid"`
	PaymentMethod PaymentPaymentMethod `json:"payment_method"`
	Provider      PaymentProvider      `json:"provider"`
	Status        PaymentStatus        `json:"status"`
	Xid           string               `json:"xid"`
	Xref          *string              `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

