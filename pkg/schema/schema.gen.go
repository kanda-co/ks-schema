// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CheckoutOption.
const (
	ApplyForFinance CheckoutOption = "apply_for_finance"
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup CompanyLifecycle = "completed_setup"
	CompanyLifecycleOnboarded      CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered     CompanyLifecycle = "registered"
	CompanyLifecycleVerified       CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Tiler                        CompanyInfoTradeType = "tiler"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindCharge CreditKind = "charge"
	CreditKindJob    CreditKind = "job"
)

// Defines values for CreditProvider.
const (
	Omni CreditProvider = "omni"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsGender.
const (
	Female CustomerDetailsGender = "female"
	Male   CustomerDetailsGender = "male"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	CouncilTenant     CustomerDetailsResidentialStatus = "council tenant"
	LivingWithParents CustomerDetailsResidentialStatus = "living with parents"
	Owner             CustomerDetailsResidentialStatus = "owner"
	Tenant            CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for CustomerDetailsTitle.
const (
	Dr   CustomerDetailsTitle = "dr"
	Miss CustomerDetailsTitle = "miss"
	Mr   CustomerDetailsTitle = "mr"
	Mrs  CustomerDetailsTitle = "mrs"
	Ms   CustomerDetailsTitle = "ms"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"
	DirectorInfoVerificationStatusVerified    DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for EmploymentDetailsSourceOfIncome.
const (
	Benefits    EmploymentDetailsSourceOfIncome = "benefits"
	Maintenance EmploymentDetailsSourceOfIncome = "maintenance"
	Other       EmploymentDetailsSourceOfIncome = "other"
	Partner     EmploymentDetailsSourceOfIncome = "partner"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinacneNotApproved FinanceStatus = "finacne_not_approved"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusNotApplied         FinanceStatus = "not_applied"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for JobArchived.
const (
	JobArchivedNo  JobArchived = "no"
	JobArchivedYes JobArchived = "yes"
)

// Defines values for JobDepositType.
const (
	FixedDeposit   JobDepositType = "fixed_deposit"
	NoDeposit      JobDepositType = "no_deposit"
	PartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusFinished JobStatus = "finished"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobItemStyle.
const (
	JobItemStyleCustom JobItemStyle = "custom"
	JobItemStyleKanda  JobItemStyle = "kanda"
)

// Defines values for JobItemVatRate.
const (
	Custom    JobItemVatRate = "custom"
	Exempted  JobItemVatRate = "exempted"
	N0        JobItemVatRate = "0%"
	N20       JobItemVatRate = "20%"
	N5        JobItemVatRate = "5%"
	VatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"
	PaymentKindJob    PaymentKind = "job"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for PaymentOptionPaymentMethod.
const (
	Card PaymentOptionPaymentMethod = "card"
	Cash PaymentOptionPaymentMethod = "cash"
	Loan PaymentOptionPaymentMethod = "loan"
)

// Defines values for SignatureSigned.
const (
	SignatureSignedNo  SignatureSigned = "no"
	SignatureSignedYes SignatureSigned = "yes"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	SortCode      string `json:"sort_code"`
}

// checkout option picked by customer, updated only via custom action
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	AvailableRates     *[]AvailableRate        `json:"available_rates,omitempty"`
	Cid                *string                 `json:"cid,omitempty"`
	CompanyInfo        *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo        *Document               `json:"company_logo,omitempty"`
	CompanyType        CompanyCompanyType      `json:"company_type"`
	Emails             *[]openapi_types.Email  `json:"emails,omitempty"`
	Id                 *string                 `json:"id,omitempty"`
	Lifecycle          *CompanyLifecycle       `json:"lifecycle,omitempty"`
	LimitedCompanyInfo *LimitedCompanyInfo     `json:"limited_company_info,omitempty"`
	Metadata           *Metadata               `json:"metadata,omitempty"`
	Oid                *string                 `json:"oid,omitempty"`
	QuotePreference    *CompanyQuotePreference `json:"quote_preference,omitempty"`
	SkipDeposit        *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	SoleTraderInfo     *SoleTraderInfo         `json:"sole_trader_info,omitempty"`
	Users              *[]UserType             `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                         `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// Credit defines model for Credit.
type Credit struct {
	Amount            Money             `json:"amount"`
	BankAccount       BankAccount       `json:"bank_account"`
	Cid               *string           `json:"cid,omitempty"`
	CreditDocuments   *[]Document       `json:"credit_documents,omitempty"`
	CustomerDetails   CustomerDetails   `json:"customer_details"`
	EmploymentDetails EmploymentDetails `json:"employment_details"`
	Id                *string           `json:"id,omitempty"`
	Kid               *string           `json:"kid,omitempty"`
	Kind              *CreditKind       `json:"kind,omitempty"`
	Metadata          *Metadata         `json:"metadata,omitempty"`
	Oid               *string           `json:"oid,omitempty"`
	Provider          *CreditProvider   `json:"provider,omitempty"`
	Signature         *Signature        `json:"signature,omitempty"`
	State             *CreditState      `json:"state,omitempty"`
	Xid               *string           `json:"xid,omitempty"`
	Xref              *string           `json:"xref,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditProvider defines model for Credit.Provider.
type CreditProvider string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `dd/mm/yyyy`
	DateOfBirth          *time.Time                       `json:"date_of_birth,omitempty"`
	Email                openapi_types.Email              `json:"email"`
	FirstName            string                           `json:"first_name"`
	Gender               CustomerDetailsGender            `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`
	Title                CustomerDetailsTitle             `json:"title"`
}

// CustomerDetailsGender defines model for CustomerDetails.Gender.
type CustomerDetailsGender string

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerDetailsTitle defines model for CustomerDetails.Title.
type CustomerDetailsTitle string

// CustomerOptions defines model for CustomerOptions.
type CustomerOptions struct {
	// checkout option picked by customer, updated only via custom action
	CheckoutOption CheckoutOption `json:"checkout_option"`

	// finance option
	FinanceOption string `json:"finance_option"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  string    `json:"content"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	BusinessName          *string                           `json:"business_name,omitempty"`
	EmployerName          *string                           `json:"employer_name,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome Money                             `json:"household_annual_income"`
	MainOccupation        *string                           `json:"main_occupation,omitempty"`
	MonthsEmployed        *int32                            `json:"months_employed,omitempty"`
	SourceOfIncome        *EmploymentDetailsSourceOfIncome  `json:"source_of_income,omitempty"`
	TypeOfBusiness        *string                           `json:"type_of_business,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// EmploymentDetailsSourceOfIncome defines model for EmploymentDetails.SourceOfIncome.
type EmploymentDetailsSourceOfIncome string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// InfoAuth defines model for InfoAuth.
type InfoAuth struct {
	ContinueUrl *string             `json:"continue_url,omitempty"`
	Email       openapi_types.Email `json:"email"`
}

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	Archived        *JobArchived      `json:"archived,omitempty"`
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	CustomerOptions *CustomerOptions  `json:"customer_options,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Payments        *[]Payment        `json:"payments,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
}

// JobArchived defines model for Job.Archived.
type JobArchived string

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Style         *JobItemStyle   `json:"style,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemStyle defines model for JobItem.Style.
type JobItemStyle string

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	Cid           *string        `json:"cid,omitempty"`
	Id            *string        `json:"id,omitempty"`
	Kid           *string        `json:"kid,omitempty"`
	Kind          *PaymentKind   `json:"kind,omitempty"`
	Metadata      *Metadata      `json:"metadata,omitempty"`
	Oid           *string        `json:"oid,omitempty"`
	PaymentOption PaymentOption  `json:"payment_option"`
	Status        *PaymentStatus `json:"status,omitempty"`
	Xid           *string        `json:"xid,omitempty"`
	Xref          *string        `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentOption defines model for PaymentOption.
type PaymentOption struct {
	Amount        Money                      `json:"amount"`
	PaymentMethod PaymentOptionPaymentMethod `json:"payment_method"`
}

// PaymentOptionPaymentMethod defines model for PaymentOption.PaymentMethod.
type PaymentOptionPaymentMethod string

// Pence defines model for Pence.
type Pence int32

// Signature defines model for Signature.
type Signature struct {
	Fingerprint string          `json:"fingerprint"`
	Signed      SignatureSigned `json:"signed"`
}

// SignatureSigned defines model for Signature.Signed.
type SignatureSigned string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber *string `json:"national_insurance_number,omitempty"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoAuthJSONBody defines parameters for InfoAuth.
type InfoAuthJSONBody InfoAuth

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// ApplyJobJSONBody defines parameters for ApplyJob.
type ApplyJobJSONBody CustomerOptions

// PayJobJSONBody defines parameters for PayJob.
type PayJobJSONBody PaymentOption

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// MarkPaymentParamsStatus defines parameters for MarkPayment.
type MarkPaymentParamsStatus string

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// InfoAuthJSONRequestBody defines body for InfoAuth for application/json ContentType.
type InfoAuthJSONRequestBody InfoAuthJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ApplyJobJSONRequestBody defines body for ApplyJob for application/json ContentType.
type ApplyJobJSONRequestBody ApplyJobJSONBody

// PayJobJSONRequestBody defines body for PayJob for application/json ContentType.
type PayJobJSONRequestBody PayJobJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// put auth info by email, send sign-in magic link
	// (PUT /api/info/auth)
	InfoAuth(ctx echo.Context) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// customer to apply existing job with selected options, only allowed when job status is sent
	// (POST /api/job/{id}/apply)
	ApplyJob(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// pay existing job, only allowed when job status is beyond sent
	// (POST /api/job/{id}/pay)
	PayJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
	// company to mark existing payment as given status, only allowed when payment method is cash
	// (POST /api/payment/{id}/{status})
	MarkPayment(ctx echo.Context, id string, status MarkPaymentParamsStatus) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoAuth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoAuth(ctx)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ApplyJob converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyJob(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// PayJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// MarkPayment converts echo context to params.
func (w *ServerInterfaceWrapper) MarkPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "status" -------------
	var status MarkPaymentParamsStatus

	err = runtime.BindStyledParameterWithLocation("simple", false, "status", runtime.ParamLocationPath, ctx.Param("status"), &status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkPayment(ctx, id, status)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.PUT(baseURL+"/api/info/auth", wrapper.InfoAuth)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/apply", wrapper.ApplyJob)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/pay", wrapper.PayJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)
	router.POST(baseURL+"/api/payment/:id/:status", wrapper.MarkPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9bXPcuJHwX0Hx2aduXRlZsnfvslFVyuVd3+bsWyeu9eZDTtExGBIzA4sEaAAcaeLM",
	"f7/CKwESICnZ0tJxvthDstFodDe6G40G9CEraN1Qgojg2fmHjBc7VEP183lZMsTVz4bRBjGBkXpat7gq",
	"MdnmBNZIvqgx+QmRrdhl509WmcCiQtm5AwMKbJWJQyNfc8Ew2WbHlYenrdeIzcGkASO4CiwOaQTyKzgF",
	"gl6TaGPaEsHG2huAVNupprJzLqCIsqHCBOVP0hjkd/Ak2fLpRMunsZY1JWLHcyhy2El5Q1kNRXaeYSK+",
	"Uc0MHg0NoAAW2qHERKAtYhJnQ7koaKk0ooFCIEay8+x/v754fvI/8OTvlxfPT/4Lnuxenfzl3cnh8tnF",
	"2cnvLs03+fMZCF5dfnh6/MfFH7aXFy/x5cXP7BI8O7t4DuXrR195tNlewSn4O25U//3xrrKbkytISngi",
	"R3hyjcstksN8Ywk+HlcZQ+9bzFCZnV9YiRitWnnid2O8dJ3Q9TtUCMmA563Y/ZlrRQ5nDGxLjEihWMMQ",
	"LP9EqkN2LliLuoE4mIi4SszhupLEpds7GNd+TWmFIJEIUA1xFchYv+mau+d+33i0V1xG23Deaj4k22mI",
	"SNtxo5KyJc2OkpFm+nO8naB//vmngDctw1nQVlAgYWLtGd3jcnysDibSntFqVCvU90g73mq1G2lqQSKt",
	"Bb1CZKytBhi07M0TLXwDaiRj9cgbdEeIp+NGAaLzaA9xJXX5Z2kxB5MJETcXnPLqV8+iur9BVjFw3dbZ",
	"+Vk3TPkpZsruooM93hgg3YMlOTba7yG5el4oExMxHPrDhKc1UElH67Ak/KxnrZUJ/vDb1XdH38i6DpL+",
	"l1Mm8oj11/ieHi9OLiM//T4kBhC1333WBkwZjM6nJcbvH3aouKKt+FMjMFWToES8YNg8ZoX5Dqh6Axpc",
	"XKESrA+gaLmgNWIr0DYlFKgElFQHsMfQfAKwUEikwKWmXWSwaapDvqEs32ACteaXqFAO5h1dy3kCDzkl",
	"uYzCKqRaX3rBQ0hLjPE/0LqB5BBRHTuLcgaFfoUFqtWPrxjaZOfZ/zvtgr9TE/mdhrPv6CmB/QA0QkcM",
	"ZAwedBA26isKTSqI+wzzNcdkQ6doNIN+KUG9phXdTjZ9QYu2RkT47TQtH5zUKlxjgcrcfFcqVaFcMFga",
	"k9UbkUIwN+z4GZaYvkWV0UdlMEPxDJ30wG0kWKyRgQ1loOWIgesdBTvIAWwwgEURhG5ObPOk1hL8vkUJ",
	"4VV4g4pDoX1ZiTawrST9DG0xF4ipqMRyN3hJyZpCVqrfZg6gMudItE22yvaI4Q3WhnOKPkfCWKQdyHWW",
	"qv2k2/Q0rkYCllDAqdavLdxxldFxPtNrgliCve9bKlDeMLRBzMaRHZcJ9T91jO6/V8oo+ayMla/HCj8I",
	"gIcW/go3eYkayrEI+/8j9Tr9i7IMf6SxaYI5gFVFr1EJBAUCXiFArwmwSKNuxc27WdJ6Syv0iwK3kpLT",
	"YL7xk+H7L5IIz+5pDP1p0/NJgSmJuh1PgSK2GjG4VS4h38OqDQMW39NrQPCOroEGjIUvFp1at1UHiZZP",
	"YTSwQMHGkGLCWyZdWF5aE3oLU6tkmK9pefANLcEFwoXUngoVXOrmFvKcww1SAWWjlIKKXWh1FS6gcM21",
	"uZ257QiZTDt0/YwEPhpf34PIYSCyxQSpVqp3hgsMVXCwz4sdZFul01zAqtKosf7/Cotih0i+wTKKkjFk",
	"RSnLK3hQT0Uh9jkk0kgWLcPiYJFAGSJI2V1jUtJrroBKSpXyVpCUvICNZhLELC8oKbFsol+todgxSmsJ",
	"XDK8R9fwoFE0EjFXslFaZVFuMENNBQs14eu2EljPVCsy8zQQ3K2cZSe4lqOct+uCEsFgISjz+X1QRJDA",
	"6rQcgaDBszv0ei2nOxGHvDL6EZ9FFgwYsOEE6tkLT22GnSRm8CpiJ2J8ic7VqE1iqMSxVUdtVyOjvo0S",
	"pOKHNSRXOeyWMGON/NXOR0eMinw3xPlWPjBMtiuFDHTIIuGtif/zEgkbs41GqQb+hQFXwV5T0YPsYC6S",
	"/3QtPDTjXGuggk9w7WoioUPk0g1W4AqTMomClP7s0ysZbdPGQrUAdzQt+bBhlZ+86cIZWhPsBTTqcWRQ",
	"Fkly9c3xlkDRMjQZvDhA2UqY5IdbShYFaoQKlM0KUv5UIZsOpfXiU9oQnXYxz1Zr5VoTkVKbvQ0mmO9U",
	"swbiMqetGI2x9eRIBtY34zJAN0buLsBMCORGcec2iKaTBdqW9axUZDJHJ2fUalqGDu1ml0sfXWEbsI/L",
	"y24w41OJIQWTVMwKTiKQIOBjcq7JyKknJm80PmFePlF1NiaPF51BDcVStIxJod5ePCUUKKebfI2Z9v1h",
	"qsj2/G8cSEhAN0BBPgY/KnHKVU7L0Tn4W1me1vXp4XA4/E3OPits2epEYM1em8f3McXY/sl0Zp6WbLU9",
	"8SxRDSud2lQ/vIhra03PEAmlJc9LVOE9Yoc7SCLQ1VnaWUNcIjJoo1+PtGJYwCqXpq7l/qivcSlXrm5B",
	"omAZ1gYZ7ykrTBJjB9dYaDMraL5GeQfHUQMZ1EacY7IN2Wf6BqbvGHW4LCs0HJN6nR4TXeNqsC337Pdn",
	"j77++tnvdS72yZPjV4/OLp6snq6+Wf129Z1J0f7u+OgfFug3lx+efHP86tFf//qbb7+NQX4VbBmqPlNb",
	"j9Uh11PydpGmNiZyRpZIOjNoor7kzqVuIKeT1yC6ecnQHtOWW9XMjWmbqZ6D5uKa3qI5Q1xqpcBRzROI",
	"QO2zaEsKXAH3osJ7TLbgGosdaCAzcasKeXzF8tCPKJdAFXIm/eE0pes2RpMG8myPWnrWavphlc00K9Zg",
	"nan+n3I51kp2Vss0S/qinnFI6GNUnKuBF/LzY8aPgC4WSXo5vW0R83JmryCnbmNjdHESboMo56B2KLz2",
	"obcz3729COc//A+Aq8VzuGUyKYw+9QNyYuxyPWkYnt6YQaRsKCYixtkXmCG5bo6n5na0RnfwVzpzXaic",
	"TGRKEypyl9yel+f2MSZncY+rAfGx2OmFl8rrqdPH7eUQYbA607yGHP3Ht36gY/oGFnpuduZH6VkmV8EO",
	"Pf5kS80a18hm+ia7lcDxXNfkBrPDkfLod17zxjeprQBiGjLMP0TqwTgm0un14xL7ITkOveJCbNDSfpho",
	"qdZqw9nFUbXJDQq9SBbY7EF1L+UUdI+Xq17Xiv1pX7lllPMcEtLCKsekoDWaHcTsaMvRjlblHdvXEJOc",
	"FkWrErOkF9wS4H1KV365kc+o+/KYNgycOG1ZoRZJ3TCsHBrIBFHGf40I2mDlHCWNKoApUCy5r/HJiM3g",
	"i0UFh0Yvy4x++SyQ39TyyX6bDgP6mhQXb1pw0WnDGI1kCGyFxIDlaTtbxvd4asQ53I6aIgsyxQELFxvH",
	"j9oLv3VzzN92FDlsmgoHu7vh21aGVrkMjtF1tsrMh15BhPxVEJSbpozuVVsDoNZKUMivKOfaT7hnibcH",
	"gbfE5bXG/KmNWtKTXAYEz1u98O+LkQhMWpS3rBqpHLNgQIJ9ypV8NJKNiU8OIVkhUprA527bo+k6RIMV",
	"qA3bu5YbyMZTNQdhlcYDbeQPakVDKlJSeB2pZPucSh2PkXG9outIEpQVO7zXnsU3Fp6N8HfrUnrwjq5V",
	"vYDB9iwaZoaLhvl6PFz8JIq3w/qrT1/z5KWS5+wkBbtQ3qDntLULx+MqMwUXbtc6KCXpqjG8OpLupfTp",
	"cl3bvdngG1S6Z8+Vm1fJINiS4SoeZoU/waI0NQmk9viA0Vyov74MdSeVh+gtdWP6YNF2UenYqEL3Omkc",
	"1aSIatI7us4d+bPmwCu6filQnVZ+1ZnCNBzlXVZP0j3PZLPsWoMPu/6Y/T69MTqfR290gzF353AOKR0u",
	"TEoGNyp+0WFMfEvP7c1NWMeRTJ7NmqUFm0iRrTJBBaxmTcZfFOSgsMEgDmxMf677+noZdyxKN4chy9zJ",
	"L3FPWYCG4WK+3XnfQiLMKaNRnVHbkq5o7y7FUlwc+pWUtnbPatKwli95DEAhu5uWKC4mVWUP52fu91Co",
	"OuRwVHsdtecc+f6m9/YG1WaSnP3/bJX9u/znqfo5LGTcQwHUIqNwhcqT0bMdnxOw1Qw9wph+RmLJyBpB",
	"VwTePndoW46HhzayiIaJqdSZXQv4vUxUwbl+RkvgMNneJUsKxWT/UqQzN5EDxq0GEhiMOSba155n6wmU",
	"ISgjfRjmNf093JH6CZWWhiK+kNkjm8ZIYXAwsRMuJut9F8pswjxG2WCl40jwWBH0HmWoMgF3rDFzxlTv",
	"nhSH0H784fs3nt2QT8E2gWkys0QkSfwv1iXGRpDfxgp2TXJ0U1Qtx3t0l8aY3K7x0T/ZJQcTGaqNdT7t",
	"TsC/KtU+TaWaZtTMvT0jym51O4xEW6LyY35NmHlRYt602t8Wcm1SVbbQrCXleFRqxZmOTBdcKNZj8WV6",
	"inQnxz6qbNZ2WCOxo710SQH5zrNs5rGATHKjojDYD7VsN4judA4pwQyH0rORvV77R9M8dtmjKoNsd+ws",
	"pu4BnBpnDzABTSg4L/v91q+pDKWwwWSLWMOwFoW3crevPe3ibbEDkIOXb1KVm7MTWS7eVo3AgbYMdKWf",
	"U9rn0tY++f6ulDpBQAkuYkg7nvcOwERSjlJaau/ClohPBWC2CXBN7iUWtC3Ho14DBWadwQ1QDmmLTXGX",
	"4U5my2edQwpqCj73Os+ufizeOF3rZU+3OzumY4UTWNaYdPH4SQ0J3OrTLeYNF3CziZ0hix6Iv4uJM4iC",
	"Yp/URoq0Bea0zVspYa0R3yPIELM7REr0KjBXrzsad0I02fGojlBpzQnrav5bEg7eIrbHBQLP37wEqg/o",
	"KUcIcqKAuAXaI8Y1piePzx6fqUijQQQ2ODvPvlGv1BHvnSL6FDb41NsyUYz6IFswNc9fljKuRkKvFDEy",
	"9UwNJVyP+unZmd0CM+GiWXDL1qfvuPaMhrrZCfluXdo7ZtfP+GZbKgCsKlA4AhWIsc+3IGz01IXavo30",
	"3hJ00+iiI2RgVhlv6xqyg6qA7RO3ygTccqlwdoyX5q6UIdvfUC5+cGeOpbIiLr43Z+Y+ybgcn4cjkyQB",
	"gq5BEVCgp4uMro4fqQgfQRcqA8oWJPAI14byPq6CaXf6AZdHbQcqpFNioR68UO87TWgggzUS6iDrxeC+",
	"An/9hRXHoCoc1xZfX9IRSnLlMaVn0nv+9PLXkblmTAnQDeZCuvsFSl7TOCQxPuHHzewXKWRpyJcsYGnL",
	"Z0q3aWPWvF2OdB/Wk7RRxi3Dm7TLVroE70Z8ijvDmzQxCuKB4jhNzW3COEPdEoM4xzjHfj28iQhOA93T",
	"tDMMHovf/P4faMKNUmWjN6cbywveLMsGgg6n2dzIzaIbt/r6UO3n59KTwh6GbYsT+SBqS0p+NWFQvzzx",
	"hgHb4kQbxmsjck1Ga8uQ64M6jTbGs0U4jnbRyhZn3Bz3caruBFT55WgI8Vx+/lJNjDkgsGTJK/HdRvZ+",
	"BVjKpbzwrp25/yg9uP9mZpzeXYyzwEg9uLXHyMENcjxad2D3Y3o7Vo9E7GVIw8OY3inKTNReerqyuLjd",
	"Y1xE7P0JODN69zRi1PqGB0w/J/s7JvpBDL9EBehH8eN6sJo0u1+mqIN4foliDiL6KRmnovoFyfiB3Usb",
	"595CXEy7cOVLsW/E0WCyoafQnhiN6aM7Uno/6uDQJxguadMnK9cHoIodVoAjUqqaohNMQA23uAAVJlcP",
	"qijz6VZX3egyjYXpyu14a7XIjbynRVMVGv7B3gnD9r5F7ACu0OGashLQDeidHMAOqLN1vUr6jnuDgqt+",
	"b+gGFgKEhwZADUWxm+rKXd8/vzNVB10iEJ45fpboqTvvHOnEldN/tDuetQTz5TdzFeafjF6S8mv9Cs5t",
	"q1mKBQc+y32VH+5jaa33zsOm1d670PJWel9RylF10NqISv9yopi6vB/VxQfREv/c7ywVsTcjLVRHfPK0",
	"kiiZAMv5QEXs2DsdeafPm6ei+Vf6kuT7F8srur5N6kRd3rzArIm96t0wXY5qPFfySp2euI/ARXF0JEPy",
	"zvX8MAHJCD0mL/JO68DiUiKaU6FMvfkzMwfyyvxtmhHz6s6if07L4YRcB0mPhUm3n++ICXk1Zhe/JGEG",
	"aY2FCTLIaMSlmMpj/OpSfDir3w6Y9Otb/na5ShXh17j9n7UF+U+ob4OrcIaslkPSO3zmipf4dabHX9+s",
	"6fhZuvymu6VkKSrpIn1BQW/D1JE+vL1V3dpq/0LU9Q4R0N1zArAURZCBSym3vjJqRL01wBfmFu1NWos1",
	"Y4bAW5qyBo4Ysjfwn9GM9Y53x41Y73juvwzWhA+FoYmaNkZrdKCknGmTONL3EMTV9C0i5RdmjSTbFmuJ",
	"VNp+lhnSZ2qjC6/XKLtHtrq/NZ6YeDVaXA5Qrn0sWR0/3UDG1j6Gl/ezYfYapQJ+Q613Lf/DrUPGBOzR",
	"trR1yKiA7axpuqtmUjmLN921evefz/Wu+Zub03XX/i0wr+tfSWiEYEc4nt+1UPcatozmeZuAgoeZaRN0",
	"mXzvEmOWIdeG8u7NuZn5304TRiOS4P6mzykqGZH5IBe8QMn388FjCrCasrFfopCDtckCBRzkicelm4qZ",
	"FiPdh/UkbZRxy/Am7bKVLsG7eT7l9INeGh/Ty9zXkF0tQSsHZURmUa8vsgQbyoDYYe6xIEKBu+MuTcXw",
	"rj373yGnRP3FgAr1LptbomEENWRXqASQgy3eI/fXp5aUbzbVR4IqYodD6NEeS++E1+gBzIG5di8yAbwL",
	"oZT2+ldBXVxK4XHE9la31V8JUfdA8fPT0127fqwuq3pc0MftVSb1cQBx8h6OAJ2fnla0gNWOcnH+3dl3",
	"Z9nx8vh/AQAA//8GQnBjy48AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
