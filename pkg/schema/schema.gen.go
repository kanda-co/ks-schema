// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo CompanyInfoUseSubcontractor = "no"

	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindCharge CreditKind = "charge"

	CreditKindChargeRefund CreditKind = "charge_refund"

	CreditKindJob CreditKind = "job"

	CreditKindJobPayout CreditKind = "job_payout"

	CreditKindJobRefund CreditKind = "job_refund"
)

// Defines values for CreditProvider.
const (
	CreditProviderDuologi CreditProvider = "duologi"

	CreditProviderOmni CreditProvider = "omni"
)

// Defines values for CreditState.
const (
	CreditStateAccepted CreditState = "accepted"

	CreditStateActionCustomer CreditState = "action_customer"

	CreditStateActionLender CreditState = "action_lender"

	CreditStateDeclined CreditState = "declined"

	CreditStateFinished CreditState = "finished"

	CreditStatePaidOut CreditState = "paid_out"

	CreditStatePending CreditState = "pending"

	CreditStateReferred CreditState = "referred"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for JobDepositType.
const (
	JobDepositTypeFixedDeposit JobDepositType = "fixed_deposit"

	JobDepositTypeNoDeposit JobDepositType = "no_deposit"

	JobDepositTypePartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobFinanceStatus.
const (
	JobFinanceStatusAppliedForFinance JobFinanceStatus = "applied_for_finance"

	JobFinanceStatusDepositPaid JobFinanceStatus = "deposit_paid"

	JobFinanceStatusFinacneNotApproved JobFinanceStatus = "finacne_not_approved"

	JobFinanceStatusFinanced JobFinanceStatus = "financed"

	JobFinanceStatusPaid JobFinanceStatus = "paid"

	JobFinanceStatusUnderReview JobFinanceStatus = "under_review"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"

	JobStatusArchived JobStatus = "archived"

	JobStatusDeclined JobStatus = "declined"

	JobStatusDraft JobStatus = "draft"

	JobStatusPaidOut JobStatus = "paid_out"

	JobStatusRemittance JobStatus = "remittance"

	JobStatusSent JobStatus = "sent"
)

// Defines values for MoneyCurrency.
const (
	MoneyCurrencyGBP MoneyCurrency = "GBP"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentPaymentMethod.
const (
	PaymentPaymentMethodCard PaymentPaymentMethod = "card"

	PaymentPaymentMethodCash PaymentPaymentMethod = "cash"

	PaymentPaymentMethodDirectDebit PaymentPaymentMethod = "direct_debit"

	PaymentPaymentMethodLoan PaymentPaymentMethod = "loan"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderDuologi PaymentProvider = "duologi"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderOmni PaymentProvider = "omni"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"

	PaymentStatusDisputed PaymentStatus = "disputed"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate       `json:"available_rates,omitempty"`
	Cid             *string                `json:"cid,omitempty"`
	CompanyInfo     *CompanyInfo           `json:"company_info,omitempty"`
	CompanyType     CompanyCompanyType     `json:"company_type"`
	CompanyTypeInfo interface{}            `json:"company_type_info"`
	Emails          *[]openapi_types.Email `json:"emails,omitempty"`
	Id              *string                `json:"id,omitempty"`
	Metadata        *Metadata              `json:"metadata,omitempty"`
	Oid             *string                `json:"oid,omitempty"`
	Users           *[]UserType            `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                         `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// Credit defines model for Credit.
type Credit struct {
	Amount   Money          `json:"amount"`
	Cid      *string        `json:"cid,omitempty"`
	Customer Customer       `json:"customer"`
	Id       *string        `json:"id,omitempty"`
	Kid      *string        `json:"kid,omitempty"`
	Kind     *CreditKind    `json:"kind,omitempty"`
	Metadata *Metadata      `json:"metadata,omitempty"`
	Oid      *string        `json:"oid,omitempty"`
	Provider CreditProvider `json:"provider"`
	State    *CreditState   `json:"state,omitempty"`
	Xid      *string        `json:"xid,omitempty"`
	Xref     *string        `json:"xref,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditProvider defines model for Credit.Provider.
type CreditProvider string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  string    `json:"content"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	Cid           *string           `json:"cid,omitempty"`
	Customer      Customer          `json:"customer"`
	DepositType   JobDepositType    `json:"deposit_type"`
	DepositValue  Money             `json:"deposit_value"`
	Description   string            `json:"description"`
	FinanceStatus *JobFinanceStatus `json:"finance_status,omitempty"`
	Id            *string           `json:"id,omitempty"`
	JobItems      *[]JobItem        `json:"job_items,omitempty"`
	Metadata      *Metadata         `json:"metadata,omitempty"`
	Notes         *[]string         `json:"notes,omitempty"`
	Oid           *string           `json:"oid,omitempty"`
	Status        *JobStatus        `json:"status,omitempty"`
	Title         string            `json:"title"`
}

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobFinanceStatus defines model for Job.FinanceStatus.
type JobFinanceStatus string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string   `json:"description,omitempty"`
	Price         Money     `json:"price"`
	Quantity      int32     `json:"quantity"`
	QuoteDocument *Document `json:"quote_document,omitempty"`
	Title         string    `json:"title"`
	Vat           Money     `json:"vat"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Money defines model for Money.
type Money struct {
	Amount   int32          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// Payment defines model for Payment.
type Payment struct {
	Amount        Money                 `json:"amount"`
	Cid           *string               `json:"cid,omitempty"`
	Customer      *Customer             `json:"customer,omitempty"`
	Id            *string               `json:"id,omitempty"`
	Kid           *string               `json:"kid,omitempty"`
	Kind          *PaymentKind          `json:"kind,omitempty"`
	Metadata      *Metadata             `json:"metadata,omitempty"`
	Oid           *string               `json:"oid,omitempty"`
	PaymentMethod *PaymentPaymentMethod `json:"payment_method,omitempty"`
	Provider      PaymentProvider       `json:"provider"`
	Status        *PaymentStatus        `json:"status,omitempty"`
	Xid           *string               `json:"xid,omitempty"`
	Xref          *string               `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `json:"directors,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

