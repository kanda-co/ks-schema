// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ApplicationDepositType.
const (
	ApplicationDepositTypeFixedDeposit   ApplicationDepositType = "fixed_deposit"
	ApplicationDepositTypeNoDeposit      ApplicationDepositType = "no_deposit"
	ApplicationDepositTypePartialDeposit ApplicationDepositType = "partial_deposit"
)

// Defines values for CheckoutOption.
const (
	ApplyForFinance CheckoutOption = "apply_for_finance"
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup CompanyLifecycle = "completed_setup"
	CompanyLifecycleOnboarded      CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered     CompanyLifecycle = "registered"
	CompanyLifecycleVerified       CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Tiler                        CompanyInfoTradeType = "tiler"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindApplication CreditKind = "application"
	CreditKindCharge      CreditKind = "charge"
)

// Defines values for CreditProvider.
const (
	Omni CreditProvider = "omni"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsGender.
const (
	Female CustomerDetailsGender = "female"
	Male   CustomerDetailsGender = "male"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	CouncilTenant     CustomerDetailsResidentialStatus = "council tenant"
	LivingWithParents CustomerDetailsResidentialStatus = "living with parents"
	Owner             CustomerDetailsResidentialStatus = "owner"
	Tenant            CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for CustomerDetailsTitle.
const (
	Dr   CustomerDetailsTitle = "dr"
	Miss CustomerDetailsTitle = "miss"
	Mr   CustomerDetailsTitle = "mr"
	Mrs  CustomerDetailsTitle = "mrs"
	Ms   CustomerDetailsTitle = "ms"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"
	DirectorInfoVerificationStatusVerified    DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for EmploymentDetailsSourceOfIncome.
const (
	Benefits    EmploymentDetailsSourceOfIncome = "benefits"
	Maintenance EmploymentDetailsSourceOfIncome = "maintenance"
	Other       EmploymentDetailsSourceOfIncome = "other"
	Partner     EmploymentDetailsSourceOfIncome = "partner"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinacneNotApproved FinanceStatus = "finacne_not_approved"
	FinanceStatusFinanceDepositPaid FinanceStatus = "finance_deposit_paid"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusNotApplied         FinanceStatus = "not_applied"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for JobArchived.
const (
	No  JobArchived = "no"
	Yes JobArchived = "yes"
)

// Defines values for JobDepositType.
const (
	JobDepositTypeFixedDeposit   JobDepositType = "fixed_deposit"
	JobDepositTypeNoDeposit      JobDepositType = "no_deposit"
	JobDepositTypePartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusFinished JobStatus = "finished"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobItemVatRate.
const (
	JobItemVatRateCustom    JobItemVatRate = "custom"
	JobItemVatRateExempted  JobItemVatRate = "exempted"
	JobItemVatRateN0        JobItemVatRate = "0%"
	JobItemVatRateN20       JobItemVatRate = "20%"
	JobItemVatRateN5        JobItemVatRate = "5%"
	JobItemVatRateVatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for PaymentKind.
const (
	PaymentKindApplication PaymentKind = "application"
	PaymentKindCharge      PaymentKind = "charge"
)

// Defines values for PaymentPaymentMethod.
const (
	Card        PaymentPaymentMethod = "card"
	Cash        PaymentPaymentMethod = "cash"
	DirectDebit PaymentPaymentMethod = "direct_debit"
	Loan        PaymentPaymentMethod = "loan"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// Application defines model for Application.
type Application struct {
	CheckoutOption  CheckoutOption          `json:"checkout_option"`
	CheckoutOptions *[]CheckoutOption       `json:"checkout_options,omitempty"`
	Cid             *string                 `json:"cid,omitempty"`
	Customer        *Customer               `json:"customer,omitempty"`
	DepositType     *ApplicationDepositType `json:"deposit_type,omitempty"`
	DepositValue    *Money                  `json:"deposit_value,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	FinanceOption   string                  `json:"finance_option"`
	FinanceOptions  *[]string               `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus          `json:"finance_status,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Metadata        *Metadata               `json:"metadata,omitempty"`
	Oid             *string                 `json:"oid,omitempty"`
	Payments        *[]Payment              `json:"payments,omitempty"`
	QuoteItems      *[]JobItem              `json:"quote_items,omitempty"`
	Title           *string                 `json:"title,omitempty"`
	Total           *MoneyTotal             `json:"total,omitempty"`
}

// ApplicationDepositType defines model for Application.DepositType.
type ApplicationDepositType string

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	SortCode      string `json:"sort_code"`
}

// CheckoutOption defines model for CheckoutOption.
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate        `json:"available_rates,omitempty"`
	Cid             *string                 `json:"cid,omitempty"`
	CompanyInfo     *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo     *Document               `json:"company_logo,omitempty"`
	CompanyType     CompanyCompanyType      `json:"company_type"`
	CompanyTypeInfo interface{}             `json:"company_type_info"`
	Emails          *[]openapi_types.Email  `json:"emails,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Lifecycle       *CompanyLifecycle       `json:"lifecycle,omitempty"`
	Metadata        *Metadata               `json:"metadata,omitempty"`
	Oid             *string                 `json:"oid,omitempty"`
	QuotePreference *CompanyQuotePreference `json:"quote_preference,omitempty"`
	SkipDeposit     *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	Users           *[]UserType             `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                         `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// Credit defines model for Credit.
type Credit struct {
	Amount            Money             `json:"amount"`
	BankAccount       BankAccount       `json:"bank_account"`
	Cid               *string           `json:"cid,omitempty"`
	CustomerDetails   CustomerDetails   `json:"customer_details"`
	EmploymentDetails EmploymentDetails `json:"employment_details"`
	Id                *string           `json:"id,omitempty"`
	Kid               *string           `json:"kid,omitempty"`
	Kind              *CreditKind       `json:"kind,omitempty"`
	Metadata          *Metadata         `json:"metadata,omitempty"`
	Oid               *string           `json:"oid,omitempty"`
	Provider          *CreditProvider   `json:"provider,omitempty"`
	State             *CreditState      `json:"state,omitempty"`
	Xid               *string           `json:"xid,omitempty"`
	Xref              *string           `json:"xref,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditProvider defines model for Credit.Provider.
type CreditProvider string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `dd/mm/yyyy`
	DateOfBirth          *time.Time                       `json:"date_of_birth,omitempty"`
	Email                openapi_types.Email              `json:"email"`
	FirstName            string                           `json:"first_name"`
	Gender               CustomerDetailsGender            `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`
	Title                CustomerDetailsTitle             `json:"title"`
}

// CustomerDetailsGender defines model for CustomerDetails.Gender.
type CustomerDetailsGender string

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerDetailsTitle defines model for CustomerDetails.Title.
type CustomerDetailsTitle string

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  string    `json:"content"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	BusinessName          *string                           `json:"business_name,omitempty"`
	EmployerName          *string                           `json:"employer_name,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome Money                             `json:"household_annual_income"`
	MainOccupation        *string                           `json:"main_occupation,omitempty"`
	MonthsEmployed        *int32                            `json:"months_employed,omitempty"`
	SourceOfIncome        *EmploymentDetailsSourceOfIncome  `json:"source_of_income,omitempty"`
	TypeOfBusiness        *string                           `json:"type_of_business,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// EmploymentDetailsSourceOfIncome defines model for EmploymentDetails.SourceOfIncome.
type EmploymentDetailsSourceOfIncome string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// InfoAuth defines model for InfoAuth.
type InfoAuth struct {
	ContinueUrl *string             `json:"continue_url,omitempty"`
	Email       openapi_types.Email `json:"email"`
}

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	Archived        *JobArchived      `json:"archived,omitempty"`
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Payments        *[]Payment        `json:"payments,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
}

// JobArchived defines model for Job.Archived.
type JobArchived string

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        Money                `json:"amount"`
	Cid           *string              `json:"cid,omitempty"`
	Id            *string              `json:"id,omitempty"`
	Kid           *string              `json:"kid,omitempty"`
	Kind          *PaymentKind         `json:"kind,omitempty"`
	Metadata      *Metadata            `json:"metadata,omitempty"`
	Oid           *string              `json:"oid,omitempty"`
	PaymentMethod PaymentPaymentMethod `json:"payment_method"`
	Status        *PaymentStatus       `json:"status,omitempty"`
	Xid           *string              `json:"xid,omitempty"`
	Xref          *string              `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// Pence defines model for Pence.
type Pence int32

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostApplicationJSONBody defines parameters for PostApplication.
type PostApplicationJSONBody Application

// PutApplicationJSONBody defines parameters for PutApplication.
type PutApplicationJSONBody Application

// PostApplicationPaymentMethodJSONBody defines parameters for PostApplicationPaymentMethod.
type PostApplicationPaymentMethodJSONBody Money

// PostApplicationPaymentMethodParamsPaymentMethod defines parameters for PostApplicationPaymentMethod.
type PostApplicationPaymentMethodParamsPaymentMethod string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoAuthJSONBody defines parameters for InfoAuth.
type InfoAuthJSONBody InfoAuth

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostApplicationJSONRequestBody defines body for PostApplication for application/json ContentType.
type PostApplicationJSONRequestBody PostApplicationJSONBody

// PutApplicationJSONRequestBody defines body for PutApplication for application/json ContentType.
type PutApplicationJSONRequestBody PutApplicationJSONBody

// PostApplicationPaymentMethodJSONRequestBody defines body for PostApplicationPaymentMethod for application/json ContentType.
type PostApplicationPaymentMethodJSONRequestBody PostApplicationPaymentMethodJSONBody

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// InfoAuthJSONRequestBody defines body for InfoAuth for application/json ContentType.
type InfoAuthJSONRequestBody InfoAuthJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all applications
	// (GET /api/application)
	GetApplications(ctx echo.Context) error
	// post new application
	// (POST /api/application)
	PostApplication(ctx echo.Context) error
	// delete existing application
	// (DELETE /api/application/{id})
	DeleteApplication(ctx echo.Context, id string) error
	// get existing application
	// (GET /api/application/{id})
	GetApplication(ctx echo.Context, id string) error
	// put existing application
	// (PUT /api/application/{id})
	PutApplication(ctx echo.Context, id string) error
	// post new application payment method
	// (POST /api/application/{id}/{payment_method})
	PostApplicationPaymentMethod(ctx echo.Context, id string, paymentMethod PostApplicationPaymentMethodParamsPaymentMethod) error
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// put auth info by email, send sign-in magic link
	// (PUT /api/info/auth)
	InfoAuth(ctx echo.Context) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// PostApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApplication(ctx)
	return err
}

// DeleteApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApplication(ctx, id)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// PutApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PutApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutApplication(ctx, id)
	return err
}

// PostApplicationPaymentMethod converts echo context to params.
func (w *ServerInterfaceWrapper) PostApplicationPaymentMethod(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "payment_method" -------------
	var paymentMethod PostApplicationPaymentMethodParamsPaymentMethod

	err = runtime.BindStyledParameterWithLocation("simple", false, "payment_method", runtime.ParamLocationPath, ctx.Param("payment_method"), &paymentMethod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payment_method: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApplicationPaymentMethod(ctx, id, paymentMethod)
	return err
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoAuth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoAuth(ctx)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/application", wrapper.GetApplications)
	router.POST(baseURL+"/api/application", wrapper.PostApplication)
	router.DELETE(baseURL+"/api/application/:id", wrapper.DeleteApplication)
	router.GET(baseURL+"/api/application/:id", wrapper.GetApplication)
	router.PUT(baseURL+"/api/application/:id", wrapper.PutApplication)
	router.POST(baseURL+"/api/application/:id/:payment_method", wrapper.PostApplicationPaymentMethod)
	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.PUT(baseURL+"/api/info/auth", wrapper.InfoAuth)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
