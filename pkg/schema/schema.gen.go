// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CheckoutOption.
const (
	ApplyForFinance CheckoutOption = "apply_for_finance"
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup CompanyLifecycle = "completed_setup"
	CompanyLifecycleOnboarded      CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered     CompanyLifecycle = "registered"
	CompanyLifecycleVerified       CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyNone    CompanyInfoTradeBody = "none"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Tiler                        CompanyInfoTradeType = "tiler"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindCharge CreditKind = "charge"
	CreditKindJob    CreditKind = "job"
)

// Defines values for CreditProvider.
const (
	Omni CreditProvider = "omni"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsGender.
const (
	Female CustomerDetailsGender = "female"
	Male   CustomerDetailsGender = "male"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	CouncilTenant     CustomerDetailsResidentialStatus = "council tenant"
	LivingWithParents CustomerDetailsResidentialStatus = "living with parents"
	Owner             CustomerDetailsResidentialStatus = "owner"
	Tenant            CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for CustomerDetailsTitle.
const (
	Dr   CustomerDetailsTitle = "dr"
	Miss CustomerDetailsTitle = "miss"
	Mr   CustomerDetailsTitle = "mr"
	Mrs  CustomerDetailsTitle = "mrs"
	Ms   CustomerDetailsTitle = "ms"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"
	DirectorInfoVerificationStatusVerified    DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinanceNotApproved FinanceStatus = "finance_not_approved"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusNotApplied         FinanceStatus = "not_applied"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for JobArchived.
const (
	JobArchivedNo  JobArchived = "no"
	JobArchivedYes JobArchived = "yes"
)

// Defines values for JobDepositType.
const (
	FixedDeposit   JobDepositType = "fixed_deposit"
	NoDeposit      JobDepositType = "no_deposit"
	PartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusFinished JobStatus = "finished"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobItemStyle.
const (
	JobItemStyleCustom JobItemStyle = "custom"
	JobItemStyleKanda  JobItemStyle = "kanda"
)

// Defines values for JobItemVatRate.
const (
	Custom    JobItemVatRate = "custom"
	Exempted  JobItemVatRate = "exempted"
	N0        JobItemVatRate = "0%"
	N20       JobItemVatRate = "20%"
	N5        JobItemVatRate = "5%"
	VatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for NotEmployedDetailsSourceOfIncome.
const (
	Benefits    NotEmployedDetailsSourceOfIncome = "benefits"
	Maintenance NotEmployedDetailsSourceOfIncome = "maintenance"
	Other       NotEmployedDetailsSourceOfIncome = "other"
	Partner     NotEmployedDetailsSourceOfIncome = "partner"
)

// Defines values for NotificationChannel.
const (
	Email NotificationChannel = "email"
	Sms   NotificationChannel = "sms"
	Web   NotificationChannel = "web"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"
	PaymentKindJob    PaymentKind = "job"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for PaymentOptionPaymentMethod.
const (
	Card PaymentOptionPaymentMethod = "card"
	Cash PaymentOptionPaymentMethod = "cash"
	Loan PaymentOptionPaymentMethod = "loan"
)

// Defines values for SatNoteQAdvice.
const (
	TheyCompletedTheApplicationForMe         SatNoteQAdvice = "They completed the application for me"
	TheyHelpedMeWorkOutMyPotentialRepayments SatNoteQAdvice = "They helped me work out my potential repayments"
	TheyJustSentMeALinkToApply               SatNoteQAdvice = "They just sent me a link to apply"
	TheyToldMeWhatRatesWhereAvailable        SatNoteQAdvice = "They told me what rates where available"
)

// Defines values for SatNoteQApplication.
const (
	ICompletedTheApplicationMyself          SatNoteQApplication = "I completed the application myself"
	SomeoneCompletedTheAppliationOnMyBehalf SatNoteQApplication = "Someone completed the appliation on my behalf"
)

// Defines values for SatNoteQAvailability.
const (
	IFoundOutWhenTheInstallerSentMeALinkViaKanda SatNoteQAvailability = "I found out when the installer sent me a link via Kanda"
	ISawItAdvertisedByTheInstaller               SatNoteQAvailability = "I saw it advertised by the installer"
	TheInstallerToldMeWhenQuotingMe              SatNoteQAvailability = "The installer told me when quoting me"
)

// Defines values for SatNoteQEasiness.
const (
	SatNoteQEasinessNo       SatNoteQEasiness = "no"
	SatNoteQEasinessSomewhat SatNoteQEasiness = "somewhat"
	SatNoteQEasinessYes      SatNoteQEasiness = "yes"
)

// Defines values for SatNoteQPressure.
const (
	SatNoteQPressureNo       SatNoteQPressure = "no"
	SatNoteQPressureSomewhat SatNoteQPressure = "somewhat"
	SatNoteQPressureYes      SatNoteQPressure = "yes"
)

// Defines values for SignatureSigned.
const (
	SignatureSignedNo  SignatureSigned = "no"
	SignatureSignedYes SignatureSigned = "yes"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
	Verified bool                `json:"verified"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	SortCode      string `json:"sort_code"`
}

// checkout option picked by customer, updated only via custom action
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	AvailableRates     *[]AvailableRate        `json:"available_rates,omitempty"`
	BankAccount        *BankAccount            `json:"bank_account,omitempty"`
	Cid                *string                 `json:"cid,omitempty"`
	CompanyInfo        *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo        *Document               `json:"company_logo,omitempty"`
	CompanyType        CompanyCompanyType      `json:"company_type"`
	ContactInfo        *ContactInfo            `json:"contact_info,omitempty"`
	Emails             *[]openapi_types.Email  `json:"emails,omitempty"`
	Id                 *string                 `json:"id,omitempty"`
	Lifecycle          *CompanyLifecycle       `json:"lifecycle,omitempty"`
	LimitedCompanyInfo *LimitedCompanyInfo     `json:"limited_company_info,omitempty"`
	Metadata           *Metadata               `json:"metadata,omitempty"`
	Oid                *string                 `json:"oid,omitempty"`
	QuotePreference    *CompanyQuotePreference `json:"quote_preference,omitempty"`
	SkipDeposit        *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	SoleTraderInfo     *SoleTraderInfo         `json:"sole_trader_info,omitempty"`
	Users              *[]UserType             `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    Pence                       `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// ContactInfo defines model for ContactInfo.
type ContactInfo struct {
	ContactAddress *Address             `json:"contact_address,omitempty"`
	ContactEmail   *openapi_types.Email `json:"contact_email,omitempty"`
	ContactName    *string              `json:"contact_name,omitempty"`
	ContactPhone   *string              `json:"contact_phone,omitempty"`
}

// Credit defines model for Credit.
type Credit struct {
	Amount            *Money            `json:"amount,omitempty"`
	BankAccount       BankAccount       `json:"bank_account"`
	Cid               *string           `json:"cid,omitempty"`
	CreditDocuments   *[]Document       `json:"credit_documents,omitempty"`
	CustomerDetails   CustomerDetails   `json:"customer_details"`
	DepositValue      *Money            `json:"deposit_value,omitempty"`
	EmploymentDetails EmploymentDetails `json:"employment_details"`

	// finance option
	FinanceOption *string         `json:"finance_option,omitempty"`
	Id            *string         `json:"id,omitempty"`
	Kid           *string         `json:"kid,omitempty"`
	Kind          *CreditKind     `json:"kind,omitempty"`
	Metadata      *Metadata       `json:"metadata,omitempty"`
	Oid           *string         `json:"oid,omitempty"`
	Provider      *CreditProvider `json:"provider,omitempty"`
	Signature     *Signature      `json:"signature,omitempty"`
	State         *CreditState    `json:"state,omitempty"`
	Xid           *string         `json:"xid,omitempty"`
	Xref          *string         `json:"xref,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditProvider defines model for Credit.Provider.
type CreditProvider string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `dd/mm/yyyy`
	DateOfBirth          time.Time                        `json:"date_of_birth"`
	Email                openapi_types.Email              `json:"email"`
	FirstName            string                           `json:"first_name"`
	Gender               CustomerDetailsGender            `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`
	Title                CustomerDetailsTitle             `json:"title"`
}

// CustomerDetailsGender defines model for CustomerDetails.Gender.
type CustomerDetailsGender string

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerDetailsTitle defines model for CustomerDetails.Title.
type CustomerDetailsTitle string

// CustomerOptions defines model for CustomerOptions.
type CustomerOptions struct {
	// checkout option picked by customer, updated only via custom action
	CheckoutOption CheckoutOption `json:"checkout_option"`
	DepositValue   *Money         `json:"deposit_value,omitempty"`

	// finance option
	FinanceOption string `json:"finance_option"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  *string   `json:"content,omitempty"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// EmployedDetails defines model for EmployedDetails.
type EmployedDetails struct {
	EmployerName   string `json:"employer_name"`
	MainOccupation string `json:"main_occupation"`
	MonthsEmployed int32  `json:"months_employed"`
}

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	EmployedDetails       *EmployedDetails                  `json:"employed_details,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome Money                             `json:"household_annual_income"`
	NotEmployedDetails    *NotEmployedDetails               `json:"not_employed_details,omitempty"`
	SelfEmployedDetails   *SelfEmployedDetails              `json:"self_employed_details,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// InfoAuth defines model for InfoAuth.
type InfoAuth struct {
	ContinueUrl *string             `json:"continue_url,omitempty"`
	Email       openapi_types.Email `json:"email"`
}

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoIP defines model for InfoIP.
type InfoIP struct {
	Ipv4 string `json:"ipv4"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	Archived        *JobArchived      `json:"archived,omitempty"`
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	CustomerOptions *CustomerOptions  `json:"customer_options,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Payments        *[]Payment        `json:"payments,omitempty"`
	SatNote         *SatNote          `json:"sat_note,omitempty"`
	SatNoteTimeline *SatNoteTimeline  `json:"sat_note_timeline,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
}

// JobArchived defines model for Job.Archived.
type JobArchived string

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobCompanyInfo defines model for JobCompanyInfo.
type JobCompanyInfo struct {
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	CompanyLogo *Document    `json:"company_logo,omitempty"`
	CompanyName *string      `json:"company_name,omitempty"`
	ContactInfo *ContactInfo `json:"contact_info,omitempty"`
	VatNumber   *string      `json:"vat_number,omitempty"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Style         *JobItemStyle   `json:"style,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemStyle defines model for JobItem.Style.
type JobItemStyle string

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// NotEmployedDetails defines model for NotEmployedDetails.
type NotEmployedDetails struct {
	SourceOfIncome NotEmployedDetailsSourceOfIncome `json:"source_of_income"`
}

// NotEmployedDetailsSourceOfIncome defines model for NotEmployedDetails.SourceOfIncome.
type NotEmployedDetailsSourceOfIncome string

// Notification defines model for Notification.
type Notification struct {
	Action              *string                `json:"action,omitempty"`
	Cid                 *string                `json:"cid,omitempty"`
	Content             *string                `json:"content,omitempty"`
	Id                  *string                `json:"id,omitempty"`
	Metadata            *Metadata              `json:"metadata,omitempty"`
	NotificationChannel *[]NotificationChannel `json:"notification_channel,omitempty"`
	Oid                 *string                `json:"oid,omitempty"`
	Redirect            *string                `json:"redirect,omitempty"`
	Views               *[]openapi_types.Email `json:"views,omitempty"`
}

// NotificationChannel defines model for NotificationChannel.
type NotificationChannel string

// Payment defines model for Payment.
type Payment struct {
	Cid           *string        `json:"cid,omitempty"`
	Id            *string        `json:"id,omitempty"`
	Kid           *string        `json:"kid,omitempty"`
	Kind          *PaymentKind   `json:"kind,omitempty"`
	Metadata      *Metadata      `json:"metadata,omitempty"`
	Oid           *string        `json:"oid,omitempty"`
	PaymentOption PaymentOption  `json:"payment_option"`
	Status        *PaymentStatus `json:"status,omitempty"`
	Xid           *string        `json:"xid,omitempty"`
	Xref          *string        `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentOption defines model for PaymentOption.
type PaymentOption struct {
	Amount        Money                      `json:"amount"`
	PaymentMethod PaymentOptionPaymentMethod `json:"payment_method"`
}

// PaymentOptionPaymentMethod defines model for PaymentOption.PaymentMethod.
type PaymentOptionPaymentMethod string

// Pence defines model for Pence.
type Pence int32

// SatNote defines model for SatNote.
type SatNote struct {
	Certificate   Document             `json:"certificate"`
	QAdvice       SatNoteQAdvice       `json:"q_advice"`
	QApplication  SatNoteQApplication  `json:"q_application"`
	QAvailability SatNoteQAvailability `json:"q_availability"`
	QEasiness     SatNoteQEasiness     `json:"q_easiness"`
	QPressure     SatNoteQPressure     `json:"q_pressure"`
	Signature     Signature            `json:"signature"`
}

// SatNoteQAdvice defines model for SatNote.QAdvice.
type SatNoteQAdvice string

// SatNoteQApplication defines model for SatNote.QApplication.
type SatNoteQApplication string

// SatNoteQAvailability defines model for SatNote.QAvailability.
type SatNoteQAvailability string

// SatNoteQEasiness defines model for SatNote.QEasiness.
type SatNoteQEasiness string

// SatNoteQPressure defines model for SatNote.QPressure.
type SatNoteQPressure string

// SatNoteTimeline defines model for SatNoteTimeline.
type SatNoteTimeline struct {
	SentAt   *time.Time `json:"sent_at,omitempty"`
	SignedAt *time.Time `json:"signed_at,omitempty"`
	ViewedAt *time.Time `json:"viewed_at,omitempty"`
}

// SelfEmployedDetails defines model for SelfEmployedDetails.
type SelfEmployedDetails struct {
	BusinessName       string `json:"business_name"`
	MonthsSelfEmployed int32  `json:"months_self_employed"`
	TypeOfBusiness     string `json:"type_of_business"`
}

// SignDocument defines model for SignDocument.
type SignDocument struct {
	Quote     Document  `json:"quote"`
	Signature Signature `json:"signature"`
}

// Signature defines model for Signature.
type Signature struct {
	Fingerprint string          `json:"fingerprint"`
	Signed      SignatureSigned `json:"signed"`
}

// SignatureSigned defines model for Signature.Signed.
type SignatureSigned string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber *string `json:"national_insurance_number,omitempty"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// SignCreditJSONBody defines parameters for SignCredit.
type SignCreditJSONBody SignDocument

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoAuthJSONBody defines parameters for InfoAuth.
type InfoAuthJSONBody InfoAuth

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// ApplyJobJSONBody defines parameters for ApplyJob.
type ApplyJobJSONBody CustomerOptions

// PayJobJSONBody defines parameters for PayJob.
type PayJobJSONBody PaymentOption

// SignJobSateNoteJSONBody defines parameters for SignJobSateNote.
type SignJobSateNoteJSONBody SatNote

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostNotificationJSONBody defines parameters for PostNotification.
type PostNotificationJSONBody Notification

// PutNotificationJSONBody defines parameters for PutNotification.
type PutNotificationJSONBody Notification

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// MarkPaymentParamsStatus defines parameters for MarkPayment.
type MarkPaymentParamsStatus string

// ProviderWebhookParamsProvider defines parameters for ProviderWebhook.
type ProviderWebhookParamsProvider string

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// SignCreditJSONRequestBody defines body for SignCredit for application/json ContentType.
type SignCreditJSONRequestBody SignCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// InfoAuthJSONRequestBody defines body for InfoAuth for application/json ContentType.
type InfoAuthJSONRequestBody InfoAuthJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ApplyJobJSONRequestBody defines body for ApplyJob for application/json ContentType.
type ApplyJobJSONRequestBody ApplyJobJSONBody

// PayJobJSONRequestBody defines body for PayJob for application/json ContentType.
type PayJobJSONRequestBody PayJobJSONBody

// SignJobSateNoteJSONRequestBody defines body for SignJobSateNote for application/json ContentType.
type SignJobSateNoteJSONRequestBody SignJobSateNoteJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostNotificationJSONRequestBody defines body for PostNotification for application/json ContentType.
type PostNotificationJSONRequestBody PostNotificationJSONBody

// PutNotificationJSONRequestBody defines body for PutNotification for application/json ContentType.
type PutNotificationJSONRequestBody PutNotificationJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// check existing credit and refresh documents, only allowed when credit state is set
	// (POST /api/credit/{id}/check)
	CheckCredit(ctx echo.Context, id string) error
	// quote existing credit
	// (POST /api/credit/{id}/quote)
	QuoteCredit(ctx echo.Context, id string) error
	// sign existing credit documents, only allowed when credit state is accepted
	// (POST /api/credit/{id}/sign)
	SignCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// put auth info by email, send sign-in magic link
	// (PUT /api/info/auth)
	InfoAuth(ctx echo.Context) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// query request IPv4 address or fallback to server IP
	// (GET /api/info/ip)
	InfoIP(ctx echo.Context) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// customer to apply existing job with selected options, only allowed when job status is sent
	// (POST /api/job/{id}/apply)
	ApplyJob(ctx echo.Context, id string) error
	// kanda staff to approve signed completed job with satisfaction note, only allowed when sat note is signed and job status is finished and is financed
	// (POST /api/job/{id}/approve)
	ApproveJobSatNote(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// get existing job company info
	// (POST /api/job/{id}/companyInfo)
	JobCompanyInfo(ctx echo.Context, id string) error
	// complete existing accepted job, only allowed when job status is accepted
	// (POST /api/job/{id}/complete)
	CompleteJob(ctx echo.Context, id string) error
	// customer to pay existing job,  only allowed when job status is beyond sent
	// (POST /api/job/{id}/pay)
	PayJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// customer to sign completed job with satisfaction note, only allowed when job status is finished and is financed
	// (POST /api/job/{id}/signSatNote)
	SignJobSateNote(ctx echo.Context, id string) error
	// customer to view completed job with satisfaction note, only allowed when job status is finished and is financed
	// (POST /api/job/{id}/viewSatNote)
	ViewJobSatNote(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all notifications
	// (GET /api/notification)
	GetNotifications(ctx echo.Context) error
	// post new notification
	// (POST /api/notification)
	PostNotification(ctx echo.Context) error
	// delete existing notification
	// (DELETE /api/notification/{id})
	DeleteNotification(ctx echo.Context, id string) error
	// get existing notification
	// (GET /api/notification/{id})
	GetNotification(ctx echo.Context, id string) error
	// put existing notification
	// (PUT /api/notification/{id})
	PutNotification(ctx echo.Context, id string) error
	// viewed existing notification
	// (POST /api/notification/{id}/viewed)
	ViewedNotification(ctx echo.Context, id string) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
	// company to mark existing payment as given status, only allowed when payment method is cash
	// (POST /api/payment/{id}/{status})
	MarkPayment(ctx echo.Context, id string, status MarkPaymentParamsStatus) error
	// provider webhook
	// (POST /api/webhook/{provider})
	ProviderWebhook(ctx echo.Context, provider ProviderWebhookParamsProvider) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// CheckCredit converts echo context to params.
func (w *ServerInterfaceWrapper) CheckCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckCredit(ctx, id)
	return err
}

// QuoteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) QuoteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuoteCredit(ctx, id)
	return err
}

// SignCredit converts echo context to params.
func (w *ServerInterfaceWrapper) SignCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoAuth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoAuth(ctx)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// InfoIP converts echo context to params.
func (w *ServerInterfaceWrapper) InfoIP(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoIP(ctx)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ApplyJob converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyJob(ctx, id)
	return err
}

// ApproveJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) ApproveJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApproveJobSatNote(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// JobCompanyInfo converts echo context to params.
func (w *ServerInterfaceWrapper) JobCompanyInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JobCompanyInfo(ctx, id)
	return err
}

// CompleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CompleteJob(ctx, id)
	return err
}

// PayJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// SignJobSateNote converts echo context to params.
func (w *ServerInterfaceWrapper) SignJobSateNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignJobSateNote(ctx, id)
	return err
}

// ViewJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) ViewJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewJobSatNote(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotifications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotifications(ctx)
	return err
}

// PostNotification converts echo context to params.
func (w *ServerInterfaceWrapper) PostNotification(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNotification(ctx)
	return err
}

// DeleteNotification converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNotification(ctx, id)
	return err
}

// GetNotification converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotification(ctx, id)
	return err
}

// PutNotification converts echo context to params.
func (w *ServerInterfaceWrapper) PutNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutNotification(ctx, id)
	return err
}

// ViewedNotification converts echo context to params.
func (w *ServerInterfaceWrapper) ViewedNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewedNotification(ctx, id)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// MarkPayment converts echo context to params.
func (w *ServerInterfaceWrapper) MarkPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "status" -------------
	var status MarkPaymentParamsStatus

	err = runtime.BindStyledParameterWithLocation("simple", false, "status", runtime.ParamLocationPath, ctx.Param("status"), &status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkPayment(ctx, id, status)
	return err
}

// ProviderWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderWebhook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider ProviderWebhookParamsProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, ctx.Param("provider"), &provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProviderWebhook(ctx, provider)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.POST(baseURL+"/api/credit/:id/check", wrapper.CheckCredit)
	router.POST(baseURL+"/api/credit/:id/quote", wrapper.QuoteCredit)
	router.POST(baseURL+"/api/credit/:id/sign", wrapper.SignCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.PUT(baseURL+"/api/info/auth", wrapper.InfoAuth)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.GET(baseURL+"/api/info/ip", wrapper.InfoIP)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/apply", wrapper.ApplyJob)
	router.POST(baseURL+"/api/job/:id/approve", wrapper.ApproveJobSatNote)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/companyInfo", wrapper.JobCompanyInfo)
	router.POST(baseURL+"/api/job/:id/complete", wrapper.CompleteJob)
	router.POST(baseURL+"/api/job/:id/pay", wrapper.PayJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.POST(baseURL+"/api/job/:id/signSatNote", wrapper.SignJobSateNote)
	router.POST(baseURL+"/api/job/:id/viewSatNote", wrapper.ViewJobSatNote)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/notification", wrapper.GetNotifications)
	router.POST(baseURL+"/api/notification", wrapper.PostNotification)
	router.DELETE(baseURL+"/api/notification/:id", wrapper.DeleteNotification)
	router.GET(baseURL+"/api/notification/:id", wrapper.GetNotification)
	router.PUT(baseURL+"/api/notification/:id", wrapper.PutNotification)
	router.POST(baseURL+"/api/notification/:id/viewed", wrapper.ViewedNotification)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)
	router.POST(baseURL+"/api/payment/:id/:status", wrapper.MarkPayment)
	router.POST(baseURL+"/api/webhook/:provider", wrapper.ProviderWebhook)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
