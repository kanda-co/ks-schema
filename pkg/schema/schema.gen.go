// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusDispute PaymentStatus = "dispute"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for PaymentMethod.
const (
	PaymentMethodCard PaymentMethod = "card"

	PaymentMethodDirectDebit PaymentMethod = "direct_debit"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate       `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo            `json:"company_info"`
	CompanyType     CompanyCompanyType     `json:"company_type"`
	CompanyTypeInfo interface{}            `json:"company_type_info"`
	Emails          *[]openapi_types.Email `json:"emails,omitempty"`
	Id              string                 `json:"id"`
	Metadata        Metadata               `json:"metadata"`
	Users           *[]UserType            `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// Customer defines model for Customer.
type Customer struct {
	Address   Address             `json:"address"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	Cid            string          `json:"cid"`
	Customer       Customer        `json:"customer"`
	DepositType    string          `json:"deposit_type"`
	DepositValue   int32           `json:"deposit_value"`
	Description    string          `json:"description"`
	Id             string          `json:"id"`
	JobItems       *[]JobItem      `json:"job_items,omitempty"`
	Metadata       Metadata        `json:"metadata"`
	Notes          *[]string       `json:"notes,omitempty"`
	Oid            string          `json:"oid"`
	PaymentMethods []PaymentMethod `json:"payment_methods"`
	Payments       *[]Payment      `json:"payments,omitempty"`
	Title          string          `json:"title"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description *string `json:"description,omitempty"`
	Price       *int32  `json:"price,omitempty"`
	Quantity    *int32  `json:"quantity,omitempty"`
	Title       *string `json:"title,omitempty"`
	Vat         *int32  `json:"vat,omitempty"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount   int32           `json:"amount"`
	Id       string          `json:"id"`
	Kid      string          `json:"kid"`
	Kind     PaymentKind     `json:"kind"`
	Metadata Metadata        `json:"metadata"`
	Provider PaymentProvider `json:"provider"`
	Status   PaymentStatus   `json:"status"`
	Xid      string          `json:"xid"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentMethod defines model for PaymentMethod.
type PaymentMethod string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// Post new Company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing Company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing Company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing Company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// Get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// Post new Job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing Job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing Job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing Job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// Get Me info
	// (GET /api/me)
	Me(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

