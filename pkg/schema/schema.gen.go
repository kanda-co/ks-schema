// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyCompanyType.
const (
	CompanyCompanyTypeLimitedCompany CompanyCompanyType = "limited_company"

	CompanyCompanyTypeSoleTrader CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa CompanyInfoTradeBody = "elecsa"

	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"

	CompanyInfoTradeBodyNapit CompanyInfoTradeBody = "napit"

	CompanyInfoTradeBodyNiceic CompanyInfoTradeBody = "niceic"

	CompanyInfoTradeBodyOther CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning CompanyInfoTradeType = "air_conditioning"

	CompanyInfoTradeTypeBathrooms CompanyInfoTradeType = "bathrooms"

	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"

	CompanyInfoTradeTypeDrivewaysAndPatios CompanyInfoTradeType = "driveways_and_patios"

	CompanyInfoTradeTypeElectrician CompanyInfoTradeType = "electrician"

	CompanyInfoTradeTypeEvChargerInstaller CompanyInfoTradeType = "ev_charger_installer"

	CompanyInfoTradeTypeFireplaces CompanyInfoTradeType = "fireplaces"

	CompanyInfoTradeTypeFloorLayer CompanyInfoTradeType = "floor_layer"

	CompanyInfoTradeTypeGarageDoors CompanyInfoTradeType = "garage_doors"

	CompanyInfoTradeTypeGasEngineer CompanyInfoTradeType = "gas_engineer"

	CompanyInfoTradeTypeKitchenFitter CompanyInfoTradeType = "kitchen_fitter"

	CompanyInfoTradeTypeLandscaping CompanyInfoTradeType = "landscaping"

	CompanyInfoTradeTypeMultiTrade CompanyInfoTradeType = "multi_trade"

	CompanyInfoTradeTypeOtherTrade CompanyInfoTradeType = "other_trade"

	CompanyInfoTradeTypeTiler CompanyInfoTradeType = "tiler"

	CompanyInfoTradeTypeWindowsAndDoors CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"

	DirectorInfoVerificationStatusVerified DirectorInfoVerificationStatus = "verified"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"

	PaymentKindChargeRefund PaymentKind = "charge_refund"

	PaymentKindJob PaymentKind = "job"

	PaymentKindJobPayout PaymentKind = "job_payout"

	PaymentKindJobRefund PaymentKind = "job_refund"
)

// Defines values for PaymentPaymentMethod.
const (
	PaymentPaymentMethodCard PaymentPaymentMethod = "card"

	PaymentPaymentMethodCash PaymentPaymentMethod = "cash"

	PaymentPaymentMethodDirectDebit PaymentPaymentMethod = "direct_debit"

	PaymentPaymentMethodLoan PaymentPaymentMethod = "loan"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderBankTransfer PaymentProvider = "bank_transfer"

	PaymentProviderDuologi PaymentProvider = "duologi"

	PaymentProviderGocardless PaymentProvider = "gocardless"

	PaymentProviderOmni PaymentProvider = "omni"

	PaymentProviderStripe PaymentProvider = "stripe"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"

	PaymentStatusDisputed PaymentStatus = "disputed"

	PaymentStatusPaid PaymentStatus = "paid"

	PaymentStatusPending PaymentStatus = "pending"

	PaymentStatusRefunded PaymentStatus = "refunded"

	PaymentStatusUnpaid PaymentStatus = "unpaid"
)

// Defines values for UserTypeRole.
const (
	UserTypeRoleCompanyAdmin UserTypeRole = "company-admin"

	UserTypeRoleCompanyManager UserTypeRole = "company-manager"

	UserTypeRoleCompanyStaff UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName   *string `json:"building_name,omitempty"`
	BuildingNumber *string `json:"building_number,omitempty"`
	City           string  `json:"city"`
	Country        string  `json:"country"`
	County         *string `json:"county,omitempty"`
	Line1          string  `json:"line_1"`
	Line2          *string `json:"line_2,omitempty"`
	Postcode       string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience string              `json:"audience"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       string              `json:"id"`
	Issuer   string              `json:"issuer"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider string              `json:"provider"`
	Role     *string             `json:"role,omitempty"`
	Subject  string              `json:"subject"`
	Token    string              `json:"token"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// Company defines model for Company.
type Company struct {
	AvailableRates  *[]AvailableRate       `json:"available_rates,omitempty"`
	CompanyInfo     CompanyInfo            `json:"company_info"`
	CompanyType     CompanyCompanyType     `json:"company_type"`
	CompanyTypeInfo interface{}            `json:"company_type_info"`
	Emails          *[]openapi_types.Email `json:"emails,omitempty"`
	Id              string                 `json:"id"`
	Metadata        Metadata               `json:"metadata"`
	Users           *[]UserType            `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    int                   `json:"average_job_value"`
	AverageMonthlyJobs int                   `json:"average_monthly_jobs"`
	InsuranceDocument  string                `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody `json:"trade_body,omitempty"`
	TradeBodyNumber    *string               `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType  `json:"trade_type"`
	UseSubcontractor   bool                  `json:"use_subcontractor"`
	WarrantyLength     int                   `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// Customer defines model for Customer.
type Customer struct {
	Address   Address             `json:"address"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  *string             `json:"last_name,omitempty"`
	Phone     string              `json:"phone"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                        `json:"home_address"`
	VerificationStatus DirectorInfoVerificationStatus `json:"verification_status"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	Cid          string     `json:"cid"`
	Customer     Customer   `json:"customer"`
	DepositType  string     `json:"deposit_type"`
	DepositValue int32      `json:"deposit_value"`
	Description  string     `json:"description"`
	Id           string     `json:"id"`
	JobItems     *[]JobItem `json:"job_items,omitempty"`
	Metadata     Metadata   `json:"metadata"`
	Notes        *[]string  `json:"notes,omitempty"`
	Oid          string     `json:"oid"`
	Status       *string    `json:"status,omitempty"`
	Title        string     `json:"title"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string `json:"description,omitempty"`
	Price         int32   `json:"price"`
	Quantity      int32   `json:"quantity"`
	QuoteDocument *string `json:"quote_document,omitempty"`
	Title         string  `json:"title"`
	Vat           int32   `json:"vat"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address `json:"company_address"`
	CompanyName    string  `json:"company_name"`
	TradingAddress Address `json:"trading_address"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt time.Time `json:"created_at"`
	Liveness  bool      `json:"liveness"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        int32                `json:"amount"`
	Cid           string               `json:"cid"`
	Customer      *Customer            `json:"customer,omitempty"`
	Id            string               `json:"id"`
	Kid           string               `json:"kid"`
	Kind          PaymentKind          `json:"kind"`
	Metadata      Metadata             `json:"metadata"`
	Oid           string               `json:"oid"`
	PaymentMethod PaymentPaymentMethod `json:"payment_method"`
	Provider      PaymentProvider      `json:"provider"`
	Status        PaymentStatus        `json:"status"`
	Xid           string               `json:"xid"`
	Xref          *string              `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentPaymentMethod defines model for Payment.PaymentMethod.
type PaymentPaymentMethod string

// PaymentProvider defines model for Payment.Provider.
type PaymentProvider string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber string  `json:"national_insurance_number"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       string              `json:"mobile"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+Rb3Y8btxH/V4htHhJAss5OUaR6MS5Jkd41QQw7eWgP6oLaHUm82yXX/NCd4up/L/i1",
	"n1yuzo7PMvxiS7szw+F8/jjUvUsyVlaMApUiWb5LRLaDEpuPl3nOQZiPFWcVcEnAfFsrUuSEblOKS9AP",
	"SkJ/BrqVu2T5fJZIIgtIljUZMmSzRB4q/VhITug2Oc5aclS5Bn6KJEsYkJUReRgXoN+iBZLsngaZmaKS",
	"x/gdwRjvFKteXEgsg2YoCIX0+bgE/R49H+V8McH5IsRZMSEzlhvvVVhK4DRZJv/9+uZy/h88/2N1czn/",
	"J57vruf/vp0fVi9vLuZ/X7l3+uNL1Hm0evfi+L+bn7armyuyunnNV+jlxc0l1o+/+Spp9PGrogX6g1Rm",
	"/YFux1nC4a0iHPJkeeON4xw8a3mi3sKqlsHWt5BJvb9LJXe/CxtT3eDFKidAM7NzDjj/lRaHZCm5gkbP",
	"miZguZwIvC60cuP8NU3Nv2asAEy1ACgxKTT3hvESy2TpnjTs9ff+2iS6KsmDPEIoa4dRPksR4I3n91ha",
	"VztGI2z2dZhPst9f/9yxjeIk6fBKhjRNiJ+zPcnje61pAvycFdGoMO8DfELZsIuwepIAt2R3QGO8lmAq",
	"T6zzHanzjI+j1qYbRVox7gIgmEd7TAody6918RokE9A6F+rgtY9eBmN/Az4wSKnKZHnRbFO/qlkIlbAF",
	"/r4x2LONI7IreJVDu/2BlRWmh0DR8GZIOZb2EZFQmg9fcdgky+Qvi6aRLlwXXXTNd2xVGP8CWYG1Mphz",
	"fLB9xeiSErphU8s4va80aYvVitRe0rbWtbQkEvLUvdfhwApIJce5c3/dswwBMgKCPa9ZoFaQUfh1kyxv",
	"4qr+bHXoahxnecMK+M3oaMlHFEVGkYBXTRp0fTYsvYO0bNdigTaMIyWAo/sdQzssEK4Iwlmm8dHQd/E6",
	"7ZVWlLxVgMJluwSJcyzxlOt/8XTHWaIVPD02dXv8TS/b2q2V0N9QqNR0wrMXcqEAae0oknlXLpb62Qcc",
	"byG9Zet0jwvVrSHP21llCNEtWyNLGKooXlzJqNwVBy1WTEl0tMjQhoQSKhTHNIM0Z5kqgcpOnK2xgL/9",
	"tdXJanpU04eiUId9umb5oZ3HlGRAMl3LCsgETmbJFotU4A2Y2l8RLYvJXTepjSxkZEVXmkTjjaAIHrfy",
	"+hVI6wl0SygYLq2/5CQjWHct2KfZDvMt8JRQIXFRWNHE/n9HZLYDmm6Ihqu6nheM8bTAB/Mty+Q+xTRP",
	"BWSKE3nwQrAkjGqn3ROas3thiHLGTKAXmOYiw5XWepZgwtOM0ZxoFvtojeWOM1Zq4pyTPdzjgxVRacHC",
	"GN+Ekxe5IRyqAmemqpeqkMRWWO8T923gmbFiqwSkQq0zRiXHmWS83W2VANR5Ge679zqTqTykhXNnONo9",
	"GXJkw0DvlYKWl4eLjGTaLJDPoV0GcypYO5SQrAxi/eYEG+3SjuzDwPmGcCEnjsSGZvQ8XOBJAZoEfQjw",
	"Hk3Znmdbu2kBSQfdvV1D3viRcND+C5fyHSshfbxb9sDJhmQmlVN9kFaiUxCZTC2JOXPVH1ez0Sbcloic",
	"xCmbhLSYdbcUssg/OGeB4PTH7zrSCJXf6sP6OG7Iww2tBCHwNnp28SRTW/R0oX1cs3VgF6dhnTDIyVqZ",
	"G8W3nk6fv6Figsi6tYRj3VGNFlUvpYYTAy+E6qOXargQoajqTglaPslBZJxUOlTGtdQ4pU346CO/FhA2",
	"ra6tNQw8CQ9es/WVhLINB414wzvEuO8DUCnrH55Gcbde2pIPl2Zxo7B7CnzELE3tiJl0rB7UVDGH2s8n",
	"ndcz8y+zqjq2bjx0or0ftq0EmiUVPugOmZYgdywXU4Dbe3uQ0CcHrvbhVPRWnGSnp1ctVTKJC2SY6yxD",
	"X++xRIRmhRJkD98Es+6twlS6SfDjlqw5w2KZnAL2YUMZzjjEn44oa5NwWM2SPZbB7Q4kaPtNVq4+wHOr",
	"tsxjfWrXDUVW4IQf6H32fPh4JOA54zDJt50xpKRxK6HbR6/fs05HmdlgV8N1Qvb6pVVIe1bigCXkac/B",
	"OZYwl8QsOdp3LSvCMnxvsAfq9j0moaYJnSdUlb+vZo41qNlg9l+r0DJFZ/WQQV/ZShg4DpRMURmvDa2J",
	"pKuoyLLF2/2Tw6D4el718Hp3E/cIVAKnuEB3hOajImjeRuC3bJ1Y0FHhA1PSfeGwUdR0OnOwrz/4FxGA",
	"3tHiz5qQfQBy6PbXzliVmfFFhrlmzM35J81hbcYwGRa79lnfe8aJmbjG8EuwkhItW7GCbfUnTW4QwZbp",
	"dQubJWtM71LJMRWbzjw/hH+8aEUrbHZcAc3tzMM9yImolDQnqkyfwgt7o2VdFz9d+V2OA6mHuCfgwXmf",
	"wwa46f9htzwYzz9G0OOh2Z3718ThgzVWNxq6dyx+067eTCCx3nh7ULWoOW/iIm3GIVMTOs+CmiljfFL3",
	"Pr2w4Yz3YkeFTryqGdtsb7nTems94x7CXDemOOl+pTPT+NynRCVbkxjidO8jF6S+dLiuNsd5SWiDf+Yl",
	"pnhrh7LuiZB4swndMIXvVHtB4YiCIymn7dD5uti5SfAb7Ubr9u8Bc+CXys5AjX8NtDGPG0V2UlbJ8Wjm",
	"+jY8Osei5F+Y5hi9Ab7XR5TLV1fIrIFbEdAlmRsi4Yn2wIWV9PzZxbML05oqoLgiyTL51jzSNUbujNIL",
	"XJFF1txNbsGAGB3OJl2u8mSZ/ATSQm5izswcRMWosLt+cXFhUTeVDhjhqircJGtxK+xRz2l36rzAX5Ye",
	"B9dF/fFHsmUS4aJAWa2gIdlgVchHKRbTx47ZAqsrCg8VZBp0gqOZJUKVJeYHrRz0lZslEm+Fjjy/x5X7",
	"yczQ7K+YkD/U96k6akHI792FzZ+yr9rOw51plRCFe5R1NLB5o/vg8QMD4QP0gryj2Rk5PGC1ob+Ps07a",
	"Ld6R/GjrQAH2lxDdOPjRPG8iocIclyDNhexNv3x0jgPEWAybCxNb1i0C6Xpy1jJKr273aufq0/jcGiZH",
	"8ECE1P3+DD1vdRyqGE74eJn9Ip2sC/k5O1jX8hO9W6lQNVfn492n7SQqaLjz6CbqvINuxHbjPeXWXqSN",
	"1Zdre0v+8RHcNVs/Br2Z2/szBG7+NznO3npXcbx2bYZVHyPDjEUjOO22Xvlpsiqij8NntzYGzg6bWUt1",
	"fdrKnxPxmPV0tJDXV6ifU4se8esAg52Zd/v4K+TkWawufknO7GCtM3NkB2eFvTiGrz65F5+u6quBkT59",
	"5VfnG1QBe4Xrvx19BsvEL5B8RKPWf1U0kq6l+xH6mWVq2fw23tmz3khj1Kq5NR0rwO5i9WnAqb/FfQRA",
	"rbx+ZwhSq8Z23gl+h3Gw6qk+TumqrRwBrVVHg6cpXxN6OfBaNTFydgC2sdrQ372cOxHMNpEQ7Z6du//P",
	"CQdFfD4Atmfo+T64jQXAbKrGfolO7gDeM3RwB/TGvTsGfs/Gu0/bSVTQcOfRTdR5B92I7QI9pXXhbUKq",
	"fdV9s9JuF8D3PuAUL9w9t1guFju1fnaHaY6fZeyZujN/kjmgmL/FEaLlYlGwDBc7JuTyu4vvLpLj6vj/",
	"AAAA//8qjeJ8XkIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

