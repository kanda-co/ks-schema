// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ApiEventMethod.
const (
	Delete ApiEventMethod = "delete"
	Get    ApiEventMethod = "get"
	Post   ApiEventMethod = "post"
	Put    ApiEventMethod = "put"
)

// Defines values for ApprovalOutcome.
const (
	FAIL   ApprovalOutcome = "FAIL"
	PASS   ApprovalOutcome = "PASS"
	REVIEW ApprovalOutcome = "REVIEW"
)

// Defines values for ApprovalReason.
const (
	Approved                                  ApprovalReason = "approved"
	InsufficientDetails                       ApprovalReason = "insufficient_details"
	InvalidDetails                            ApprovalReason = "invalid_details"
	InvestigationRequired                     ApprovalReason = "investigation_required"
	ManualReviewRequired                      ApprovalReason = "manual_review_required"
	MismatchedDetails                         ApprovalReason = "mismatched_details"
	NotApproved                               ApprovalReason = "not_approved"
	NotApprovedCcjAgainstBusinessOrDirector   ApprovalReason = "not_approved_ccj_against_business_or_director"
	NotApprovedCcjAgainstPreviousAssociation  ApprovalReason = "not_approved_ccj_against_previous_association"
	NotApprovedListedTradeTypeNotCovered      ApprovalReason = "not_approved_listed_trade_type_not_covered"
	NotApprovedSeveralNegativesAgainstCompany ApprovalReason = "not_approved_several_negatives_against_company"
)

// Defines values for CategorySection.
const (
	AdvertisingFinance                      CategorySection = "advertising_finance"
	HowdensAdvertisingFinance               CategorySection = "howdens__advertising_finance"
	HowdensFightingFinancialCrime           CategorySection = "howdens__fighting_financial_crime"
	HowdensSeniorManagementResponsibilities CategorySection = "howdens__senior_management_responsibilities"
	HowdensTheBasicsOfOfferingFinance       CategorySection = "howdens__the_basics_of_offering_finance"
	HowdensTreatingCustomersFairly          CategorySection = "howdens__treating_customers_fairly"
	HowdensWhatIsAnArAndWhatCanItDo         CategorySection = "howdens__what_is_an_ar_and_what_can_it_do"
	TreatingCustomersFairly                 CategorySection = "treating_customers_fairly"
	WhatIsAnIarAndWhatCanItDo               CategorySection = "what_is_an_iar_and_what_can_it_do"
)

// Defines values for CheckoutOption.
const (
	ApplyForFinance CheckoutOption = "apply_for_finance"
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCard       CheckoutOption = "pay_on_card"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyBilling.
const (
	CompanyBillingCancelled               CompanyBilling = "cancelled"
	CompanyBillingLegacy                  CompanyBilling = "legacy"
	CompanyBillingPending                 CompanyBilling = "pending"
	CompanyBillingRecurringPaymentFailed1 CompanyBilling = "recurring_payment_failed_1"
	CompanyBillingRecurringPaymentFailed2 CompanyBilling = "recurring_payment_failed_2"
	CompanyBillingRecurringPaymentFailed3 CompanyBilling = "recurring_payment_failed_3"
	CompanyBillingReferred                CompanyBilling = "referred"
	CompanyBillingSubscribed              CompanyBilling = "subscribed"
	CompanyBillingSuspended               CompanyBilling = "suspended"
	CompanyBillingTrial                   CompanyBilling = "trial"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup           CompanyLifecycle = "completed_setup"
	CompanyLifecycleDeclined                 CompanyLifecycle = "declined"
	CompanyLifecycleDirectorDetailsSubmitted CompanyLifecycle = "director_details_submitted"
	CompanyLifecycleDirectorInfoProvided     CompanyLifecycle = "director_info_provided"
	CompanyLifecycleInsuranceUploaded        CompanyLifecycle = "insurance_uploaded"
	CompanyLifecycleOnboarded                CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered               CompanyLifecycle = "registered"
	CompanyLifecycleSubscribed               CompanyLifecycle = "subscribed"
	CompanyLifecycleVerified                 CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyAcrib   CompanyInfoTradeBody = "acrib"
	CompanyInfoTradeBodyAphc    CompanyInfoTradeBody = "aphc"
	CompanyInfoTradeBodyAssure  CompanyInfoTradeBody = "assure"
	CompanyInfoTradeBodyCertass CompanyInfoTradeBody = "certass"
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyFensa   CompanyInfoTradeBody = "fensa"
	CompanyInfoTradeBodyFeta    CompanyInfoTradeBody = "feta"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyHetas   CompanyInfoTradeBody = "hetas"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNfrc    CompanyInfoTradeBody = "nfrc"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyNone    CompanyInfoTradeBody = "none"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	CompanyInfoTradeTypeAirConditioning              CompanyInfoTradeType = "air_conditioning"
	CompanyInfoTradeTypeArtificialGrassSpecialists   CompanyInfoTradeType = "artificial_grass_specialists"
	CompanyInfoTradeTypeBathrooms                    CompanyInfoTradeType = "bathrooms"
	CompanyInfoTradeTypeBatteryStorage               CompanyInfoTradeType = "battery_storage"
	CompanyInfoTradeTypeBlindsAndShutters            CompanyInfoTradeType = "blinds_and_shutters"
	CompanyInfoTradeTypeCarpentry                    CompanyInfoTradeType = "carpentry"
	CompanyInfoTradeTypeCctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	CompanyInfoTradeTypeCladdingSofitsAndGuttering   CompanyInfoTradeType = "cladding_sofits_and_guttering"
	CompanyInfoTradeTypeConservatories               CompanyInfoTradeType = "conservatories"
	CompanyInfoTradeTypeCurtains                     CompanyInfoTradeType = "curtains"
	CompanyInfoTradeTypeDecking                      CompanyInfoTradeType = "decking"
	CompanyInfoTradeTypeDrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	CompanyInfoTradeTypeElectrician                  CompanyInfoTradeType = "electrician"
	CompanyInfoTradeTypeEvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	CompanyInfoTradeTypeFencing                      CompanyInfoTradeType = "fencing"
	CompanyInfoTradeTypeFireplaces                   CompanyInfoTradeType = "fireplaces"
	CompanyInfoTradeTypeFittedBedroomFurniture       CompanyInfoTradeType = "fitted_bedroom_furniture"
	CompanyInfoTradeTypeFloorLayer                   CompanyInfoTradeType = "floor_layer"
	CompanyInfoTradeTypeGarageDoors                  CompanyInfoTradeType = "garage_doors"
	CompanyInfoTradeTypeGardenRooms                  CompanyInfoTradeType = "garden_rooms"
	CompanyInfoTradeTypeGasEngineer                  CompanyInfoTradeType = "gas_engineer"
	CompanyInfoTradeTypeGates                        CompanyInfoTradeType = "gates"
	CompanyInfoTradeTypeHeatPumps                    CompanyInfoTradeType = "heat_pumps"
	CompanyInfoTradeTypeHeatingSystems               CompanyInfoTradeType = "heating_systems"
	CompanyInfoTradeTypeHomeInsulationExclSprayFoam  CompanyInfoTradeType = "home_insulation_excl_spray_foam"
	CompanyInfoTradeTypeHotTubSpecialist             CompanyInfoTradeType = "hot_tub_specialist"
	CompanyInfoTradeTypeKitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	CompanyInfoTradeTypeKitchenSupplier              CompanyInfoTradeType = "kitchen_supplier"
	CompanyInfoTradeTypeLandscaping                  CompanyInfoTradeType = "landscaping"
	CompanyInfoTradeTypeLoftBoarding                 CompanyInfoTradeType = "loft_boarding"
	CompanyInfoTradeTypeMultiTrade                   CompanyInfoTradeType = "multi_trade"
	CompanyInfoTradeTypeOtherTrade                   CompanyInfoTradeType = "other_trade"
	CompanyInfoTradeTypePaintingAndDecorating        CompanyInfoTradeType = "painting_and_decorating"
	CompanyInfoTradeTypePlasterer                    CompanyInfoTradeType = "plasterer"
	CompanyInfoTradeTypePlumbing                     CompanyInfoTradeType = "plumbing"
	CompanyInfoTradeTypeRendering                    CompanyInfoTradeType = "rendering"
	CompanyInfoTradeTypeResinDriveSpecialist         CompanyInfoTradeType = "resin_drive_specialist"
	CompanyInfoTradeTypeResinDriveways               CompanyInfoTradeType = "resin_driveways"
	CompanyInfoTradeTypeRoofingExcludingFlatRoofs    CompanyInfoTradeType = "roofing__excluding_flat_roofs"
	CompanyInfoTradeTypeSecuritySystems              CompanyInfoTradeType = "security_systems"
	CompanyInfoTradeTypeStairCaseSpecialist          CompanyInfoTradeType = "stair_case_specialist"
	CompanyInfoTradeTypeTiler                        CompanyInfoTradeType = "tiler"
	CompanyInfoTradeTypeVerandas                     CompanyInfoTradeType = "verandas"
	CompanyInfoTradeTypeWindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for ContractAgreementAgreedTermsAndConditions.
const (
	ContractAgreementAgreedTermsAndConditionsNo  ContractAgreementAgreedTermsAndConditions = "no"
	ContractAgreementAgreedTermsAndConditionsYes ContractAgreementAgreedTermsAndConditions = "yes"
)

// Defines values for ContractAgreementAgreedToBecomeIarOfKanda.
const (
	ContractAgreementAgreedToBecomeIarOfKandaNo  ContractAgreementAgreedToBecomeIarOfKanda = "no"
	ContractAgreementAgreedToBecomeIarOfKandaYes ContractAgreementAgreedToBecomeIarOfKanda = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindCharge CreditKind = "charge"
	CreditKindJob    CreditKind = "job"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateCancelled      CreditState = "cancelled"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	ArmedForces                      CustomerDetailsResidentialStatus = "armed_forces"
	CouncilTenant                    CustomerDetailsResidentialStatus = "council_tenant"
	HomeownerBuyToLetLivingElsewhere CustomerDetailsResidentialStatus = "homeowner_buy_to_let_living_elsewhere"
	HomeownerSharedOwnership         CustomerDetailsResidentialStatus = "homeowner_shared_ownership"
	LivingWithParents                CustomerDetailsResidentialStatus = "living_with_parents"
	Lodger                           CustomerDetailsResidentialStatus = "lodger"
	Owner                            CustomerDetailsResidentialStatus = "owner"
	OwnerWithoutMortgage             CustomerDetailsResidentialStatus = "owner_without_mortgage"
	Tenant                           CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	NotVerified           DirectorInfoVerificationStatus = "not_verified"
	VerificationDeclined  DirectorInfoVerificationStatus = "verification_declined"
	VerificationSubmitted DirectorInfoVerificationStatus = "verification_submitted"
	Verified              DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmployedDetailsEmployedType.
const (
	EmployedDetailsEmployedTypeFullTime EmployedDetailsEmployedType = "full_time"
	EmployedDetailsEmployedTypePartTime EmployedDetailsEmployedType = "part_time"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for EnterpriseEnterpriseType.
const (
	AreaOffice   EnterpriseEnterpriseType = "area_office"
	BranchOffice EnterpriseEnterpriseType = "branch_office"
	MainOffice   EnterpriseEnterpriseType = "main_office"
	RegionOffice EnterpriseEnterpriseType = "region_office"
)

// Defines values for EnterpriseUserTypeRole.
const (
	EnterpriseAdmin EnterpriseUserTypeRole = "enterprise-admin"
	EnterpriseUser  EnterpriseUserTypeRole = "enterprise-user"
)

// Defines values for EventName.
const (
	ApiAttempted                   EventName = "api-attempted"
	ApiFailed                      EventName = "api-failed"
	ApiSucceeded                   EventName = "api-succeeded"
	ButtonInteracted               EventName = "button-interacted"
	CommsSent                      EventName = "comms-sent"
	FormError                      EventName = "form-error"
	FormFilled                     EventName = "form-filled"
	FormSubmitted                  EventName = "form-submitted"
	LoginAttempted                 EventName = "login-attempted"
	LoginFailed                    EventName = "login-failed"
	LoginSucceeded                 EventName = "login-succeeded"
	OnboardingBillingCancelled     EventName = "onboarding-billing-cancelled"
	OnboardingBillingReferred      EventName = "onboarding-billing-referred"
	OnboardingBillingSubscribed    EventName = "onboarding-billing-subscribed"
	OnboardingCompleted            EventName = "onboarding-completed"
	OnboardingContractSigned       EventName = "onboarding-contract-signed"
	OnboardingDeclined             EventName = "onboarding-declined"
	OnboardingDirectorFailed       EventName = "onboarding-director-failed"
	OnboardingDirectorInfoProvided EventName = "onboarding-director-info-provided"
	OnboardingDirectorPending      EventName = "onboarding-director-pending"
	OnboardingDirectorVerified     EventName = "onboarding-director-verified"
	OnboardingInsuranceUploaded    EventName = "onboarding-insurance-uploaded"
	OnboardingLegacy               EventName = "onboarding-legacy"
	OnboardingOnboarded            EventName = "onboarding-onboarded"
	OnboardingRegistered           EventName = "onboarding-registered"
	OnboardingRejected             EventName = "onboarding-rejected"
	OnboardingVerified             EventName = "onboarding-verified"
	PageClosed                     EventName = "page-closed"
	PageError                      EventName = "page-error"
	PageView                       EventName = "page-view"
	SignupAttempted                EventName = "signup-attempted"
	SignupFailed                   EventName = "signup-failed"
	SignupSucceeded                EventName = "signup-succeeded"
)

// Defines values for ExpenditureExpenditureType.
const (
	ChildSupportAgency ExpenditureExpenditureType = "child_support_agency"
	Clothes            ExpenditureExpenditureType = "clothes"
	CouncilTaxAndBills ExpenditureExpenditureType = "council_tax_and_bills"
	CreditCard         ExpenditureExpenditureType = "credit_card"
	Healthcare         ExpenditureExpenditureType = "healthcare"
	Holidays           ExpenditureExpenditureType = "holidays"
	Mortgage           ExpenditureExpenditureType = "mortgage"
	Rent               ExpenditureExpenditureType = "rent"
)

// Defines values for FinanceDetailsBankrupcyOrIvaInLast5Years.
const (
	FinanceDetailsBankrupcyOrIvaInLast5YearsNo  FinanceDetailsBankrupcyOrIvaInLast5Years = "no"
	FinanceDetailsBankrupcyOrIvaInLast5YearsYes FinanceDetailsBankrupcyOrIvaInLast5Years = "yes"
)

// Defines values for FinanceProvider.
const (
	Allium    FinanceProvider = "allium"
	Demo      FinanceProvider = "demo"
	Etika     FinanceProvider = "etika"
	Novuna    FinanceProvider = "novuna"
	Omni      FinanceProvider = "omni"
	Propensio FinanceProvider = "propensio"
)

// Defines values for FinanceRateAprType.
const (
	BUYNOWPAYLATER  FinanceRateAprType = "BUYNOW_PAYLATER"
	INTERESTBEARING FinanceRateAprType = "INTEREST_BEARING"
	INTERESTFREE    FinanceRateAprType = "INTEREST_FREE"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance   FinanceStatus = "applied_for_finance"
	FinanceStatusFinanceCancelled    FinanceStatus = "finance_cancelled"
	FinanceStatusFinanceNotApproved  FinanceStatus = "finance_not_approved"
	FinanceStatusFinanced            FinanceStatus = "financed"
	FinanceStatusNotApplied          FinanceStatus = "not_applied"
	FinanceStatusPaid                FinanceStatus = "paid"
	FinanceStatusPayoutPending       FinanceStatus = "payout_pending"
	FinanceStatusSatNoteDelayed      FinanceStatus = "sat_note_delayed"
	FinanceStatusSatNoteLenderReview FinanceStatus = "sat_note_lender_review"
	FinanceStatusSatNoteSent         FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned       FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed       FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview         FinanceStatus = "under_review"
)

// Defines values for FinanceType.
const (
	Primary   FinanceType = "primary"
	Secondary FinanceType = "secondary"
)

// Defines values for FlagLevel.
const (
	Green  FlagLevel = "green"
	Red    FlagLevel = "red"
	Yellow FlagLevel = "yellow"
)

// Defines values for FlowType.
const (
	Example FlowType = "example"
	Live    FlowType = "live"
)

// Defines values for Gender.
const (
	Female Gender = "female"
	Male   Gender = "male"
)

// Defines values for IncomeIncomeType.
const (
	IncomeIncomeTypeBenefits             IncomeIncomeType = "benefits"
	IncomeIncomeTypeEarningAfterTax      IncomeIncomeType = "earning_after_tax"
	IncomeIncomeTypeOtherSourcesOfIncome IncomeIncomeType = "other_sources_of_income"
	IncomeIncomeTypePensions             IncomeIncomeType = "pensions"
)

// Defines values for IncomeIncomeTypeInfo.
const (
	Applicant    IncomeIncomeTypeInfo = "applicant"
	Household    IncomeIncomeTypeInfo = "household"
	NotSpecified IncomeIncomeTypeInfo = "not_specified"
)

// Defines values for InfoCheckoutRedirectDepositType.
const (
	InfoCheckoutRedirectDepositTypeFixedDeposit   InfoCheckoutRedirectDepositType = "fixed_deposit"
	InfoCheckoutRedirectDepositTypeNoDeposit      InfoCheckoutRedirectDepositType = "no_deposit"
	InfoCheckoutRedirectDepositTypePartialDeposit InfoCheckoutRedirectDepositType = "partial_deposit"
)

// Defines values for InfoValidationEmailVerdict.
const (
	Invalid InfoValidationEmailVerdict = "invalid"
	Risky   InfoValidationEmailVerdict = "risky"
	Valid   InfoValidationEmailVerdict = "valid"
)

// Defines values for JobArchived.
const (
	JobArchivedNo  JobArchived = "no"
	JobArchivedYes JobArchived = "yes"
)

// Defines values for JobDepositType.
const (
	JobDepositTypeFixedDeposit   JobDepositType = "fixed_deposit"
	JobDepositTypeNoDeposit      JobDepositType = "no_deposit"
	JobDepositTypePartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobJobType.
const (
	Solar    JobJobType = "solar"
	Standard JobJobType = "standard"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusFinished JobStatus = "finished"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobCreditStateCurrentStatus.
const (
	Accepted                JobCreditStateCurrentStatus = "accepted"
	AcceptedDepositRequired JobCreditStateCurrentStatus = "accepted_deposit_required"
	AcceptedSignDocument    JobCreditStateCurrentStatus = "accepted_sign_document"
	ActionCustomer          JobCreditStateCurrentStatus = "action_customer"
	ActionLender            JobCreditStateCurrentStatus = "action_lender"
	Cancelled               JobCreditStateCurrentStatus = "cancelled"
	Declined                JobCreditStateCurrentStatus = "declined"
	Finished                JobCreditStateCurrentStatus = "finished"
	NotSubmitted            JobCreditStateCurrentStatus = "not_submitted"
	PaidOut                 JobCreditStateCurrentStatus = "paid_out"
	Pending                 JobCreditStateCurrentStatus = "pending"
	Referred                JobCreditStateCurrentStatus = "referred"
)

// Defines values for JobItemStyle.
const (
	JobItemStyleCustom JobItemStyle = "custom"
	JobItemStyleKanda  JobItemStyle = "kanda"
)

// Defines values for JobItemVatRate.
const (
	Custom    JobItemVatRate = "custom"
	Exempted  JobItemVatRate = "exempted"
	N0        JobItemVatRate = "0%"
	N20       JobItemVatRate = "20%"
	N5        JobItemVatRate = "5%"
	VatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for JobOverrideAction.
const (
	MarkJobAsAccepted       JobOverrideAction = "mark_job_as_accepted"
	MarkJobAsActionCustomer JobOverrideAction = "mark_job_as_action_customer"
	MarkJobAsCancelled      JobOverrideAction = "mark_job_as_cancelled"
	MarkJobAsDeclined       JobOverrideAction = "mark_job_as_declined"
	MarkJobAsPending        JobOverrideAction = "mark_job_as_pending"
	MarkJobAsReferred       JobOverrideAction = "mark_job_as_referred"
	MarkJobAsSatNoteDelayed JobOverrideAction = "mark_job_as_sat_note_delayed"
)

// Defines values for LeadSource.
const (
	Checkout LeadSource = "checkout"
	Consumer LeadSource = "consumer"
)

// Defines values for LeadStatus.
const (
	Closed         LeadStatus = "closed"
	CreditDeclined LeadStatus = "credit_declined"
	Expired        LeadStatus = "expired"
	Issued         LeadStatus = "issued"
	Open           LeadStatus = "open"
	QuoteDeclined  LeadStatus = "quote_declined"
	TradeAccepted  LeadStatus = "trade_accepted"
	TradeDeclined  LeadStatus = "trade_declined"
	TradeNotified  LeadStatus = "trade_notified"
)

// Defines values for LeadQuoteWorkFinishedBy.
const (
	AsSoonAsPossible LeadQuoteWorkFinishedBy = "as soon as possible"
	Over6Months      LeadQuoteWorkFinishedBy = "over 6 months"
	Within1Month     LeadQuoteWorkFinishedBy = "within 1 month"
	Within3Months    LeadQuoteWorkFinishedBy = "within 3 months"
	Within6Months    LeadQuoteWorkFinishedBy = "within 6 months"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for NotEmployedDetailsSourceOfIncome.
const (
	NotEmployedDetailsSourceOfIncomeBenefits      NotEmployedDetailsSourceOfIncome = "benefits"
	NotEmployedDetailsSourceOfIncomeDisabled      NotEmployedDetailsSourceOfIncome = "disabled"
	NotEmployedDetailsSourceOfIncomeFulltimeCarer NotEmployedDetailsSourceOfIncome = "fulltime_carer"
	NotEmployedDetailsSourceOfIncomeHomemaker     NotEmployedDetailsSourceOfIncome = "homemaker"
	NotEmployedDetailsSourceOfIncomeMaintenance   NotEmployedDetailsSourceOfIncome = "maintenance"
	NotEmployedDetailsSourceOfIncomeOther         NotEmployedDetailsSourceOfIncome = "other"
	NotEmployedDetailsSourceOfIncomePartner       NotEmployedDetailsSourceOfIncome = "partner"
	NotEmployedDetailsSourceOfIncomePermanentDla  NotEmployedDetailsSourceOfIncome = "permanent_dla"
	NotEmployedDetailsSourceOfIncomeStudent       NotEmployedDetailsSourceOfIncome = "student"
)

// Defines values for OnboardingStage.
const (
	CompanyReportReview    OnboardingStage = "company_report_review"
	CompanyReportReviewed  OnboardingStage = "company_report_reviewed"
	ConsumerReportReview   OnboardingStage = "consumer_report_review"
	ConsumerReportReviewed OnboardingStage = "consumer_report_reviewed"
	DirectorReportReview   OnboardingStage = "director_report_review"
	DirectorReportReviewed OnboardingStage = "director_report_reviewed"
	FcaApproved            OnboardingStage = "fca_approved"
	FcaAwaitingApproval    OnboardingStage = "fca_awaiting_approval"
	FcaUploadReview        OnboardingStage = "fca_upload_review"
	FcaUploadReviewed      OnboardingStage = "fca_upload_reviewed"
	InsuranceReview        OnboardingStage = "insurance_review"
	InsuranceReviewed      OnboardingStage = "insurance_reviewed"
	OnboardingNotApproved  OnboardingStage = "onboarding_not_approved"
	Ongoing                OnboardingStage = "ongoing"
	OnlineReview           OnboardingStage = "online_review"
	OnlineReviewed         OnboardingStage = "online_reviewed"
	OwnerReportReview      OnboardingStage = "owner_report_review"
	OwnerReportReviewed    OnboardingStage = "owner_report_reviewed"
	TradeReview            OnboardingStage = "trade_review"
	TradeReviewed          OnboardingStage = "trade_reviewed"
)

// Defines values for OnlinePresenceQOnline.
const (
	NoIDontHaveThis          OnlinePresenceQOnline = "No, I don't have this"
	YesICanProvideTheDetails OnlinePresenceQOnline = "Yes, I can provide the details"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"
	PaymentKindJob    PaymentKind = "job"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for PaymentOptionPaymentMethod.
const (
	Card PaymentOptionPaymentMethod = "card"
	Cash PaymentOptionPaymentMethod = "cash"
	Loan PaymentOptionPaymentMethod = "loan"
)

// Defines values for PreferenceOption.
const (
	Disabled PreferenceOption = "disabled"
	Enabled  PreferenceOption = "enabled"
)

// Defines values for Result.
const (
	FAILED  Result = "FAILED"
	MISSING Result = "MISSING"
	PASSED  Result = "PASSED"
	VOIDED  Result = "VOIDED"
)

// Defines values for SatNoteQAdvice.
const (
	TheyCompletedTheApplicationForMe         SatNoteQAdvice = "They completed the application for me"
	TheyHelpedMeWorkOutMyPotentialRepayments SatNoteQAdvice = "They helped me work out my potential repayments"
	TheyJustSentMeALinkToApply               SatNoteQAdvice = "They just sent me a link to apply"
	TheyToldMeWhatRatesWhereAvailable        SatNoteQAdvice = "They told me what rates where available"
)

// Defines values for SatNoteQApplication.
const (
	ICompletedTheApplicationMyself          SatNoteQApplication = "I completed the application myself"
	SomeoneCompletedTheAppliationOnMyBehalf SatNoteQApplication = "Someone completed the appliation on my behalf"
)

// Defines values for SatNoteQAvailability.
const (
	IFoundOutWhenTheInstallerSentMeALinkViaKanda SatNoteQAvailability = "I found out when the installer sent me a link via Kanda"
	ISawItAdvertisedByTheInstaller               SatNoteQAvailability = "I saw it advertised by the installer"
	TheInstallerToldMeWhenQuotingMe              SatNoteQAvailability = "The installer told me when quoting me"
)

// Defines values for SatNoteQEasiness.
const (
	SatNoteQEasinessNo       SatNoteQEasiness = "no"
	SatNoteQEasinessSomewhat SatNoteQEasiness = "somewhat"
	SatNoteQEasinessYes      SatNoteQEasiness = "yes"
)

// Defines values for SatNoteQPressure.
const (
	SatNoteQPressureNo       SatNoteQPressure = "no"
	SatNoteQPressureSomewhat SatNoteQPressure = "somewhat"
	SatNoteQPressureYes      SatNoteQPressure = "yes"
)

// Defines values for SatNoteQRate.
const (
	NoIWasNotToldToChooseASpecificOption SatNoteQRate = "No - I was not told to choose a specific option"
	YesIWasToldToChooseASpecificOption   SatNoteQRate = "Yes - I was told to choose a specific option"
)

// Defines values for SatNoteQSaving.
const (
	NoIDoNotUnderstand SatNoteQSaving = "No I do not understand"
	YesIUnderstand     SatNoteQSaving = "Yes I understand"
)

// Defines values for SelfEmployedDetailsSelfEmployedType.
const (
	SelfEmployedDetailsSelfEmployedTypeFullTime SelfEmployedDetailsSelfEmployedType = "full_time"
	SelfEmployedDetailsSelfEmployedTypePartTime SelfEmployedDetailsSelfEmployedType = "part_time"
)

// Defines values for SignatureSigned.
const (
	SignatureSignedNo  SignatureSigned = "no"
	SignatureSignedYes SignatureSigned = "yes"
)

// Defines values for SolarCompanyInfoElectricalTradeAssociation.
const (
	Napit  SolarCompanyInfoElectricalTradeAssociation = "napit"
	Niceic SolarCompanyInfoElectricalTradeAssociation = "niceic"
	None   SolarCompanyInfoElectricalTradeAssociation = "none"
)

// Defines values for SolarCompanyInfoSolarTradeAssociation.
const (
	Heis SolarCompanyInfoSolarTradeAssociation = "heis"
	Msc  SolarCompanyInfoSolarTradeAssociation = "msc"
	Recc SolarCompanyInfoSolarTradeAssociation = "recc"
)

// Defines values for SubscriptionInterval.
const (
	Monthly SubscriptionInterval = "monthly"
	Yearly  SubscriptionInterval = "yearly"
)

// Defines values for Title.
const (
	Dr   Title = "dr"
	Miss Title = "miss"
	Mr   Title = "mr"
	Mrs  Title = "mrs"
	Ms   Title = "ms"
)

// Defines values for UserEventProvider.
const (
	Facebook UserEventProvider = "facebook"
	Firebase UserEventProvider = "firebase"
	Google   UserEventProvider = "google"
	System   UserEventProvider = "system"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Defines values for WelcomeSkipBannerAdvertFinanceCalculator.
const (
	WelcomeSkipBannerAdvertFinanceCalculatorNo  WelcomeSkipBannerAdvertFinanceCalculator = "no"
	WelcomeSkipBannerAdvertFinanceCalculatorYes WelcomeSkipBannerAdvertFinanceCalculator = "yes"
)

// Defines values for WelcomeSkipBannerDirectorVerification.
const (
	WelcomeSkipBannerDirectorVerificationNo  WelcomeSkipBannerDirectorVerification = "no"
	WelcomeSkipBannerDirectorVerificationYes WelcomeSkipBannerDirectorVerification = "yes"
)

// Defines values for WelcomeSkipBannerInviteTeamMember.
const (
	WelcomeSkipBannerInviteTeamMemberNo  WelcomeSkipBannerInviteTeamMember = "no"
	WelcomeSkipBannerInviteTeamMemberYes WelcomeSkipBannerInviteTeamMember = "yes"
)

// Defines values for WelcomeSkipBannerUpdateWebsite.
const (
	WelcomeSkipBannerUpdateWebsiteNo  WelcomeSkipBannerUpdateWebsite = "no"
	WelcomeSkipBannerUpdateWebsiteYes WelcomeSkipBannerUpdateWebsite = "yes"
)

// Defines values for WorkType.
const (
	WorkTypeAirConditioning           WorkType = "air_conditioning"
	WorkTypeAlarmSystems              WorkType = "alarm_systems"
	WorkTypeArtificialGrass           WorkType = "artificial_grass"
	WorkTypeBathroomsSupplyAndFitted  WorkType = "bathrooms_supply_and_fitted"
	WorkTypeBathroomsSupplyOnly       WorkType = "bathrooms_supply_only"
	WorkTypeBedroomsFurnitueCustom    WorkType = "bedrooms_furnitue_custom"
	WorkTypeBlindsAwningsShutters     WorkType = "blinds_awnings_shutters"
	WorkTypeBoilerSwap                WorkType = "boiler_swap"
	WorkTypeCarpentry                 WorkType = "carpentry"
	WorkTypeCctv                      WorkType = "cctv"
	WorkTypeCentralHeatingSystem      WorkType = "central_heating_system"
	WorkTypeConservatory              WorkType = "conservatory"
	WorkTypeConservatoryRoof          WorkType = "conservatory_roof"
	WorkTypeDecking                   WorkType = "decking"
	WorkTypeDoorCanopy                WorkType = "door_canopy"
	WorkTypeDoors                     WorkType = "doors"
	WorkTypeDriveways                 WorkType = "driveways"
	WorkTypeElectricalInstallation    WorkType = "electrical_installation"
	WorkTypeEvCharger                 WorkType = "ev_charger"
	WorkTypeFencing                   WorkType = "fencing"
	WorkTypeFireplaces                WorkType = "fireplaces"
	WorkTypeFlooringExcludingCarpets  WorkType = "flooring_excluding_carpets"
	WorkTypeGarageDoors               WorkType = "garage_doors"
	WorkTypeGardenBuildings           WorkType = "garden_buildings"
	WorkTypeGates                     WorkType = "gates"
	WorkTypeGraniteWorktops           WorkType = "granite_worktops"
	WorkTypeHomeStudy                 WorkType = "home_study"
	WorkTypeHotTubsAndSpas            WorkType = "hot_tubs_and_spas"
	WorkTypeKitchensFitted            WorkType = "kitchens_fitted"
	WorkTypeKitchensSupplyOnly        WorkType = "kitchens_supply_only"
	WorkTypeLandscaping               WorkType = "landscaping"
	WorkTypeLoftBoarding              WorkType = "loft_boarding"
	WorkTypeLoftConversion            WorkType = "loft_conversion"
	WorkTypeOther                     WorkType = "other"
	WorkTypePaintingAndDecorating     WorkType = "painting_and_decorating"
	WorkTypePatios                    WorkType = "patios"
	WorkTypePlastering                WorkType = "plastering"
	WorkTypeRendering                 WorkType = "rendering"
	WorkTypeResinDriveways            WorkType = "resin_driveways"
	WorkTypeRoofingExclFlatRoofs      WorkType = "roofing_excl_flat_roofs"
	WorkTypeRoofline                  WorkType = "roofline"
	WorkTypeSecurityLighting          WorkType = "security_lighting"
	WorkTypeStaircases                WorkType = "staircases"
	WorkTypeTiling                    WorkType = "tiling"
	WorkTypeUnderfloorHeating         WorkType = "underfloor_heating"
	WorkTypeVerandas                  WorkType = "verandas"
	WorkTypeWallInsulationAndCladding WorkType = "wall_insulation_and_cladding"
	WorkTypeWindows                   WorkType = "windows"
	WorkTypeWindowsAndDoors           WorkType = "windows_and_doors"
)

// Defines values for Format.
const (
	Full    Format = "full"
	Reduced Format = "reduced"
)

// Defines values for XKandaProtected.
const (
	XKandaProtectedNo  XKandaProtected = "no"
	XKandaProtectedYes XKandaProtected = "yes"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// Analytics defines model for Analytics.
type Analytics struct {
	Utms *[]UTM `json:"utms,omitempty"`
}

// ApiEvent defines model for ApiEvent.
type ApiEvent struct {
	Action string `json:"action"`

	// comm context to be used in dynamic templates
	CommContext  *CommContext           `json:"comm_context,omitempty"`
	Error        *string                `json:"error,omitempty"`
	Method       ApiEventMethod         `json:"method"`
	Resource     string                 `json:"resource"`
	ResourceData *ApiEvent_ResourceData `json:"resource_data,omitempty"`
	ResourceId   string                 `json:"resource_id"`
}

// ApiEventMethod defines model for ApiEvent.Method.
type ApiEventMethod string

// ApiEvent_ResourceData defines model for ApiEvent.ResourceData.
type ApiEvent_ResourceData struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApplicantDetails defines model for ApplicantDetails.
type ApplicantDetails struct {
	AdditionalEmploymentDetails *[]EmploymentDetails `json:"additional_employment_details,omitempty"`
	BankAccount                 BankAccount          `json:"bank_account"`
	CustomerDetails             CustomerDetails      `json:"customer_details"`
	EmploymentDetails           EmploymentDetails    `json:"employment_details"`
	FinanceDetails              FinanceDetails       `json:"finance_details"`
}

// approval
type Approval struct {
	Outcome    ApprovalOutcome `json:"outcome"`
	Reason     ApprovalReason  `json:"reason"`
	ReasonNote *string         `json:"reason_note,omitempty"`
}

// ApprovalOutcome defines model for Approval.Outcome.
type ApprovalOutcome string

// ApprovalReason defines model for Approval.Reason.
type ApprovalReason string

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience    *string   `json:"audience,omitempty"`
	Bid         *string   `json:"bid,omitempty"`
	Branches    *[]string `json:"branches,omitempty"`
	Cid         *string   `json:"cid,omitempty"`
	Departments *[]string `json:"departments,omitempty"`
	Disabled    *bool     `json:"disabled,omitempty"`
	Eid         *string   `json:"eid,omitempty"`
	Email       Email     `json:"email"`
	Groups      *[]string `json:"groups,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Issuer      *string   `json:"issuer,omitempty"`
	Name        string    `json:"name"`
	Phone       *string   `json:"phone,omitempty"`
	PhotoURL    *string   `json:"photoURL,omitempty"`
	Provider    *string   `json:"provider,omitempty"`
	Role        *string   `json:"role,omitempty"`
	Subject     *string   `json:"subject,omitempty"`
	Token       *string   `json:"token,omitempty"`
	Verified    bool      `json:"verified"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	MonthsHeld    *int32 `json:"months_held,omitempty"`
	SortCode      string `json:"sort_code"`
}

// branding override object
type Branding struct {
	Logo                 Document               `json:"logo"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Cache defines model for Cache.
type Cache struct {
	Cid                  *string           `json:"cid,omitempty"`
	Id                   *string           `json:"id,omitempty"`
	Metadata             *Metadata         `json:"metadata,omitempty"`
	Oid                  *string           `json:"oid,omitempty"`
	AdditionalProperties map[string]string `json:"-"`
}

// Category defines model for Category.
type Category struct {
	NumberOfQuizzes int32           `json:"number_of_quizzes"`
	Result          *Result         `json:"result,omitempty"`
	Section         CategorySection `json:"section"`
}

// CategorySection defines model for Category.Section.
type CategorySection string

// checkout option picked by customer, updated only via custom action
type CheckoutOption string

// comm context to be used in dynamic templates
type CommContext struct {
	BankAccount BankAccount `json:"bank_account"`
	CtaSubUrl   *string     `json:"cta_sub_url,omitempty"`
	CtaUrl      string      `json:"cta_url"`
	Deposit     struct {
		Applied    string `json:"applied"`
		Difference string `json:"difference"`
		Original   string `json:"original"`
	} `json:"deposit"`
	Documents *[]Document  `json:"documents,omitempty"`
	FlowType  *FlowType    `json:"flow_type,omitempty"`
	Lender    *ContactInfo `json:"lender,omitempty"`

	// optional comm context message
	Message      *string     `json:"message,omitempty"`
	Receiver     ContactInfo `json:"receiver"`
	Sender       ContactInfo `json:"sender"`
	Template     string      `json:"template"`
	TemplateName TName       `json:"template_name"`
}

// CommPreferences defines model for CommPreferences.
type CommPreferences struct {
	Other   *PreferenceOption `json:"other,omitempty"`
	PostJob *PreferenceOption `json:"post_job,omitempty"`
	PreJob  *PreferenceOption `json:"pre_job,omitempty"`
}

// Company defines model for Company.
type Company struct {
	Aid                *string                 `json:"aid,omitempty"`
	Analytics          *Analytics              `json:"analytics,omitempty"`
	BankAccount        *BankAccount            `json:"bank_account,omitempty"`
	Billing            *CompanyBilling         `json:"billing,omitempty"`
	Cid                *string                 `json:"cid,omitempty"`
	CompanyInfo        *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo        *Document               `json:"company_logo,omitempty"`
	CompanyType        CompanyCompanyType      `json:"company_type"`
	ContactInfo        *ContactInfo            `json:"contact_info,omitempty"`
	Emails             *[]Email                `json:"emails,omitempty"`
	FcaNumber          *string                 `json:"fca_number,omitempty"`
	FinanceRates       *[]FinanceRate          `json:"finance_rates,omitempty"`
	Id                 *string                 `json:"id,omitempty"`
	Lifecycle          *CompanyLifecycle       `json:"lifecycle,omitempty"`
	LimitedCompanyInfo *LimitedCompanyInfo     `json:"limited_company_info,omitempty"`
	Metadata           *Metadata               `json:"metadata,omitempty"`
	Oid                *string                 `json:"oid,omitempty"`
	QuotePreference    *CompanyQuotePreference `json:"quote_preference,omitempty"`
	RedirectUrls       *RedirectURLs           `json:"redirect_urls,omitempty"`
	ReferralCode       *string                 `json:"referral_code,omitempty"`
	ReferredBy         *string                 `json:"referred_by,omitempty"`
	SkipDeposit        *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	SolarCompanyInfo   *SolarCompanyInfo       `json:"solar_company_info,omitempty"`
	SoleTraderInfo     *SoleTraderInfo         `json:"sole_trader_info,omitempty"`
	Users              *[]UserType             `json:"users,omitempty"`

	// company welcome skip banner
	WelcomePack *WelcomeSkipBanner `json:"welcome_pack,omitempty"`
}

// CompanyBilling defines model for Company.Billing.
type CompanyBilling string

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// company director report
type CompanyDirectorReport struct {
	// company director current appointment ccj
	CurrentAppointmentCcj int `json:"current_appointment_ccj"`

	// company director name
	DirectorName string `json:"director_name"`

	// company director disqualified
	Disqualified bool `json:"disqualified"`

	// company director inactive appointment ccj
	InactiveAppointmentCcj int `json:"inactive_appointment_ccj"`

	// company director number of current appointments
	NumberOfCurrentAppointments int `json:"number_of_current_appointments"`

	// company director number of inactive appointments
	NumberOfInactiveAppointments int `json:"number_of_inactive_appointments"`

	// company director number of previous appointments
	NumberOfPreviousAppointments int `json:"number_of_previous_appointments"`

	// company director people id
	PeopleId string `json:"people_id"`

	// company director previous appointment ccj
	PreviousAppointmentCcj int `json:"previous_appointment_ccj"`
}

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    Pence                       `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	ContractAgreement  *ContractAgreement          `json:"contract_agreement,omitempty"`
	InsuranceDocument  *Document                   `json:"insurance_document,omitempty"`
	OnlinePresence     *OnlinePresence             `json:"online_presence,omitempty"`
	TradeBody          CompanyInfoTradeBody        `json:"trade_body"`
	TradeBodyName      string                      `json:"trade_body_name"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	TradeTypeName      string                      `json:"trade_type_name"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
	WorkTypes          *[]WorkType                 `json:"work_types,omitempty"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// company onboarding report
type CompanyReport struct {
	// company active ccj exact registered
	ActiveCcjExact int `json:"active_ccj_exact"`

	// company active ccj possible registered
	ActiveCcjPossible int `json:"active_ccj_possible"`

	// company credit rating credit limit
	CreditLimit string `json:"credit_limit"`

	// company incorporation date
	IncorporationDate string `json:"incorporation_date"`

	// company number of writs (previous or negactive information)
	NumberOfWrits int `json:"number_of_writs"`

	// company director people ids
	PeopleIds []string `json:"people_ids"`
	ReportPdf Document `json:"report_pdf"`

	// company credit rating risk score
	RiskScore string `json:"risk_score"`

	// company satisfied ccj
	SatisfiedCcj int `json:"satisfied_ccj"`

	// company status
	Status string `json:"status"`
}

// consumer report
type ConsumerReport struct {
	// consumer active ccj
	ActiveCcj int `json:"active_ccj"`

	// consumer credit score
	CreditScore string `json:"credit_score"`

	// consumer credit score band
	CreditScoreBand string `json:"credit_score_band"`

	// consumer insolvencies at address currently insolvent
	Insolvencies bool `json:"insolvencies"`

	// consumer satisfied ccj
	SatisfiedCcj int `json:"satisfied_ccj"`
}

// ContactInfo defines model for ContactInfo.
type ContactInfo struct {
	ContactAddress *Address `json:"contact_address,omitempty"`
	ContactEmail   *Email   `json:"contact_email,omitempty"`
	ContactName    *string  `json:"contact_name,omitempty"`
	ContactPhone   *string  `json:"contact_phone,omitempty"`
	TradingName    *string  `json:"trading_name,omitempty"`
}

// ContractAgreement defines model for ContractAgreement.
type ContractAgreement struct {
	AgreedTermsAndConditions *ContractAgreementAgreedTermsAndConditions `json:"agreed_terms_and_conditions,omitempty"`
	AgreedToBecomeIarOfKanda *ContractAgreementAgreedToBecomeIarOfKanda `json:"agreed_to_become_iar_of_kanda,omitempty"`
	Contract                 *Document                                  `json:"contract,omitempty"`
	PrintName                *string                                    `json:"print_name,omitempty"`
	SignedAt                 *time.Time                                 `json:"signed_at,omitempty"`
}

// ContractAgreementAgreedTermsAndConditions defines model for ContractAgreement.AgreedTermsAndConditions.
type ContractAgreementAgreedTermsAndConditions string

// ContractAgreementAgreedToBecomeIarOfKanda defines model for ContractAgreement.AgreedToBecomeIarOfKanda.
type ContractAgreementAgreedToBecomeIarOfKanda string

// Credit defines model for Credit.
type Credit struct {
	AdditionalEmploymentDetails *[]EmploymentDetails `json:"additional_employment_details,omitempty"`
	Aid                         *string              `json:"aid,omitempty"`
	Amount                      *Money               `json:"amount,omitempty"`
	BankAccount                 BankAccount          `json:"bank_account"`
	Bid                         *string              `json:"bid,omitempty"`
	Cid                         *string              `json:"cid,omitempty"`
	CreditDocuments             *[]Document          `json:"credit_documents,omitempty"`
	CustomerDetails             CustomerDetails      `json:"customer_details"`
	DepositValue                *Money               `json:"deposit_value,omitempty"`
	Eid                         *string              `json:"eid,omitempty"`
	EmploymentDetails           EmploymentDetails    `json:"employment_details"`
	ExtraApplicants             *[]ApplicantDetails  `json:"extra_applicants,omitempty"`
	FinanceDetails              *FinanceDetails      `json:"finance_details,omitempty"`
	FinanceOption               FinanceRate          `json:"finance_option"`
	FlowType                    *FlowType            `json:"flow_type,omitempty"`
	Id                          *string              `json:"id,omitempty"`
	Kid                         *string              `json:"kid,omitempty"`
	Kind                        *CreditKind          `json:"kind,omitempty"`
	Metadata                    *Metadata            `json:"metadata,omitempty"`
	Oid                         *string              `json:"oid,omitempty"`
	Provider                    *FinanceProvider     `json:"provider,omitempty"`
	QuotedTo                    *string              `json:"quoted_to,omitempty"`
	Signature                   *Signature           `json:"signature,omitempty"`
	State                       *CreditState         `json:"state,omitempty"`
	Tid                         *string              `json:"tid,omitempty"`
	Xid                         *string              `json:"xid,omitempty"`
	Xref                        *string              `json:"xref,omitempty"`
	Xstatus                     *string              `json:"xstatus,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address `json:"address,omitempty"`
	Email     Email    `json:"email"`
	FirstName string   `json:"first_name"`
	LastName  string   `json:"last_name"`
	Phone     string   `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `yyyy-mm-dd`
	DateOfBirth string `json:"date_of_birth"`
	Email       Email  `json:"email"`
	FirstName   string `json:"first_name"`

	// gender
	Gender               Gender                           `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`

	// title
	Title Title `json:"title"`
}

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerOptions defines model for CustomerOptions.
type CustomerOptions struct {
	// checkout option picked by customer, updated only via custom action
	CheckoutOption CheckoutOption `json:"checkout_option"`
	DepositValue   *Money         `json:"deposit_value,omitempty"`
	FinanceOption  FinanceRate    `json:"finance_option"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	DateOfBirth        *string                         `json:"date_of_birth,omitempty"`
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// DirectorVerification defines model for DirectorVerification.
type DirectorVerification struct {
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	Email       Email   `json:"email"`
	FirstName   string  `json:"first_name"`
	HomeAddress Address `json:"home_address"`
	LastName    string  `json:"last_name"`
	Mobile      string  `json:"mobile"`
}

// Document defines model for Document.
type Document struct {
	Aid      *string   `json:"aid,omitempty"`
	Bid      *string   `json:"bid,omitempty"`
	Cid      *string   `json:"cid,omitempty"`
	Content  *string   `json:"content,omitempty"`
	Eid      *string   `json:"eid,omitempty"`
	Expiry   *string   `json:"expiry,omitempty"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
	Tid      *string   `json:"tid,omitempty"`
}

// EmployedDetails defines model for EmployedDetails.
type EmployedDetails struct {
	EmployedType    *EmployedDetailsEmployedType `json:"employed_type,omitempty"`
	EmployerAddress *Address                     `json:"employer_address,omitempty"`
	EmployerName    string                       `json:"employer_name"`
	MainOccupation  string                       `json:"main_occupation"`
	MonthsEmployed  int32                        `json:"months_employed"`
}

// EmployedDetailsEmployedType defines model for EmployedDetails.EmployedType.
type EmployedDetailsEmployedType string

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	EmployedDetails       *EmployedDetails                  `json:"employed_details,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome *Money                            `json:"household_annual_income,omitempty"`
	NotEmployedDetails    *NotEmployedDetails               `json:"not_employed_details,omitempty"`
	RetiredDetails        *RetiredDetails                   `json:"retired_details,omitempty"`
	SelfEmployedDetails   *SelfEmployedDetails              `json:"self_employed_details,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// enterprise
type Enterprise struct {
	Aid *string `json:"aid,omitempty"`
	Bid *string `json:"bid,omitempty"`

	// branch code
	BranchCode *string `json:"branch_code,omitempty"`

	// branding override object
	Branding       *Branding                `json:"branding,omitempty"`
	Cid            *string                  `json:"cid,omitempty"`
	ContactInfo    ContactInfo              `json:"contact_info"`
	Eid            *string                  `json:"eid,omitempty"`
	Emails         *[]Email                 `json:"emails,omitempty"`
	EnterpriseType EnterpriseEnterpriseType `json:"enterprise_type"`

	// enterprise id
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Oid      *string   `json:"oid,omitempty"`

	// subdomain hosted on kanda
	Subdomain *string               `json:"subdomain,omitempty"`
	Users     *[]EnterpriseUserType `json:"users,omitempty"`
}

// EnterpriseEnterpriseType defines model for Enterprise.EnterpriseType.
type EnterpriseEnterpriseType string

// EnterpriseUserRole defines model for EnterpriseUserRole.
type EnterpriseUserRole struct {
	Bid         *string  `json:"bid,omitempty"`
	Branches    []string `json:"branches"`
	Departments []string `json:"departments"`
	Eid         *string  `json:"eid,omitempty"`
	Email       Email    `json:"email"`
	Groups      []string `json:"groups"`
	Id          *string  `json:"id,omitempty"`
	Role        string   `json:"role"`
}

// EnterpriseUserType defines model for EnterpriseUserType.
type EnterpriseUserType struct {
	CommPreferences *CommPreferences       `json:"comm_preferences,omitempty"`
	Email           Email                  `json:"email"`
	Mobile          *string                `json:"mobile,omitempty"`
	Name            string                 `json:"name"`
	Role            EnterpriseUserTypeRole `json:"role"`
}

// EnterpriseUserTypeRole defines model for EnterpriseUserType.Role.
type EnterpriseUserTypeRole string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Event defines model for Event.
type Event struct {
	EventOptions EventOptions `json:"event_options"`
	EventProps   *EventProps  `json:"event_props,omitempty"`

	// Name of the event.  Can specify pageview which is a special type of event. All other names will be treated as custom events.
	Name     EventName      `json:"name"`
	Purchase *PurchaseEvent `json:"purchase,omitempty"`
}

// Name of the event.  Can specify pageview which is a special type of event. All other names will be treated as custom events.
type EventName string

// EventOptions defines model for EventOptions.
type EventOptions struct {
	DeviceId  string    `json:"device_id"`
	Ip        string    `json:"ip"`
	SessionId int       `json:"session_id"`
	Time      time.Time `json:"time"`
	UserId    *string   `json:"user_id,omitempty"`
}

// EventProps defines model for EventProps.
type EventProps struct {
	Api         *ApiEvent          `json:"api,omitempty"`
	Domain      *string            `json:"domain,omitempty"`
	Element     *string            `json:"element,omitempty"`
	ElementId   *string            `json:"element_id,omitempty"`
	ElementPath *string            `json:"element_path,omitempty"`
	Info        *EventProps_Info   `json:"info,omitempty"`
	Params      *EventProps_Params `json:"params,omitempty"`
	Path        *string            `json:"path,omitempty"`
	Referrer    *string            `json:"referrer,omitempty"`
	RequestUser *UserEvent         `json:"request_user,omitempty"`
	Url         *string            `json:"url,omitempty"`
	UserAgent   *string            `json:"user_agent,omitempty"`
}

// EventProps_Info defines model for EventProps.Info.
type EventProps_Info struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EventProps_Params defines model for EventProps.Params.
type EventProps_Params struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Expenditure defines model for Expenditure.
type Expenditure struct {
	ExpenditureType *ExpenditureExpenditureType `json:"expenditure_type,omitempty"`
	MonthlyAmount   *Money                      `json:"monthly_amount,omitempty"`
}

// ExpenditureExpenditureType defines model for Expenditure.ExpenditureType.
type ExpenditureExpenditureType string

// FinanceDetails defines model for FinanceDetails.
type FinanceDetails struct {
	BankrupcyOrIvaInLast5Years *FinanceDetailsBankrupcyOrIvaInLast5Years `json:"bankrupcy_or_iva_in_last_5_years,omitempty"`
	Expenditures               *[]Expenditure                            `json:"expenditures,omitempty"`
	Incomes                    *[]Income                                 `json:"incomes,omitempty"`
}

// FinanceDetailsBankrupcyOrIvaInLast5Years defines model for FinanceDetails.BankrupcyOrIvaInLast5Years.
type FinanceDetailsBankrupcyOrIvaInLast5Years string

// FinanceProvider defines model for FinanceProvider.
type FinanceProvider string

// FinanceRate defines model for FinanceRate.
type FinanceRate struct {
	Apr              *int                `json:"apr,omitempty"`
	AprType          *FinanceRateAprType `json:"apr_type,omitempty"`
	Charge           int                 `json:"charge"`
	CreditLine       *int                `json:"credit_line,omitempty"`
	DeferredDuration *int                `json:"deferred_duration,omitempty"`
	Duration         *int                `json:"duration,omitempty"`
	Enabled          bool                `json:"enabled"`
	Fee              int                 `json:"fee"`
	FinanceTypes     []FinanceType       `json:"finance_types"`
	MaxDepositPct    *int                `json:"max_deposit_pct,omitempty"`
	MaxDepositValue  *int                `json:"max_deposit_value,omitempty"`
	MaxJobValue      *int                `json:"max_job_value,omitempty"`
	MinCharge        *int                `json:"min_charge,omitempty"`
	MinDepositPct    *int                `json:"min_deposit_pct,omitempty"`
	MinDepositValue  *int                `json:"min_deposit_value,omitempty"`
	MinJobValue      *int                `json:"min_job_value,omitempty"`
	Name             string              `json:"name"`
	Provider         FinanceProvider     `json:"provider"`
	WorkTypes        *[]WorkType         `json:"work_types,omitempty"`
}

// FinanceRateAprType defines model for FinanceRate.AprType.
type FinanceRateAprType string

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// FinanceType defines model for FinanceType.
type FinanceType string

// flag
type Flag struct {
	// kanda staff who authored this flag
	Aid       *string    `json:"aid,omitempty"`
	FlaggedAt *time.Time `json:"flagged_at,omitempty"`

	// flag level
	Level FlagLevel `json:"level"`

	// internal remark for this flag
	Remark *string `json:"remark,omitempty"`
}

// flag level
type FlagLevel string

// FlowType defines model for FlowType.
type FlowType string

// gender
type Gender string

// Income defines model for Income.
type Income struct {
	IncomeType     *IncomeIncomeType     `json:"income_type,omitempty"`
	IncomeTypeInfo *IncomeIncomeTypeInfo `json:"income_type_info,omitempty"`
	MonthlyAmount  *Money                `json:"monthly_amount,omitempty"`
}

// IncomeIncomeType defines model for Income.IncomeType.
type IncomeIncomeType string

// IncomeIncomeTypeInfo defines model for Income.IncomeTypeInfo.
type IncomeIncomeTypeInfo string

// InfoAuth defines model for InfoAuth.
type InfoAuth struct {
	ContinueUrl *string `json:"continue_url,omitempty"`
	Email       Email   `json:"email"`
}

// InfoCheckoutRedirect defines model for InfoCheckoutRedirect.
type InfoCheckoutRedirect struct {
	Aid             *string                         `json:"aid,omitempty"`
	Bid             *string                         `json:"bid,omitempty"`
	CheckoutOptions *[]CheckoutOption               `json:"checkout_options,omitempty"`
	Cid             *string                         `json:"cid,omitempty"`
	Customer        Customer                        `json:"customer"`
	DepositType     InfoCheckoutRedirectDepositType `json:"deposit_type"`
	DepositValue    Money                           `json:"deposit_value"`
	Eid             *string                         `json:"eid,omitempty"`

	// specified the enabled rates optionally for the loan
	EnabledRates *[]string     `json:"enabled_rates,omitempty"`
	FlowType     *FlowType     `json:"flow_type,omitempty"`
	Id           *string       `json:"id,omitempty"`
	JobItems     []JobItem     `json:"job_items"`
	Metadata     *Metadata     `json:"metadata,omitempty"`
	Oid          *string       `json:"oid,omitempty"`
	RedirectUrls *RedirectURLs `json:"redirect_urls,omitempty"`

	// The reference for the loan application. Is mainly used for tracking loan applications
	Reference string   `json:"reference"`
	Tid       *string  `json:"tid,omitempty"`
	WorkType  WorkType `json:"work_type"`
}

// InfoCheckoutRedirectDepositType defines model for InfoCheckoutRedirect.DepositType.
type InfoCheckoutRedirectDepositType string

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType         `json:"directors,omitempty"`
	Id             *string             `json:"id,omitempty"`
	LimitedCompany *LimitedCompanyInfo `json:"limited_company,omitempty"`
	Metadata       *Metadata           `json:"metadata,omitempty"`
	SoleTrader     *SoleTraderInfo     `json:"sole_trader,omitempty"`
}

// info entity of all relevant resources
type InfoEntity struct {
	// relevant companies
	Company []Company `json:"company"`

	// relevant credits
	Credit []Credit `json:"credit"`

	// relevant jobs
	Job []Job `json:"job"`

	// relevant monitors
	Monitor []Monitor `json:"monitor"`

	// relevant onboardings
	Onboarding []Onboarding `json:"onboarding"`

	// relevant payments
	Payment []Payment `json:"payment"`
}

// InfoGhost defines model for InfoGhost.
type InfoGhost struct {
	BearerToken *string `json:"bearer_token,omitempty"`
	CustomRole  *string `json:"custom_role,omitempty"`
	CustomToken *string `json:"custom_token,omitempty"`
	Email       Email   `json:"email"`
}

// InfoIP defines model for InfoIP.
type InfoIP struct {
	Ipv4 string `json:"ipv4"`
}

// InfoLead defines model for InfoLead.
type InfoLead struct {
	ContactInfo ContactInfo `json:"contact_info"`
	FlowType    *FlowType   `json:"flow_type,omitempty"`
	Id          *string     `json:"id,omitempty"`
}

// InfoLegacyRedirect defines model for InfoLegacyRedirect.
type InfoLegacyRedirect struct {
	Aid     *string `json:"aid,omitempty"`
	Bid     *string `json:"bid,omitempty"`
	Cid     *string `json:"cid,omitempty"`
	Deposit *Pence  `json:"deposit,omitempty"`

	// The description of the goods.
	DescriptionOfGoods string  `json:"description_of_goods"`
	Eid                *string `json:"eid,omitempty"`

	// The email of the customer applying for the loan
	Email Email `json:"email"`

	// specified the enabled rates for the loan
	EnabledRates *[]string `json:"enabled_rates,omitempty"`

	// Your enterprise ID
	EnterpriseId string `json:"enterprise_id"`

	// The first name of the customer applying for the loan
	FirstName *string `json:"first_name,omitempty"`
	Id        *string `json:"id,omitempty"`

	// The last name of the customer applying for the loan
	LastName *string   `json:"last_name,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// The mobile number of the customer applying for the loan
	Mobile       *string       `json:"mobile,omitempty"`
	Oid          *string       `json:"oid,omitempty"`
	Price        Pence         `json:"price"`
	RedirectUrls *RedirectURLs `json:"redirect_urls,omitempty"`

	// The reference for the loan application. Is mainly used for tracking loan applications
	Reference string    `json:"reference"`
	Tid       *string   `json:"tid,omitempty"`
	WorkType  *WorkType `json:"work_type,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Email    *Email  `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
	Referrer *string `json:"referrer,omitempty"`
}

// company onboarding
type InfoOnboarding struct {
	Cid *string `json:"cid,omitempty"`

	// approval
	CurrentApproval *Approval        `json:"current_approval,omitempty"`
	CurrentStage    *OnboardingStage `json:"current_stage,omitempty"`
	Id              *string          `json:"id,omitempty"`
	Metadata        *Metadata        `json:"metadata,omitempty"`
}

// info partner branding
type InfoPartnerBranding struct {
	// branding override object
	Branding    *Branding   `json:"branding,omitempty"`
	ContactInfo ContactInfo `json:"contact_info"`

	// partner id
	Id string `json:"id"`
}

// InfoQuery defines model for InfoQuery.
type InfoQuery struct {
	Query  string  `json:"query"`
	Result *string `json:"result,omitempty"`
}

// InfoSession defines model for InfoSession.
type InfoSession struct {
	Code        string  `json:"code"`
	CustomToken *string `json:"custom_token,omitempty"`
}

// InfoStats defines model for InfoStats.
type InfoStats struct {
	Id                         *string `json:"id,omitempty"`
	JobsAppliedForFinance      int     `json:"jobs_applied_for_finance"`
	JobsApprovalRate           Pence   `json:"jobs_approval_rate"`
	JobsApprovedForFinance     int     `json:"jobs_approved_for_finance"`
	JobsAverageValueOfApproved Pence   `json:"jobs_average_value_of_approved"`
	JobsSent                   int     `json:"jobs_sent"`
	JobsTotalRevenueOfApproved Pence   `json:"jobs_total_revenue_of_approved"`
}

// InfoValidationEmail defines model for InfoValidationEmail.
type InfoValidationEmail struct {
	Email      *Email                      `json:"email,omitempty"`
	Source     *string                     `json:"source,omitempty"`
	Suggestion *string                     `json:"suggestion,omitempty"`
	Verdict    *InfoValidationEmailVerdict `json:"verdict,omitempty"`
}

// InfoValidationEmailVerdict defines model for InfoValidationEmail.Verdict.
type InfoValidationEmailVerdict string

// Job defines model for Job.
type Job struct {
	Aid             *string           `json:"aid,omitempty"`
	Archived        *JobArchived      `json:"archived,omitempty"`
	Bid             *string           `json:"bid,omitempty"`
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	CustomerOptions *CustomerOptions  `json:"customer_options,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	Eid             *string           `json:"eid,omitempty"`
	FinanceOptions  *[]FinanceRate    `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	FlowType        *FlowType         `json:"flow_type,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobDocuments    *[]Document       `json:"job_documents,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	JobType         *JobJobType       `json:"job_type,omitempty"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Payments        *[]Payment        `json:"payments,omitempty"`
	QuotedTo        *string           `json:"quoted_to,omitempty"`
	RedirectUrls    *RedirectURLs     `json:"redirect_urls,omitempty"`
	SatNote         *SatNote          `json:"sat_note,omitempty"`
	SatNoteTimeline *SatNoteTimeline  `json:"sat_note_timeline,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Tid             *string           `json:"tid,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
	WorkType        *WorkType         `json:"work_type,omitempty"`
	Xid             *string           `json:"xid,omitempty"`
	Xref            *string           `json:"xref,omitempty"`
}

// JobArchived defines model for Job.Archived.
type JobArchived string

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobJobType defines model for Job.JobType.
type JobJobType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobCompanyInfo defines model for JobCompanyInfo.
type JobCompanyInfo struct {
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	CompanyLogo *Document    `json:"company_logo,omitempty"`
	CompanyName *string      `json:"company_name,omitempty"`
	ContactInfo *ContactInfo `json:"contact_info,omitempty"`
	Id          *string      `json:"id,omitempty"`
	VatNumber   *string      `json:"vat_number,omitempty"`
}

// JobCreditState defines model for JobCreditState.
type JobCreditState struct {
	CurrentStatus         *JobCreditStateCurrentStatus `json:"current_status,omitempty"`
	HasFinanceApplication *bool                        `json:"has_finance_application,omitempty"`
	Id                    *string                      `json:"id,omitempty"`
}

// JobCreditStateCurrentStatus defines model for JobCreditState.CurrentStatus.
type JobCreditStateCurrentStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Style         *JobItemStyle   `json:"style,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemStyle defines model for JobItem.Style.
type JobItemStyle string

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// JobOverride defines model for JobOverride.
type JobOverride struct {
	Action          JobOverrideAction `json:"action"`
	CustomerOptions *CustomerOptions  `json:"customer_options,omitempty"`
	Xref            *string           `json:"xref,omitempty"`
}

// JobOverrideAction defines model for JobOverride.Action.
type JobOverrideAction string

// LatLng defines model for LatLng.
type LatLng struct {
	Lat float32 `json:"lat"`
	Lng float32 `json:"lng"`
}

// consumer quote
type Lead struct {
	Accepted        []string       `json:"accepted"`
	Aid             *string        `json:"aid,omitempty"`
	Bid             *string        `json:"bid,omitempty"`
	Budget          *Money         `json:"budget,omitempty"`
	Cid             *string        `json:"cid,omitempty"`
	Connected       []string       `json:"connected"`
	Eid             *string        `json:"eid,omitempty"`
	ExpiredAt       time.Time      `json:"expired_at"`
	FinanceOptions  *[]FinanceRate `json:"finance_options,omitempty"`
	FlowType        *FlowType      `json:"flow_type,omitempty"`
	Id              *string        `json:"id,omitempty"`
	InviteInfo      *ContactInfo   `json:"invite_info,omitempty"`
	LeadApplicant   *LeadApplicant `json:"lead_applicant,omitempty"`
	LeadQuote       *LeadQuote     `json:"lead_quote,omitempty"`
	LeadTrade       *LeadTrade     `json:"lead_trade,omitempty"`
	MaxCreditAmount *Money         `json:"max_credit_amount,omitempty"`
	Metadata        *Metadata      `json:"metadata,omitempty"`
	Oid             *string        `json:"oid,omitempty"`
	Referrer        *string        `json:"referrer,omitempty"`
	Source          LeadSource     `json:"source"`
	Status          LeadStatus     `json:"status"`
	Tid             *string        `json:"tid,omitempty"`
	Xid             *string        `json:"xid,omitempty"`
	Xref            *string        `json:"xref,omitempty"`
}

// LeadSource defines model for Lead.Source.
type LeadSource string

// LeadStatus defines model for Lead.Status.
type LeadStatus string

// LeadApplicant defines model for LeadApplicant.
type LeadApplicant struct {
	AdditionalEmploymentDetails *[]EmploymentDetails `json:"additional_employment_details,omitempty"`
	BankAccount                 *BankAccount         `json:"bank_account,omitempty"`
	Budget                      *Money               `json:"budget,omitempty"`
	CustomerDetails             CustomerDetails      `json:"customer_details"`
	EmploymentDetails           EmploymentDetails    `json:"employment_details"`
	ExtraApplicants             *[]ApplicantDetails  `json:"extra_applicants,omitempty"`
	FinanceDetails              FinanceDetails       `json:"finance_details"`
}

// LeadJobSummary defines model for LeadJobSummary.
type LeadJobSummary struct {
	Aid           *string    `json:"aid,omitempty"`
	Archived      string     `json:"archived"`
	Bid           *string    `json:"bid,omitempty"`
	Cid           *string    `json:"cid,omitempty"`
	Eid           *string    `json:"eid,omitempty"`
	FinanceStatus string     `json:"finance_status"`
	Id            string     `json:"id"`
	Oid           *string    `json:"oid,omitempty"`
	QuotedTo      string     `json:"quoted_to"`
	Rid           *string    `json:"rid,omitempty"`
	Status        string     `json:"status"`
	Tid           *string    `json:"tid,omitempty"`
	Total         MoneyTotal `json:"total"`
}

// LeadQuote defines model for LeadQuote.
type LeadQuote struct {
	Deposit       *Money       `json:"deposit,omitempty"`
	Description   string       `json:"description"`
	FinanceOption *FinanceRate `json:"finance_option,omitempty"`
	JobItems      *[]JobItem   `json:"job_items,omitempty"`
	Reference     *string      `json:"reference,omitempty"`
	Total         *MoneyTotal  `json:"total,omitempty"`

	// when do you need the work finished by?
	WorkFinishedBy LeadQuoteWorkFinishedBy `json:"work_finished_by"`
	WorkType       WorkType                `json:"work_type"`
}

// when do you need the work finished by?
type LeadQuoteWorkFinishedBy string

// LeadTrade defines model for LeadTrade.
type LeadTrade struct {
	Address     *Address `json:"address,omitempty"`
	Email       Email    `json:"email"`
	Mobile      string   `json:"mobile"`
	TradingName string   `json:"trading_name"`
}

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// internal monitoring with flags
type Monitor struct {
	// flag
	Flag *Flag `json:"flag,omitempty"`

	// flags
	Flags    *[]Flag   `json:"flags,omitempty"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
}

// NotEmployedDetails defines model for NotEmployedDetails.
type NotEmployedDetails struct {
	MonthsNotEmployed int32                            `json:"months_not_employed"`
	SourceOfIncome    NotEmployedDetailsSourceOfIncome `json:"source_of_income"`
}

// NotEmployedDetailsSourceOfIncome defines model for NotEmployedDetails.SourceOfIncome.
type NotEmployedDetailsSourceOfIncome string

// company onboarding
type Onboarding struct {
	Aid *string `json:"aid,omitempty"`
	Cid *string `json:"cid,omitempty"`

	// company review stage
	CompanyReview *struct {
		// approval
		Approval *Approval `json:"approval,omitempty"`

		// company onboarding report
		Report *CompanyReport `json:"report,omitempty"`
	} `json:"company_review,omitempty"`

	// consumer review stage
	ConsumerReview *struct {
		// approval
		Approval *Approval                          `json:"approval,omitempty"`
		Reports  *Onboarding_ConsumerReview_Reports `json:"reports,omitempty"`
	} `json:"consumer_review,omitempty"`
	CurrentStage *OnboardingStage `json:"current_stage,omitempty"`

	// company director review stage
	DirectorReview *struct {
		// approval
		Approval *Approval                          `json:"approval,omitempty"`
		Reports  *Onboarding_DirectorReview_Reports `json:"reports,omitempty"`
	} `json:"director_review,omitempty"`

	// fca awaiting approval check and review
	FcaAwaitingApproval *struct {
		// approval
		Approval *Approval `json:"approval,omitempty"`
	} `json:"fca_awaiting_approval,omitempty"`

	// fca upload check and review
	FcaUpload *struct {
		// approval
		Approval *Approval `json:"approval,omitempty"`
	} `json:"fca_upload,omitempty"`
	Id *string `json:"id,omitempty"`

	// insurance document and expiry check and review
	InsuranceReview *struct {
		// approval
		Approval *Approval `json:"approval,omitempty"`
	} `json:"insurance_review,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Oid      *string   `json:"oid,omitempty"`

	// online presence check and review
	OnlineReview *struct {
		// approval
		Approval *Approval `json:"approval,omitempty"`
	} `json:"online_review,omitempty"`

	// owner review stage
	OwnerReview *struct {
		// approval
		Approval *Approval                       `json:"approval,omitempty"`
		Reports  *Onboarding_OwnerReview_Reports `json:"reports,omitempty"`
	} `json:"owner_review,omitempty"`

	// shared and persistent note for staff to see
	SharedNote *string            `json:"shared_note,omitempty"`
	Stages     *[]OnboardingStage `json:"stages,omitempty"`

	// trade info check and review
	TradeReview *struct {
		// approval
		Approval *Approval `json:"approval,omitempty"`
	} `json:"trade_review,omitempty"`
}

// Onboarding_ConsumerReview_Reports defines model for Onboarding.ConsumerReview.Reports.
type Onboarding_ConsumerReview_Reports struct {
	AdditionalProperties map[string]ConsumerReport `json:"-"`
}

// Onboarding_DirectorReview_Reports defines model for Onboarding.DirectorReview.Reports.
type Onboarding_DirectorReview_Reports struct {
	AdditionalProperties map[string]CompanyDirectorReport `json:"-"`
}

// Onboarding_OwnerReview_Reports defines model for Onboarding.OwnerReview.Reports.
type Onboarding_OwnerReview_Reports struct {
	AdditionalProperties map[string]OwnerReport `json:"-"`
}

// OnboardingStage defines model for OnboardingStage.
type OnboardingStage string

// OnlinePresence defines model for OnlinePresence.
type OnlinePresence struct {
	Facebook *string               `json:"facebook,omitempty"`
	Google   *string               `json:"google,omitempty"`
	QOnline  OnlinePresenceQOnline `json:"q_online"`
	Website  *string               `json:"website,omitempty"`
}

// OnlinePresenceQOnline defines model for OnlinePresence.QOnline.
type OnlinePresenceQOnline string

// owner report with checks for AML + AdverseMedia
type OwnerReport struct {
	// Adverse Media
	AdverseMedia *string `json:"adverse_media,omitempty"`

	// Edited Electoral Roll
	EditedElectoralRoll *string `json:"edited_electoral_roll,omitempty"`

	// Enhanced International Saction Warnings
	EnhancedInternationalSactionWarnings *string `json:"enhanced_international_saction_warnings,omitempty"`

	// International Sanctions Warnings
	InternationalSanctionsWarnings *string `json:"international_sanctions_warnings,omitempty"`

	// National ID Register
	NationalIdRegister *string `json:"national_id_register,omitempty"`

	// Overall Pass
	OverallPass *string `json:"overall_pass,omitempty"`

	// UK Credit AML Warnings
	UkCreditAmlWarnings *string `json:"uk_credit_aml_warnings,omitempty"`

	// UK Credit Header
	UkCreditHeader *string `json:"uk_credit_header,omitempty"`
}

// partner
type Partner struct {
	Aid *string `json:"aid,omitempty"`

	// branding override object
	Branding *Branding `json:"branding,omitempty"`

	// referral signed up company ids
	Cids        *[]string   `json:"cids,omitempty"`
	ContactInfo ContactInfo `json:"contact_info"`

	// reward in tiered system
	CurrentReward *Reward  `json:"current_reward,omitempty"`
	Emails        *[]Email `json:"emails,omitempty"`

	// partner id
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Oid      *string   `json:"oid,omitempty"`

	// referrals with their lifecycle + status
	Referrals *[]Referral `json:"referrals,omitempty"`
	Rewards   *[]Reward   `json:"rewards,omitempty"`

	// current referral stats
	Stats *struct {
		// number of referral company activations
		Activations *int32 `json:"activations,omitempty"`

		// number of tradesperson signups to unlock
		Signups *int32 `json:"signups,omitempty"`

		// number of referral company subscribers
		Subscribers *int32 `json:"subscribers,omitempty"`

		// number of referrals made
		TotalReferrals *int32 `json:"total_referrals,omitempty"`

		// number of referral company verifications
		Verifications *int32 `json:"verifications,omitempty"`
	} `json:"stats,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	Aid           *string        `json:"aid,omitempty"`
	Bid           *string        `json:"bid,omitempty"`
	Cid           *string        `json:"cid,omitempty"`
	Eid           *string        `json:"eid,omitempty"`
	FlowType      *FlowType      `json:"flow_type,omitempty"`
	Id            *string        `json:"id,omitempty"`
	Kid           *string        `json:"kid,omitempty"`
	Kind          *PaymentKind   `json:"kind,omitempty"`
	Metadata      *Metadata      `json:"metadata,omitempty"`
	Oid           *string        `json:"oid,omitempty"`
	PaymentOption PaymentOption  `json:"payment_option"`
	QuotedTo      *string        `json:"quoted_to,omitempty"`
	Status        *PaymentStatus `json:"status,omitempty"`
	Tid           *string        `json:"tid,omitempty"`
	Xid           *string        `json:"xid,omitempty"`
	Xref          *string        `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentOption defines model for PaymentOption.
type PaymentOption struct {
	Amount        Money                      `json:"amount"`
	PaymentMethod PaymentOptionPaymentMethod `json:"payment_method"`
	Provider      *FinanceProvider           `json:"provider,omitempty"`
}

// PaymentOptionPaymentMethod defines model for PaymentOption.PaymentMethod.
type PaymentOptionPaymentMethod string

// Pence defines model for Pence.
type Pence = int32

// PreferenceOption defines model for PreferenceOption.
type PreferenceOption string

// PurchaseEvent defines model for PurchaseEvent.
type PurchaseEvent struct {
	Kid     *string       `json:"kid,omitempty"`
	Kind    string        `json:"kind"`
	Payment PaymentOption `json:"payment"`
	Pid     *string       `json:"pid,omitempty"`
}

// Quiz defines model for Quiz.
type Quiz struct {
	Answers       []string `json:"answers"`
	Category      Category `json:"category"`
	CorrectAnswer *string  `json:"correct_answer,omitempty"`
	Question      string   `json:"question"`
	UserAnswer    *string  `json:"user_answer,omitempty"`
	VideoId       *string  `json:"videoId,omitempty"`
}

// Rate defines model for Rate.
type Rate struct {
	FinanceRates []FinanceRate `json:"finance_rates"`
	Id           *string       `json:"id,omitempty"`
	Metadata     *Metadata     `json:"metadata,omitempty"`
}

// RedirectURLs defines model for RedirectURLs.
type RedirectURLs struct {
	CheckoutUrl *string `json:"checkout_url,omitempty"`
	FailureUrl  *string `json:"failure_url,omitempty"`
	SuccessUrl  *string `json:"success_url,omitempty"`
	WebhookUrl  *string `json:"webhook_url,omitempty"`
}

// referral summary
type Referral struct {
	// referral company billing status
	Billing *string `json:"billing,omitempty"`

	// referral signed up company id
	Cid   *string `json:"cid,omitempty"`
	Email Email   `json:"email"`

	// referrer company id
	From *string `json:"from,omitempty"`

	// referral company lifecycle
	Lifecycle   *string   `json:"lifecycle,omitempty"`
	Metadata    *Metadata `json:"metadata,omitempty"`
	Mobile      *string   `json:"mobile,omitempty"`
	Name        string    `json:"name"`
	TradingName *string   `json:"trading_name,omitempty"`
}

// Result defines model for Result.
type Result string

// RetiredDetails defines model for RetiredDetails.
type RetiredDetails struct {
	MonthsRetired int32 `json:"months_retired"`
}

// reward in tiered system
type Reward struct {
	// number of referral company activations to unlock
	Activations *int32 `json:"activations,omitempty"`

	// reward name
	Name                    string `json:"name"`
	RatesReductionPct       *int   `json:"rates_reduction_pct,omitempty"`
	RatesReductionValue     *int   `json:"rates_reduction_value,omitempty"`
	ReferralCommissionPct   *int   `json:"referral_commission_pct,omitempty"`
	ReferralCommissionValue *int   `json:"referral_commission_value,omitempty"`

	// number of tradesperson signups to unlock
	Signups *int32 `json:"signups,omitempty"`

	// number of referral company subscribers to unlock
	Subscribers *int32 `json:"subscribers,omitempty"`

	// number of referral company verifications to unlock
	Verifications *int32 `json:"verifications,omitempty"`
}

// SatNote defines model for SatNote.
type SatNote struct {
	Certificate   Document             `json:"certificate"`
	QAdvice       SatNoteQAdvice       `json:"q_advice"`
	QApplication  SatNoteQApplication  `json:"q_application"`
	QAvailability SatNoteQAvailability `json:"q_availability"`
	QEasiness     SatNoteQEasiness     `json:"q_easiness"`
	QPressure     SatNoteQPressure     `json:"q_pressure"`
	QRate         *SatNoteQRate        `json:"q_rate,omitempty"`
	QSaving       *SatNoteQSaving      `json:"q_saving,omitempty"`
	Signature     Signature            `json:"signature"`
}

// SatNoteQAdvice defines model for SatNote.QAdvice.
type SatNoteQAdvice string

// SatNoteQApplication defines model for SatNote.QApplication.
type SatNoteQApplication string

// SatNoteQAvailability defines model for SatNote.QAvailability.
type SatNoteQAvailability string

// SatNoteQEasiness defines model for SatNote.QEasiness.
type SatNoteQEasiness string

// SatNoteQPressure defines model for SatNote.QPressure.
type SatNoteQPressure string

// SatNoteQRate defines model for SatNote.QRate.
type SatNoteQRate string

// SatNoteQSaving defines model for SatNote.QSaving.
type SatNoteQSaving string

// SatNoteTimeline defines model for SatNoteTimeline.
type SatNoteTimeline struct {
	SentAt   *time.Time `json:"sent_at,omitempty"`
	SignedAt *time.Time `json:"signed_at,omitempty"`
	ViewedAt *time.Time `json:"viewed_at,omitempty"`
}

// SelfEmployedDetails defines model for SelfEmployedDetails.
type SelfEmployedDetails struct {
	BusinessAddress    *Address                             `json:"business_address,omitempty"`
	BusinessName       string                               `json:"business_name"`
	MonthsSelfEmployed int32                                `json:"months_self_employed"`
	SelfEmployedType   *SelfEmployedDetailsSelfEmployedType `json:"self_employed_type,omitempty"`
	TypeOfBusiness     string                               `json:"type_of_business"`
}

// SelfEmployedDetailsSelfEmployedType defines model for SelfEmployedDetails.SelfEmployedType.
type SelfEmployedDetailsSelfEmployedType string

// SignDocument defines model for SignDocument.
type SignDocument struct {
	Quote     Document  `json:"quote"`
	Signature Signature `json:"signature"`
}

// Signature defines model for Signature.
type Signature struct {
	Fingerprint string          `json:"fingerprint"`
	Signed      SignatureSigned `json:"signed"`
}

// SignatureSigned defines model for Signature.Signed.
type SignatureSigned string

// SolarCompanyInfo defines model for SolarCompanyInfo.
type SolarCompanyInfo struct {
	ElectricalTradeAssociation       SolarCompanyInfoElectricalTradeAssociation `json:"electrical_trade_association"`
	ElectricalTradeAssociationNumber *string                                    `json:"electrical_trade_association_number,omitempty"`
	EpvsRegistrationNumber           string                                     `json:"epvs_registration_number"`
	SolarTradeAssociation            SolarCompanyInfoSolarTradeAssociation      `json:"solar_trade_association"`
	SolarTradeAssociationNumber      string                                     `json:"solar_trade_association_number"`
}

// SolarCompanyInfoElectricalTradeAssociation defines model for SolarCompanyInfo.ElectricalTradeAssociation.
type SolarCompanyInfoElectricalTradeAssociation string

// SolarCompanyInfoSolarTradeAssociation defines model for SolarCompanyInfo.SolarTradeAssociation.
type SolarCompanyInfoSolarTradeAssociation string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber *string `json:"national_insurance_number,omitempty"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	Aid              *string               `json:"aid,omitempty"`
	Amount           *Money                `json:"amount,omitempty"`
	AuthorisationUrl *string               `json:"authorisation_url,omitempty"`
	Billing          *string               `json:"billing,omitempty"`
	BillingStatus    *string               `json:"billing_status,omitempty"`
	Cid              *string               `json:"cid,omitempty"`
	DayOfMonth       *int32                `json:"day_of_month,omitempty"`
	Id               *string               `json:"id,omitempty"`
	Interval         *SubscriptionInterval `json:"interval,omitempty"`
	Mandate          *string               `json:"mandate,omitempty"`
	MandateStatus    *string               `json:"mandate_status,omitempty"`
	Metadata         *Metadata             `json:"metadata,omitempty"`
	Oid              *string               `json:"oid,omitempty"`
	Xid              *string               `json:"xid,omitempty"`
	Xref             *string               `json:"xref,omitempty"`
}

// SubscriptionInterval defines model for Subscription.Interval.
type SubscriptionInterval string

// Tally defines model for Tally.
type Tally struct {
	Failure *string `json:"failure,omitempty"`
	Id      string  `json:"id"`
}

// title
type Title string

// matching a lead to trades by given filter
type TradeFilter struct {
	// matching trades within given distance in miles
	Distance float32 `json:"distance"`

	// matching keyword
	Keyword *string `json:"keyword,omitempty"`

	// matching trades with given work types
	WorkTypes *[]WorkType `json:"work_types,omitempty"`
}

// TradeSummary defines model for TradeSummary.
type TradeSummary struct {
	CompanyLogo *Document    `json:"company_logo,omitempty"`
	ContactInfo *ContactInfo `json:"contact_info,omitempty"`
	Distance    *float32     `json:"distance,omitempty"`
	Id          *string      `json:"id,omitempty"`
	LatLng      *LatLng      `json:"lat_lng,omitempty"`
	TradingType *string      `json:"trading_type,omitempty"`
	WorkTypes   *[]WorkType  `json:"work_types,omitempty"`
}

// Training defines model for Training.
type Training struct {
	Aid        *string    `json:"aid,omitempty"`
	Bid        *string    `json:"bid,omitempty"`
	Categories []Category `json:"categories"`
	Cid        *string    `json:"cid,omitempty"`
	Eid        *string    `json:"eid,omitempty"`
	Id         *string    `json:"id,omitempty"`
	Metadata   *Metadata  `json:"metadata,omitempty"`
	Oid        *string    `json:"oid,omitempty"`
	Quizzes    *[]Quiz    `json:"quizzes,omitempty"`
	Result     *Result    `json:"result,omitempty"`
}

// UTM defines model for UTM.
type UTM struct {
	UtmCampaign *string `json:"utm_campaign,omitempty"`
	UtmContent  *string `json:"utm_content,omitempty"`
	UtmMedium   *string `json:"utm_medium,omitempty"`
	UtmSource   string  `json:"utm_source"`
	UtmTerm     *string `json:"utm_term,omitempty"`
}

// UserEvent defines model for UserEvent.
type UserEvent struct {
	Cid      *string           `json:"cid,omitempty"`
	Email    Email             `json:"email"`
	Id       string            `json:"id"`
	Mobile   *string           `json:"mobile,omitempty"`
	Name     string            `json:"name"`
	Provider UserEventProvider `json:"provider"`
	Role     *string           `json:"role,omitempty"`
	Verified bool              `json:"verified"`
}

// UserEventProvider defines model for UserEvent.Provider.
type UserEventProvider string

// UserType defines model for UserType.
type UserType struct {
	CommPreferences *CommPreferences `json:"comm_preferences,omitempty"`
	DirectorInfo    *DirectorInfo    `json:"director_info,omitempty"`
	Email           Email            `json:"email"`
	FirstName       string           `json:"first_name"`
	LastName        *string          `json:"last_name,omitempty"`
	Mobile          *string          `json:"mobile,omitempty"`
	Role            UserTypeRole     `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// company welcome skip banner
type WelcomeSkipBanner struct {
	AdvertFinanceCalculator *WelcomeSkipBannerAdvertFinanceCalculator `json:"advert_finance_calculator,omitempty"`
	DirectorVerification    *WelcomeSkipBannerDirectorVerification    `json:"director_verification,omitempty"`
	InviteTeamMember        *WelcomeSkipBannerInviteTeamMember        `json:"invite_team_member,omitempty"`
	UpdateWebsite           *WelcomeSkipBannerUpdateWebsite           `json:"update_website,omitempty"`
}

// WelcomeSkipBannerAdvertFinanceCalculator defines model for WelcomeSkipBanner.AdvertFinanceCalculator.
type WelcomeSkipBannerAdvertFinanceCalculator string

// WelcomeSkipBannerDirectorVerification defines model for WelcomeSkipBanner.DirectorVerification.
type WelcomeSkipBannerDirectorVerification string

// WelcomeSkipBannerInviteTeamMember defines model for WelcomeSkipBanner.InviteTeamMember.
type WelcomeSkipBannerInviteTeamMember string

// WelcomeSkipBannerUpdateWebsite defines model for WelcomeSkipBanner.UpdateWebsite.
type WelcomeSkipBannerUpdateWebsite string

// WorkType defines model for WorkType.
type WorkType string

// query format to indicate response format
type Format string

// query filter in colon path+value pairs, with comma separated filters
type Q = string

// kanda bid
type XKandaBid = string

// kanda cid
type XKandaCid = string

// kanda eid
type XKandaEid = string

// kanda protected request indicator
type XKandaProtected string

// kanda tid
type XKandaTid = string

// GetCompaniesParams defines parameters for GetCompanies.
type GetCompaniesParams struct {
	Format *GetCompaniesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                        `form:"q,omitempty" json:"q,omitempty"`
}

// GetCompaniesParamsFormat defines parameters for GetCompanies.
type GetCompaniesParamsFormat string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody = Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody = Company

// DeclineCompanyParams defines parameters for DeclineCompany.
type DeclineCompanyParams struct {
	// reject or decline reason
	Reason DeclineCompanyParamsReason `form:"reason" json:"reason"`
}

// DeclineCompanyParamsReason defines parameters for DeclineCompany.
type DeclineCompanyParamsReason string

// GetCompanyDirectorVerificationParams defines parameters for GetCompanyDirectorVerification.
type GetCompanyDirectorVerificationParams struct {
	// filter owner / director by email
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PostCompanyDirectorVerificationJSONBody defines parameters for PostCompanyDirectorVerification.
type PostCompanyDirectorVerificationJSONBody = DirectorVerification

// PostCompanyDirectorVerificationParams defines parameters for PostCompanyDirectorVerification.
type PostCompanyDirectorVerificationParams struct {
	// owner / director email
	Email string `form:"email" json:"email"`
}

// PostCompanyReferralsJSONBody defines parameters for PostCompanyReferrals.
type PostCompanyReferralsJSONBody = []Referral

// GetCreditsParams defines parameters for GetCredits.
type GetCreditsParams struct {
	Format *GetCreditsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                      `form:"q,omitempty" json:"q,omitempty"`
}

// GetCreditsParamsFormat defines parameters for GetCredits.
type GetCreditsParamsFormat string

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody = Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody = Credit

// SignCreditJSONBody defines parameters for SignCredit.
type SignCreditJSONBody = SignDocument

// GetDocumentsParams defines parameters for GetDocuments.
type GetDocumentsParams struct {
	Format *GetDocumentsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                        `form:"q,omitempty" json:"q,omitempty"`
}

// GetDocumentsParamsFormat defines parameters for GetDocuments.
type GetDocumentsParamsFormat string

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody = Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody = Document

// GetEnterprisesParams defines parameters for GetEnterprises.
type GetEnterprisesParams struct {
	Format *GetEnterprisesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                          `form:"q,omitempty" json:"q,omitempty"`
}

// GetEnterprisesParamsFormat defines parameters for GetEnterprises.
type GetEnterprisesParamsFormat string

// PostEnterpriseJSONBody defines parameters for PostEnterprise.
type PostEnterpriseJSONBody = Enterprise

// PutEnterpriseJSONBody defines parameters for PutEnterprise.
type PutEnterpriseJSONBody = Enterprise

// PostEnterpriseBranchesJSONBody defines parameters for PostEnterpriseBranches.
type PostEnterpriseBranchesJSONBody = []Enterprise

// PostEventJSONBody defines parameters for PostEvent.
type PostEventJSONBody = Event

// InfoAuthJSONBody defines parameters for InfoAuth.
type InfoAuthJSONBody = InfoAuth

// InfoPutCacheJSONBody defines parameters for InfoPutCache.
type InfoPutCacheJSONBody = Cache

// InfoCheckoutRedirectJSONBody defines parameters for InfoCheckoutRedirect.
type InfoCheckoutRedirectJSONBody = InfoCheckoutRedirect

// InfoClaimAccountJSONBody defines parameters for InfoClaimAccount.
type InfoClaimAccountJSONBody = InfoAuth

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCreditJSONBody defines parameters for InfoCredit.
type InfoCreditJSONBody = Credit

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// InfoDirectorJSONBody defines parameters for InfoDirector.
type InfoDirectorJSONBody = UserType

// InfoDirectorParams defines parameters for InfoDirector.
type InfoDirectorParams struct {
	// info director report to run, default to run all
	Report *InfoDirectorParamsReport `form:"report,omitempty" json:"report,omitempty"`
}

// InfoDirectorParamsReport defines parameters for InfoDirector.
type InfoDirectorParamsReport string

// InfoEnterpriseParams defines parameters for InfoEnterprise.
type InfoEnterpriseParams struct {
	// enterprise id
	Eid *string `form:"eid,omitempty" json:"eid,omitempty"`

	// enterprise branch id
	Bid *string `form:"bid,omitempty" json:"bid,omitempty"`

	// enterprise / branch subdomain
	Subdomain *string `form:"subdomain,omitempty" json:"subdomain,omitempty"`

	// enterprise branch code
	BranchCode *string `form:"branch_code,omitempty" json:"branch_code,omitempty"`
}

// InfoEnterpriseRoleJSONBody defines parameters for InfoEnterpriseRole.
type InfoEnterpriseRoleJSONBody = EnterpriseUserRole

// GetInfoEntityParams defines parameters for GetInfoEntity.
type GetInfoEntityParams struct {
	// resource id
	Id string `form:"id" json:"id"`

	// resource kind
	Kind GetInfoEntityParamsKind `form:"kind" json:"kind"`
}

// GetInfoEntityParamsKind defines parameters for GetInfoEntity.
type GetInfoEntityParamsKind string

// InfoGhostJSONBody defines parameters for InfoGhost.
type InfoGhostJSONBody = InfoGhost

// InfoLeadJSONBody defines parameters for InfoLead.
type InfoLeadJSONBody = InfoLead

// InfoLeadParams defines parameters for InfoLead.
type InfoLeadParams struct {
	// enterprise id
	Eid *string `form:"eid,omitempty" json:"eid,omitempty"`

	// enterprise branch id
	Bid *string `form:"bid,omitempty" json:"bid,omitempty"`

	// enterprise / branch subdomain
	Subdomain *string `form:"subdomain,omitempty" json:"subdomain,omitempty"`

	// enterprise branch code
	BranchCode *string `form:"branch_code,omitempty" json:"branch_code,omitempty"`
}

// InfoLegacyRedirectJSONBody defines parameters for InfoLegacyRedirect.
type InfoLegacyRedirectJSONBody = InfoLegacyRedirect

// InfoPartnerBrandingParams defines parameters for InfoPartnerBranding.
type InfoPartnerBrandingParams struct {
	// partner id
	Id string `form:"id" json:"id"`
}

// InfoPasswordJSONBody defines parameters for InfoPassword.
type InfoPasswordJSONBody = InfoAuth

// InfoQueryJSONBody defines parameters for InfoQuery.
type InfoQueryJSONBody = InfoQuery

// InfoRateParams defines parameters for InfoRate.
type InfoRateParams struct {
	// query matching cid
	Cid *string `form:"cid,omitempty" json:"cid,omitempty"`
}

// InfoSessionJSONBody defines parameters for InfoSession.
type InfoSessionJSONBody = InfoSession

// InfoStatsParams defines parameters for InfoStats.
type InfoStatsParams struct {
	Format *InfoStatsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                     `form:"q,omitempty" json:"q,omitempty"`
}

// InfoStatsParamsFormat defines parameters for InfoStats.
type InfoStatsParamsFormat string

// InfoTradeSummaryParams defines parameters for InfoTradeSummary.
type InfoTradeSummaryParams struct {
	// trade summary id
	Id string `form:"id" json:"id"`
}

// InfoValidateEmailParams defines parameters for InfoValidateEmail.
type InfoValidateEmailParams struct {
	// validate this given email
	Email Email `form:"email" json:"email"`
}

// InfoVerifyJSONBody defines parameters for InfoVerify.
type InfoVerifyJSONBody = InfoAuth

// GetJobsParams defines parameters for GetJobs.
type GetJobsParams struct {
	Format *GetJobsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                   `form:"q,omitempty" json:"q,omitempty"`
}

// GetJobsParamsFormat defines parameters for GetJobs.
type GetJobsParamsFormat string

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody = Job

// PayoutsJobParams defines parameters for PayoutsJob.
type PayoutsJobParams struct {
	// optional job type for clearing particular payouts
	JobType *PayoutsJobParamsJobType `form:"job_type,omitempty" json:"job_type,omitempty"`
}

// PayoutsJobParamsJobType defines parameters for PayoutsJob.
type PayoutsJobParamsJobType string

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody = Job

// ApplyJobJSONBody defines parameters for ApplyJob.
type ApplyJobJSONBody = CustomerOptions

// OverrideJobJSONBody defines parameters for OverrideJob.
type OverrideJobJSONBody = JobOverride

// PayJobJSONBody defines parameters for PayJob.
type PayJobJSONBody = PaymentOption

// QuoteJobJSONBody defines parameters for QuoteJob.
type QuoteJobJSONBody = LeadApplicant

// ReapplyJobJSONBody defines parameters for ReapplyJob.
type ReapplyJobJSONBody interface{}

// SignJobSateNoteJSONBody defines parameters for SignJobSateNote.
type SignJobSateNoteJSONBody = SatNote

// GetLeadsParams defines parameters for GetLeads.
type GetLeadsParams struct {
	Format    *GetLeadsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q         *Q                    `form:"q,omitempty" json:"q,omitempty"`
	XKandaBid *XKandaBid            `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid            `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid            `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid            `json:"x_kanda_tid,omitempty"`
}

// GetLeadsParamsFormat defines parameters for GetLeads.
type GetLeadsParamsFormat string

// PostLeadJSONBody defines parameters for PostLead.
type PostLeadJSONBody = LeadApplicant

// PostLeadParams defines parameters for PostLead.
type PostLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// DeleteLeadParams defines parameters for DeleteLead.
type DeleteLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// GetLeadParams defines parameters for GetLead.
type GetLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// PutLeadJSONBody defines parameters for PutLead.
type PutLeadJSONBody = Lead

// PutLeadParams defines parameters for PutLead.
type PutLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// AcceptedJobSummaryLeadParams defines parameters for AcceptedJobSummaryLead.
type AcceptedJobSummaryLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// ApplyInviteLeadJSONBody defines parameters for ApplyInviteLead.
type ApplyInviteLeadJSONBody = LeadApplicant

// ApplyInviteLeadParams defines parameters for ApplyInviteLead.
type ApplyInviteLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// BudgetLeadJSONBody defines parameters for BudgetLead.
type BudgetLeadJSONBody = Money

// BudgetLeadParams defines parameters for BudgetLead.
type BudgetLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// ConnectTradesLeadJSONBody defines parameters for ConnectTradesLead.
type ConnectTradesLeadJSONBody = []interface{}

// ConnectTradesLeadParams defines parameters for ConnectTradesLead.
type ConnectTradesLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// MatchTradesLeadJSONBody defines parameters for MatchTradesLead.
type MatchTradesLeadJSONBody = TradeFilter

// MatchTradesLeadParams defines parameters for MatchTradesLead.
type MatchTradesLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// QuoteLeadJSONBody defines parameters for QuoteLead.
type QuoteLeadJSONBody = LeadQuote

// QuoteLeadParams defines parameters for QuoteLead.
type QuoteLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// ReferLeadJSONBody defines parameters for ReferLead.
type ReferLeadJSONBody struct {
	// lead referral company id
	Cid string `json:"cid"`
}

// ReferLeadParams defines parameters for ReferLead.
type ReferLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// SendLeadJobParams defines parameters for SendLeadJob.
type SendLeadJobParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// TradeLeadJSONBody defines parameters for TradeLead.
type TradeLeadJSONBody = LeadTrade

// TradeLeadParams defines parameters for TradeLead.
type TradeLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// TradeQuoteApprovalLeadParams defines parameters for TradeQuoteApprovalLead.
type TradeQuoteApprovalLeadParams struct {
	XKandaBid *XKandaBid `json:"x_kanda_bid,omitempty"`
	XKandaCid *XKandaCid `json:"x_kanda_cid,omitempty"`
	XKandaEid *XKandaEid `json:"x_kanda_eid,omitempty"`
	XKandaTid *XKandaTid `json:"x_kanda_tid,omitempty"`
}

// PostMeJSONBody defines parameters for PostMe.
type PostMeJSONBody = InfoMe

// PostMeParams defines parameters for PostMe.
type PostMeParams struct {
	XKandaProtected PostMeParamsXKandaProtected `json:"x_kanda_protected"`
}

// PostMeParamsXKandaProtected defines parameters for PostMe.
type PostMeParamsXKandaProtected string

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody = InfoMe

// GetMonitorsParams defines parameters for GetMonitors.
type GetMonitorsParams struct {
	Format *GetMonitorsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                       `form:"q,omitempty" json:"q,omitempty"`
}

// GetMonitorsParamsFormat defines parameters for GetMonitors.
type GetMonitorsParamsFormat string

// PostMonitorJSONBody defines parameters for PostMonitor.
type PostMonitorJSONBody = Monitor

// PutMonitorJSONBody defines parameters for PutMonitor.
type PutMonitorJSONBody = Monitor

// PostMonitorFlagJSONBody defines parameters for PostMonitorFlag.
type PostMonitorFlagJSONBody = Flag

// GetOnboardingsParams defines parameters for GetOnboardings.
type GetOnboardingsParams struct {
	Format *GetOnboardingsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                          `form:"q,omitempty" json:"q,omitempty"`
}

// GetOnboardingsParamsFormat defines parameters for GetOnboardings.
type GetOnboardingsParamsFormat string

// PostOnboardingJSONBody defines parameters for PostOnboarding.
type PostOnboardingJSONBody = Onboarding

// PutOnboardingJSONBody defines parameters for PutOnboarding.
type PutOnboardingJSONBody = Onboarding

// PostOnboardingDecisionJSONBody defines parameters for PostOnboardingDecision.
type PostOnboardingDecisionJSONBody = Approval

// GetPartnersParams defines parameters for GetPartners.
type GetPartnersParams struct {
	Format *GetPartnersParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                       `form:"q,omitempty" json:"q,omitempty"`
}

// GetPartnersParamsFormat defines parameters for GetPartners.
type GetPartnersParamsFormat string

// PostPartnerJSONBody defines parameters for PostPartner.
type PostPartnerJSONBody = Partner

// PutPartnerJSONBody defines parameters for PutPartner.
type PutPartnerJSONBody = Partner

// PostPartnerReferralsJSONBody defines parameters for PostPartnerReferrals.
type PostPartnerReferralsJSONBody = []Referral

// GetPaymentsParams defines parameters for GetPayments.
type GetPaymentsParams struct {
	Format *GetPaymentsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                       `form:"q,omitempty" json:"q,omitempty"`
}

// GetPaymentsParamsFormat defines parameters for GetPayments.
type GetPaymentsParamsFormat string

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody = Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody = Payment

// MarkPaymentParamsStatus defines parameters for MarkPayment.
type MarkPaymentParamsStatus string

// GetRatesParams defines parameters for GetRates.
type GetRatesParams struct {
	Format *GetRatesParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                    `form:"q,omitempty" json:"q,omitempty"`
}

// GetRatesParamsFormat defines parameters for GetRates.
type GetRatesParamsFormat string

// PostRateJSONBody defines parameters for PostRate.
type PostRateJSONBody = Rate

// PutRateJSONBody defines parameters for PutRate.
type PutRateJSONBody = Rate

// RunnerParams defines parameters for Runner.
type RunnerParams struct {
	// runner event type
	Event RunnerParamsEvent `form:"event" json:"event"`

	// runner task name
	Task RunnerParamsTask `form:"task" json:"task"`
}

// RunnerParamsEvent defines parameters for Runner.
type RunnerParamsEvent string

// RunnerParamsTask defines parameters for Runner.
type RunnerParamsTask string

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	Format *GetSubscriptionsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                            `form:"q,omitempty" json:"q,omitempty"`
}

// GetSubscriptionsParamsFormat defines parameters for GetSubscriptions.
type GetSubscriptionsParamsFormat string

// PostSubscriptionJSONBody defines parameters for PostSubscription.
type PostSubscriptionJSONBody = Subscription

// PutSubscriptionJSONBody defines parameters for PutSubscription.
type PutSubscriptionJSONBody = Subscription

// GetTrainingsParams defines parameters for GetTrainings.
type GetTrainingsParams struct {
	Format *GetTrainingsParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Q      *Q                        `form:"q,omitempty" json:"q,omitempty"`
}

// GetTrainingsParamsFormat defines parameters for GetTrainings.
type GetTrainingsParamsFormat string

// PostTrainingJSONBody defines parameters for PostTraining.
type PostTrainingJSONBody = Training

// PutTrainingJSONBody defines parameters for PutTraining.
type PutTrainingJSONBody = Training

// ProviderCheckWebhookParamsProvider defines parameters for ProviderCheckWebhook.
type ProviderCheckWebhookParamsProvider string

// ProviderWebhookParamsProvider defines parameters for ProviderWebhook.
type ProviderWebhookParamsProvider string

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody = PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody = PutCompanyJSONBody

// PostCompanyDirectorVerificationJSONRequestBody defines body for PostCompanyDirectorVerification for application/json ContentType.
type PostCompanyDirectorVerificationJSONRequestBody = PostCompanyDirectorVerificationJSONBody

// PostCompanyReferralsJSONRequestBody defines body for PostCompanyReferrals for application/json ContentType.
type PostCompanyReferralsJSONRequestBody = PostCompanyReferralsJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody = PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody = PutCreditJSONBody

// SignCreditJSONRequestBody defines body for SignCredit for application/json ContentType.
type SignCreditJSONRequestBody = SignCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody = PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody = PutDocumentJSONBody

// PostEnterpriseJSONRequestBody defines body for PostEnterprise for application/json ContentType.
type PostEnterpriseJSONRequestBody = PostEnterpriseJSONBody

// PutEnterpriseJSONRequestBody defines body for PutEnterprise for application/json ContentType.
type PutEnterpriseJSONRequestBody = PutEnterpriseJSONBody

// PostEnterpriseBranchesJSONRequestBody defines body for PostEnterpriseBranches for application/json ContentType.
type PostEnterpriseBranchesJSONRequestBody = PostEnterpriseBranchesJSONBody

// PostEventJSONRequestBody defines body for PostEvent for application/json ContentType.
type PostEventJSONRequestBody = PostEventJSONBody

// InfoAuthJSONRequestBody defines body for InfoAuth for application/json ContentType.
type InfoAuthJSONRequestBody = InfoAuthJSONBody

// InfoPutCacheJSONRequestBody defines body for InfoPutCache for application/json ContentType.
type InfoPutCacheJSONRequestBody = InfoPutCacheJSONBody

// InfoCheckoutRedirectJSONRequestBody defines body for InfoCheckoutRedirect for application/json ContentType.
type InfoCheckoutRedirectJSONRequestBody = InfoCheckoutRedirectJSONBody

// InfoClaimAccountJSONRequestBody defines body for InfoClaimAccount for application/json ContentType.
type InfoClaimAccountJSONRequestBody = InfoClaimAccountJSONBody

// InfoCreditJSONRequestBody defines body for InfoCredit for application/json ContentType.
type InfoCreditJSONRequestBody = InfoCreditJSONBody

// InfoDirectorJSONRequestBody defines body for InfoDirector for application/json ContentType.
type InfoDirectorJSONRequestBody = InfoDirectorJSONBody

// InfoEnterpriseRoleJSONRequestBody defines body for InfoEnterpriseRole for application/json ContentType.
type InfoEnterpriseRoleJSONRequestBody = InfoEnterpriseRoleJSONBody

// InfoGhostJSONRequestBody defines body for InfoGhost for application/json ContentType.
type InfoGhostJSONRequestBody = InfoGhostJSONBody

// InfoLeadJSONRequestBody defines body for InfoLead for application/json ContentType.
type InfoLeadJSONRequestBody = InfoLeadJSONBody

// InfoLegacyRedirectJSONRequestBody defines body for InfoLegacyRedirect for application/json ContentType.
type InfoLegacyRedirectJSONRequestBody = InfoLegacyRedirectJSONBody

// InfoPasswordJSONRequestBody defines body for InfoPassword for application/json ContentType.
type InfoPasswordJSONRequestBody = InfoPasswordJSONBody

// InfoQueryJSONRequestBody defines body for InfoQuery for application/json ContentType.
type InfoQueryJSONRequestBody = InfoQueryJSONBody

// InfoSessionJSONRequestBody defines body for InfoSession for application/json ContentType.
type InfoSessionJSONRequestBody = InfoSessionJSONBody

// InfoVerifyJSONRequestBody defines body for InfoVerify for application/json ContentType.
type InfoVerifyJSONRequestBody = InfoVerifyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody = PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody = PutJobJSONBody

// ApplyJobJSONRequestBody defines body for ApplyJob for application/json ContentType.
type ApplyJobJSONRequestBody = ApplyJobJSONBody

// OverrideJobJSONRequestBody defines body for OverrideJob for application/json ContentType.
type OverrideJobJSONRequestBody = OverrideJobJSONBody

// PayJobJSONRequestBody defines body for PayJob for application/json ContentType.
type PayJobJSONRequestBody = PayJobJSONBody

// QuoteJobJSONRequestBody defines body for QuoteJob for application/json ContentType.
type QuoteJobJSONRequestBody = QuoteJobJSONBody

// ReapplyJobJSONRequestBody defines body for ReapplyJob for application/json ContentType.
type ReapplyJobJSONRequestBody ReapplyJobJSONBody

// SignJobSateNoteJSONRequestBody defines body for SignJobSateNote for application/json ContentType.
type SignJobSateNoteJSONRequestBody = SignJobSateNoteJSONBody

// PostLeadJSONRequestBody defines body for PostLead for application/json ContentType.
type PostLeadJSONRequestBody = PostLeadJSONBody

// PutLeadJSONRequestBody defines body for PutLead for application/json ContentType.
type PutLeadJSONRequestBody = PutLeadJSONBody

// ApplyInviteLeadJSONRequestBody defines body for ApplyInviteLead for application/json ContentType.
type ApplyInviteLeadJSONRequestBody = ApplyInviteLeadJSONBody

// BudgetLeadJSONRequestBody defines body for BudgetLead for application/json ContentType.
type BudgetLeadJSONRequestBody = BudgetLeadJSONBody

// ConnectTradesLeadJSONRequestBody defines body for ConnectTradesLead for application/json ContentType.
type ConnectTradesLeadJSONRequestBody = ConnectTradesLeadJSONBody

// MatchTradesLeadJSONRequestBody defines body for MatchTradesLead for application/json ContentType.
type MatchTradesLeadJSONRequestBody = MatchTradesLeadJSONBody

// QuoteLeadJSONRequestBody defines body for QuoteLead for application/json ContentType.
type QuoteLeadJSONRequestBody = QuoteLeadJSONBody

// ReferLeadJSONRequestBody defines body for ReferLead for application/json ContentType.
type ReferLeadJSONRequestBody ReferLeadJSONBody

// TradeLeadJSONRequestBody defines body for TradeLead for application/json ContentType.
type TradeLeadJSONRequestBody = TradeLeadJSONBody

// PostMeJSONRequestBody defines body for PostMe for application/json ContentType.
type PostMeJSONRequestBody = PostMeJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody = PutMeJSONBody

// PostMonitorJSONRequestBody defines body for PostMonitor for application/json ContentType.
type PostMonitorJSONRequestBody = PostMonitorJSONBody

// PutMonitorJSONRequestBody defines body for PutMonitor for application/json ContentType.
type PutMonitorJSONRequestBody = PutMonitorJSONBody

// PostMonitorFlagJSONRequestBody defines body for PostMonitorFlag for application/json ContentType.
type PostMonitorFlagJSONRequestBody = PostMonitorFlagJSONBody

// PostOnboardingJSONRequestBody defines body for PostOnboarding for application/json ContentType.
type PostOnboardingJSONRequestBody = PostOnboardingJSONBody

// PutOnboardingJSONRequestBody defines body for PutOnboarding for application/json ContentType.
type PutOnboardingJSONRequestBody = PutOnboardingJSONBody

// PostOnboardingDecisionJSONRequestBody defines body for PostOnboardingDecision for application/json ContentType.
type PostOnboardingDecisionJSONRequestBody = PostOnboardingDecisionJSONBody

// PostPartnerJSONRequestBody defines body for PostPartner for application/json ContentType.
type PostPartnerJSONRequestBody = PostPartnerJSONBody

// PutPartnerJSONRequestBody defines body for PutPartner for application/json ContentType.
type PutPartnerJSONRequestBody = PutPartnerJSONBody

// PostPartnerReferralsJSONRequestBody defines body for PostPartnerReferrals for application/json ContentType.
type PostPartnerReferralsJSONRequestBody = PostPartnerReferralsJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody = PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody = PutPaymentJSONBody

// PostRateJSONRequestBody defines body for PostRate for application/json ContentType.
type PostRateJSONRequestBody = PostRateJSONBody

// PutRateJSONRequestBody defines body for PutRate for application/json ContentType.
type PutRateJSONRequestBody = PutRateJSONBody

// PostSubscriptionJSONRequestBody defines body for PostSubscription for application/json ContentType.
type PostSubscriptionJSONRequestBody = PostSubscriptionJSONBody

// PutSubscriptionJSONRequestBody defines body for PutSubscription for application/json ContentType.
type PutSubscriptionJSONRequestBody = PutSubscriptionJSONBody

// PostTrainingJSONRequestBody defines body for PostTraining for application/json ContentType.
type PostTrainingJSONRequestBody = PostTrainingJSONBody

// PutTrainingJSONRequestBody defines body for PutTraining for application/json ContentType.
type PutTrainingJSONRequestBody = PutTrainingJSONBody

// Getter for additional properties for ApiEvent_ResourceData. Returns the specified
// element and whether it was found
func (a ApiEvent_ResourceData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiEvent_ResourceData
func (a *ApiEvent_ResourceData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiEvent_ResourceData to handle AdditionalProperties
func (a *ApiEvent_ResourceData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiEvent_ResourceData to handle AdditionalProperties
func (a ApiEvent_ResourceData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Branding. Returns the specified
// element and whether it was found
func (a Branding) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Branding
func (a *Branding) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Branding to handle AdditionalProperties
func (a *Branding) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["logo"]; found {
		err = json.Unmarshal(raw, &a.Logo)
		if err != nil {
			return fmt.Errorf("error reading 'logo': %w", err)
		}
		delete(object, "logo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Branding to handle AdditionalProperties
func (a Branding) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["logo"], err = json.Marshal(a.Logo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'logo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Cache. Returns the specified
// element and whether it was found
func (a Cache) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Cache
func (a *Cache) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Cache to handle AdditionalProperties
func (a *Cache) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cid"]; found {
		err = json.Unmarshal(raw, &a.Cid)
		if err != nil {
			return fmt.Errorf("error reading 'cid': %w", err)
		}
		delete(object, "cid")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading 'metadata': %w", err)
		}
		delete(object, "metadata")
	}

	if raw, found := object["oid"]; found {
		err = json.Unmarshal(raw, &a.Oid)
		if err != nil {
			return fmt.Errorf("error reading 'oid': %w", err)
		}
		delete(object, "oid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Cache to handle AdditionalProperties
func (a Cache) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cid != nil {
		object["cid"], err = json.Marshal(a.Cid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cid': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Metadata != nil {
		object["metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'metadata': %w", err)
		}
	}

	if a.Oid != nil {
		object["oid"], err = json.Marshal(a.Oid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventProps_Info. Returns the specified
// element and whether it was found
func (a EventProps_Info) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventProps_Info
func (a *EventProps_Info) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventProps_Info to handle AdditionalProperties
func (a *EventProps_Info) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventProps_Info to handle AdditionalProperties
func (a EventProps_Info) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventProps_Params. Returns the specified
// element and whether it was found
func (a EventProps_Params) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventProps_Params
func (a *EventProps_Params) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventProps_Params to handle AdditionalProperties
func (a *EventProps_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventProps_Params to handle AdditionalProperties
func (a EventProps_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Onboarding_ConsumerReview_Reports. Returns the specified
// element and whether it was found
func (a Onboarding_ConsumerReview_Reports) Get(fieldName string) (value ConsumerReport, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Onboarding_ConsumerReview_Reports
func (a *Onboarding_ConsumerReview_Reports) Set(fieldName string, value ConsumerReport) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ConsumerReport)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Onboarding_ConsumerReview_Reports to handle AdditionalProperties
func (a *Onboarding_ConsumerReview_Reports) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ConsumerReport)
		for fieldName, fieldBuf := range object {
			var fieldVal ConsumerReport
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Onboarding_ConsumerReview_Reports to handle AdditionalProperties
func (a Onboarding_ConsumerReview_Reports) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Onboarding_DirectorReview_Reports. Returns the specified
// element and whether it was found
func (a Onboarding_DirectorReview_Reports) Get(fieldName string) (value CompanyDirectorReport, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Onboarding_DirectorReview_Reports
func (a *Onboarding_DirectorReview_Reports) Set(fieldName string, value CompanyDirectorReport) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CompanyDirectorReport)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Onboarding_DirectorReview_Reports to handle AdditionalProperties
func (a *Onboarding_DirectorReview_Reports) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CompanyDirectorReport)
		for fieldName, fieldBuf := range object {
			var fieldVal CompanyDirectorReport
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Onboarding_DirectorReview_Reports to handle AdditionalProperties
func (a Onboarding_DirectorReview_Reports) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Onboarding_OwnerReview_Reports. Returns the specified
// element and whether it was found
func (a Onboarding_OwnerReview_Reports) Get(fieldName string) (value OwnerReport, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Onboarding_OwnerReview_Reports
func (a *Onboarding_OwnerReview_Reports) Set(fieldName string, value OwnerReport) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]OwnerReport)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Onboarding_OwnerReview_Reports to handle AdditionalProperties
func (a *Onboarding_OwnerReview_Reports) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]OwnerReport)
		for fieldName, fieldBuf := range object {
			var fieldVal OwnerReport
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Onboarding_OwnerReview_Reports to handle AdditionalProperties
func (a Onboarding_OwnerReview_Reports) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context, params GetCompaniesParams) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// kanda staff to approve and verify company users and mark its lifecycle verified only allowed when company has already gone through company setup
	// (POST /api/company/{id}/approve)
	ApproveCompany(ctx echo.Context, id string) error
	// post a new company billing for redirected payment page
	// (POST /api/company/{id}/billing)
	PostCompanyBilling(ctx echo.Context, id string) error
	// post company billing success status
	// (POST /api/company/{id}/billing-success)
	PostCompanyBillingSuccess(ctx echo.Context, id string) error
	// kanda staff to reject or decline company and mark its lifecycle declined, apart from improper insurance document, all declines will disable company and suspend and disable all users associated with the company. for improper insurance document, document will be removed and lifecycle  re-calculated so tradesperson can upload a correct one again.
	// (POST /api/company/{id}/decline)
	DeclineCompany(ctx echo.Context, id string, params DeclineCompanyParams) error
	// send verification email to all non-verified directors for the company
	// (POST /api/company/{id}/director)
	DirectorCompany(ctx echo.Context, id string) error
	// get owner / director info from company
	// (GET /api/company/{id}/director-verification)
	GetCompanyDirectorVerification(ctx echo.Context, id string, params GetCompanyDirectorVerificationParams) error
	// owner / director to submit ID verification
	// (POST /api/company/{id}/director-verification)
	PostCompanyDirectorVerification(ctx echo.Context, id string, params PostCompanyDirectorVerificationParams) error
	// post existing company referrals
	// (POST /api/company/{id}/referrals)
	PostCompanyReferrals(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context, params GetCreditsParams) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// check existing credit and refresh documents, only allowed when credit state is set
	// (POST /api/credit/{id}/check)
	CheckCredit(ctx echo.Context, id string) error
	// homeowner gives consent to credit migration to new lender
	// (POST /api/credit/{id}/consent-migrate)
	ConsentMigrateCredit(ctx echo.Context, id string) error
	// send credit migration to new lender comms to homeowner for consent
	// (POST /api/credit/{id}/migrate)
	MigrateCredit(ctx echo.Context, id string) error
	// quote existing credit
	// (POST /api/credit/{id}/quote)
	QuoteCredit(ctx echo.Context, id string) error
	// sign existing credit documents, only allowed when credit state is accepted
	// (POST /api/credit/{id}/sign)
	SignCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context, params GetDocumentsParams) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// get all enterprises
	// (GET /api/enterprise)
	GetEnterprises(ctx echo.Context, params GetEnterprisesParams) error
	// kanda staff only to post new enterprise
	// (POST /api/enterprise)
	PostEnterprise(ctx echo.Context) error
	// kanda staff to delete existing enterprise
	// (DELETE /api/enterprise/{id})
	DeleteEnterprise(ctx echo.Context, id string) error
	// get existing enterprise
	// (GET /api/enterprise/{id})
	GetEnterprise(ctx echo.Context, id string) error
	// put existing enterprise
	// (PUT /api/enterprise/{id})
	PutEnterprise(ctx echo.Context, id string) error
	// get existing enterprise branches
	// (GET /api/enterprise/{id}/branch)
	GetEnterpriseBranches(ctx echo.Context, id string) error
	// post existing enterprise branches
	// (POST /api/enterprise/{id}/branch)
	PostEnterpriseBranches(ctx echo.Context, id string) error
	// post event by kanda staff
	// (POST /api/event)
	PostEvent(ctx echo.Context) error
	// put auth info by email, send sign-in magic link
	// (PUT /api/info/auth)
	InfoAuth(ctx echo.Context) error
	// delete cache info
	// (DELETE /api/info/cache)
	InfoDeleteCache(ctx echo.Context) error
	// get cache info
	// (GET /api/info/cache)
	InfoGetCache(ctx echo.Context) error
	// put cache info
	// (PUT /api/info/cache)
	InfoPutCache(ctx echo.Context) error
	// request a new checkout link based on given data for redirect flow
	// (PUT /api/info/checkout-redirect)
	InfoCheckoutRedirect(ctx echo.Context) error
	// put claim account info by email for legacy user, send verification magic link
	// (PUT /api/info/claim-account)
	InfoClaimAccount(ctx echo.Context) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// info credit to return an eligibility result (AIP) which can be used on financed job
	// (PUT /api/info/credit)
	InfoCredit(ctx echo.Context) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// put + run director report
	// (PUT /api/info/director)
	InfoDirector(ctx echo.Context, params InfoDirectorParams) error
	// get info enterprise
	// (GET /api/info/enterprise)
	InfoEnterprise(ctx echo.Context, params InfoEnterpriseParams) error
	// info enterprise role for enterprise admin to set user role and claims
	// (PUT /api/info/enterprise-role)
	InfoEnterpriseRole(ctx echo.Context) error
	// kanda staff only to get entity with relevant resources
	// (GET /api/info/entity)
	GetInfoEntity(ctx echo.Context, params GetInfoEntityParams) error
	// info example job to return an example job in draft which can be tested for example flow customer details will be pre-filled with tradesperson info, and other details are pre-filled with example data
	// (PUT /api/info/example-job)
	InfoExampleJob(ctx echo.Context) error
	// info ghost mode to return custom token, only available to Kanda staff
	// (PUT /api/info/ghost)
	InfoGhost(ctx echo.Context) error
	// query system health
	// (GET /api/info/health)
	InfoHealth(ctx echo.Context) error
	// query request IPv4 address or fallback to server IP
	// (GET /api/info/ip)
	InfoIP(ctx echo.Context) error
	// info lead for enterprise user to send out AIP form link
	// (PUT /api/info/lead)
	InfoLead(ctx echo.Context, params InfoLeadParams) error
	// request a new checkout link based on given data for redirect flow
	// (PUT /api/info/legacy-redirect)
	InfoLegacyRedirect(ctx echo.Context) error
	// info for current company onboarding stage + notes
	// (GET /api/info/onboarding)
	InfoOnboarding(ctx echo.Context) error
	// get info partner branding
	// (GET /api/info/partner-branding)
	InfoPartnerBranding(ctx echo.Context, params InfoPartnerBrandingParams) error
	// put password info by email, send password reset magic link
	// (PUT /api/info/password)
	InfoPassword(ctx echo.Context) error
	// info query to return analytics, only available to Kanda staff
	// (PUT /api/info/query)
	InfoQuery(ctx echo.Context) error
	// request available finance rates for API company
	// (GET /api/info/rate)
	InfoRate(ctx echo.Context, params InfoRateParams) error
	// request a new session token for use in checkout
	// (PUT /api/info/session)
	InfoSession(ctx echo.Context) error
	// kanda staff or trade admin or get their stats
	// (GET /api/info/stats)
	InfoStats(ctx echo.Context, params InfoStatsParams) error
	// query trade summary with branding and logo attached
	// (GET /api/info/trade-summary)
	InfoTradeSummary(ctx echo.Context, params InfoTradeSummaryParams) error
	// validate email info
	// (GET /api/info/validate-email)
	InfoValidateEmail(ctx echo.Context, params InfoValidateEmailParams) error
	// put verify info by email, send verification magic link
	// (PUT /api/info/verify)
	InfoVerify(ctx echo.Context) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context, params GetJobsParams) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// kanda staff to approve all payouts for job, only allowed when provider approved sat note and job status is finished and is financed
	// (POST /api/job/all/payouts)
	PayoutsJob(ctx echo.Context, params PayoutsJobParams) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// customer to apply existing job with selected options, only allowed when job status is sent
	// (POST /api/job/{id}/apply)
	ApplyJob(ctx echo.Context, id string) error
	// kanda staff to approve signed completed job with satisfaction note, only allowed when sat note is signed and job status is finished and is financed
	// (POST /api/job/{id}/approve)
	ApproveJobSatNote(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// check existing job credit state, only allowed when job is financed
	// (POST /api/job/{id}/check)
	CheckJob(ctx echo.Context, id string) error
	// kanda staff only to generate a job checkout link with code
	// (POST /api/job/{id}/checkoutLink)
	JobCheckoutLink(ctx echo.Context, id string) error
	// get existing job company info
	// (POST /api/job/{id}/companyInfo)
	JobCompanyInfo(ctx echo.Context, id string) error
	// complete existing accepted job, only allowed when job status is accepted
	// (POST /api/job/{id}/complete)
	CompleteJob(ctx echo.Context, id string) error
	// kanda staff to delay a signed satisfaction note for internal review, only allowed when sat note is signed and job status is finished and is financed
	// (POST /api/job/{id}/delay)
	DelayJobSatNote(ctx echo.Context, id string) error
	// kanda staff to send signed and completed job with satisfaction note to lender for review, only allowed when sat note is signed or delayed and job status is finished and is financed
	// (POST /api/job/{id}/lender-review)
	LenderReviewJobSatNote(ctx echo.Context, id string) error
	// kanda staff to override a job status and trigger comms to be sent (if applicable), only allowed when job is applied for finance or financed.
	// (POST /api/job/{id}/override)
	OverrideJob(ctx echo.Context, id string) error
	// customer to pay existing job,  only allowed when job status is beyond sent
	// (POST /api/job/{id}/pay)
	PayJob(ctx echo.Context, id string) error
	// kanda staff to approve a payout for job, only allowed when provider approved sat note and job status is finished and is financed
	// (POST /api/job/{id}/payout)
	PayoutJob(ctx echo.Context, id string) error
	// quote job in finance for homeowner to get eligibility, only allowed when job status is sent
	// (POST /api/job/{id}/quote)
	QuoteJob(ctx echo.Context, id string) error
	// customer to reapply existing job with second line options, only allowed when job is applied and primary finance not approved
	// (POST /api/job/{id}/reapply)
	ReapplyJob(ctx echo.Context, id string) error
	// resend existing job
	// (POST /api/job/{id}/resend)
	ResendJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// customer to sign completed job with satisfaction note, only allowed when job status is finished and is financed
	// (POST /api/job/{id}/signSatNote)
	SignJobSateNote(ctx echo.Context, id string) error
	// unarchive existing already archived job
	// (POST /api/job/{id}/unarchive)
	UnarchiveJob(ctx echo.Context, id string) error
	// customer to view completed job with satisfaction note, only allowed when job status is finished and is financed
	// (POST /api/job/{id}/viewSatNote)
	ViewJobSatNote(ctx echo.Context, id string) error
	// kanda staff only to get all leads
	// (GET /api/lead)
	GetLeads(ctx echo.Context, params GetLeadsParams) error
	// post new lead from applicant
	// (POST /api/lead)
	PostLead(ctx echo.Context, params PostLeadParams) error
	// kanda staff only to delete existing lead
	// (DELETE /api/lead/{id})
	DeleteLead(ctx echo.Context, id string, params DeleteLeadParams) error
	// get existing lead
	// (GET /api/lead/{id})
	GetLead(ctx echo.Context, id string, params GetLeadParams) error
	// kanda staff only to put existing lead
	// (PUT /api/lead/{id})
	PutLead(ctx echo.Context, id string, params PutLeadParams) error
	// query accepted job summary quoted to lead
	// (POST /api/lead/{id}/accepted-job-summary)
	AcceptedJobSummaryLead(ctx echo.Context, id string, params AcceptedJobSummaryLeadParams) error
	// post existing lead from applicant invite
	// (POST /api/lead/{id}/apply-invite)
	ApplyInviteLead(ctx echo.Context, id string, params ApplyInviteLeadParams) error
	// post budget with existing lead
	// (POST /api/lead/{id}/budget)
	BudgetLead(ctx echo.Context, id string, params BudgetLeadParams) error
	// connecting a lead to trades
	// (POST /api/lead/{id}/connect-trades)
	ConnectTradesLead(ctx echo.Context, id string, params ConnectTradesLeadParams) error
	// matching a lead to available trades
	// (POST /api/lead/{id}/match-trades)
	MatchTradesLead(ctx echo.Context, id string, params MatchTradesLeadParams) error
	// post existing lead quote
	// (POST /api/lead/{id}/quote)
	QuoteLead(ctx echo.Context, id string, params QuoteLeadParams) error
	// kanda staff only to post existing referred lead
	// (POST /api/lead/{id}/refer)
	ReferLead(ctx echo.Context, id string, params ReferLeadParams) error
	// for enterprise or kanda staff to convert a lead to job and send to homeowner, it also sets lead status to trade_accepted
	// (POST /api/lead/{id}/send-job)
	SendLeadJob(ctx echo.Context, id string, params SendLeadJobParams) error
	// post existing lead trade
	// (POST /api/lead/{id}/trade)
	TradeLead(ctx echo.Context, id string, params TradeLeadParams) error
	// external trade to post existing lead quote approval by trade
	// (POST /api/lead/{id}/trade-quote-approval)
	TradeQuoteApprovalLead(ctx echo.Context, id string, params TradeQuoteApprovalLeadParams) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// post me info
	// (POST /api/me)
	PostMe(ctx echo.Context, params PostMeParams) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all monitors
	// (GET /api/monitor)
	GetMonitors(ctx echo.Context, params GetMonitorsParams) error
	// post new monitor
	// (POST /api/monitor)
	PostMonitor(ctx echo.Context) error
	// delete existing monitor
	// (DELETE /api/monitor/{id})
	DeleteMonitor(ctx echo.Context, id string) error
	// get existing monitor
	// (GET /api/monitor/{id})
	GetMonitor(ctx echo.Context, id string) error
	// put existing monitor
	// (PUT /api/monitor/{id})
	PutMonitor(ctx echo.Context, id string) error
	// post internal monitor with flag
	// (POST /api/monitor/{id}/flag)
	PostMonitorFlag(ctx echo.Context, id string) error
	// kanda staff to get all onboardings
	// (GET /api/onboarding)
	GetOnboardings(ctx echo.Context, params GetOnboardingsParams) error
	// kanda staff only to post new onboarding
	// (POST /api/onboarding)
	PostOnboarding(ctx echo.Context) error
	// kanda staff to delete existing onboarding
	// (DELETE /api/onboarding/{id})
	DeleteOnboarding(ctx echo.Context, id string) error
	// kanda staff to get existing onboarding
	// (GET /api/onboarding/{id})
	GetOnboarding(ctx echo.Context, id string) error
	// kanda staff to put existing onboarding
	// (PUT /api/onboarding/{id})
	PutOnboarding(ctx echo.Context, id string) error
	// kanda staff to post an onboarding decision and trigger comms (if applicable)
	// (POST /api/onboarding/{id}/decision)
	PostOnboardingDecision(ctx echo.Context, id string) error
	// get all partners
	// (GET /api/partner)
	GetPartners(ctx echo.Context, params GetPartnersParams) error
	// kanda staff only to post new partner
	// (POST /api/partner)
	PostPartner(ctx echo.Context) error
	// kanda staff to delete existing partner
	// (DELETE /api/partner/{id})
	DeletePartner(ctx echo.Context, id string) error
	// get existing partner
	// (GET /api/partner/{id})
	GetPartner(ctx echo.Context, id string) error
	// put existing partner
	// (PUT /api/partner/{id})
	PutPartner(ctx echo.Context, id string) error
	// post existing partner referrals
	// (POST /api/partner/{id}/referrals)
	PostPartnerReferrals(ctx echo.Context, id string) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context, params GetPaymentsParams) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
	// company to mark existing payment as given status, only allowed when payment method is cash
	// (POST /api/payment/{id}/{status})
	MarkPayment(ctx echo.Context, id string, status MarkPaymentParamsStatus) error
	// kanda staff to get all rates
	// (GET /api/rate)
	GetRates(ctx echo.Context, params GetRatesParams) error
	// kanda staff to post new rate
	// (POST /api/rate)
	PostRate(ctx echo.Context) error
	// kanda staff to delete existing rate
	// (DELETE /api/rate/{id})
	DeleteRate(ctx echo.Context, id string) error
	// kanda staff to get existing rate
	// (GET /api/rate/{id})
	GetRate(ctx echo.Context, id string) error
	// kanda staff to put existing rate
	// (PUT /api/rate/{id})
	PutRate(ctx echo.Context, id string) error
	// runner for task event
	// (GET /api/runner)
	Runner(ctx echo.Context, params RunnerParams) error
	// get all subscriptions
	// (GET /api/subscription)
	GetSubscriptions(ctx echo.Context, params GetSubscriptionsParams) error
	// post new subscription
	// (POST /api/subscription)
	PostSubscription(ctx echo.Context) error
	// delete existing subscription
	// (DELETE /api/subscription/{id})
	DeleteSubscription(ctx echo.Context, id string) error
	// get existing subscription
	// (GET /api/subscription/{id})
	GetSubscription(ctx echo.Context, id string) error
	// put existing subscription
	// (PUT /api/subscription/{id})
	PutSubscription(ctx echo.Context, id string) error
	// pending existing subscription
	// (POST /api/subscription/{id}/pending)
	PendingSubscription(ctx echo.Context, id string) error
	// get all trainings
	// (GET /api/training)
	GetTrainings(ctx echo.Context, params GetTrainingsParams) error
	// post new training
	// (POST /api/training)
	PostTraining(ctx echo.Context) error
	// delete existing training
	// (DELETE /api/training/{id})
	DeleteTraining(ctx echo.Context, id string) error
	// get existing training
	// (GET /api/training/{id})
	GetTraining(ctx echo.Context, id string) error
	// put existing training
	// (PUT /api/training/{id})
	PutTraining(ctx echo.Context, id string) error
	// provider check webhook
	// (GET /api/webhook/{provider})
	ProviderCheckWebhook(ctx echo.Context, provider ProviderCheckWebhookParamsProvider) error
	// provider webhook
	// (POST /api/webhook/{provider})
	ProviderWebhook(ctx echo.Context, provider ProviderWebhookParamsProvider) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompaniesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx, params)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// ApproveCompany converts echo context to params.
func (w *ServerInterfaceWrapper) ApproveCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApproveCompany(ctx, id)
	return err
}

// PostCompanyBilling converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyBilling(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompanyBilling(ctx, id)
	return err
}

// PostCompanyBillingSuccess converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyBillingSuccess(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompanyBillingSuccess(ctx, id)
	return err
}

// DeclineCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeclineCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeclineCompanyParams
	// ------------- Required query parameter "reason" -------------

	err = runtime.BindQueryParameter("form", true, true, "reason", ctx.QueryParams(), &params.Reason)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reason: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeclineCompany(ctx, id, params)
	return err
}

// DirectorCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DirectorCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DirectorCompany(ctx, id)
	return err
}

// GetCompanyDirectorVerification converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyDirectorVerification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyDirectorVerificationParams
	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanyDirectorVerification(ctx, id, params)
	return err
}

// PostCompanyDirectorVerification converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyDirectorVerification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCompanyDirectorVerificationParams
	// ------------- Required query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, true, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompanyDirectorVerification(ctx, id, params)
	return err
}

// PostCompanyReferrals converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyReferrals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompanyReferrals(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx, params)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// CheckCredit converts echo context to params.
func (w *ServerInterfaceWrapper) CheckCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckCredit(ctx, id)
	return err
}

// ConsentMigrateCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ConsentMigrateCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConsentMigrateCredit(ctx, id)
	return err
}

// MigrateCredit converts echo context to params.
func (w *ServerInterfaceWrapper) MigrateCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MigrateCredit(ctx, id)
	return err
}

// QuoteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) QuoteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuoteCredit(ctx, id)
	return err
}

// SignCredit converts echo context to params.
func (w *ServerInterfaceWrapper) SignCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDocumentsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx, params)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// GetEnterprises converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnterprises(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnterprisesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnterprises(ctx, params)
	return err
}

// PostEnterprise converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnterprise(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnterprise(ctx)
	return err
}

// DeleteEnterprise converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnterprise(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEnterprise(ctx, id)
	return err
}

// GetEnterprise converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnterprise(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnterprise(ctx, id)
	return err
}

// PutEnterprise converts echo context to params.
func (w *ServerInterfaceWrapper) PutEnterprise(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutEnterprise(ctx, id)
	return err
}

// GetEnterpriseBranches converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnterpriseBranches(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEnterpriseBranches(ctx, id)
	return err
}

// PostEnterpriseBranches converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnterpriseBranches(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEnterpriseBranches(ctx, id)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostEvent(ctx)
	return err
}

// InfoAuth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoAuth(ctx)
	return err
}

// InfoDeleteCache converts echo context to params.
func (w *ServerInterfaceWrapper) InfoDeleteCache(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoDeleteCache(ctx)
	return err
}

// InfoGetCache converts echo context to params.
func (w *ServerInterfaceWrapper) InfoGetCache(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoGetCache(ctx)
	return err
}

// InfoPutCache converts echo context to params.
func (w *ServerInterfaceWrapper) InfoPutCache(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoPutCache(ctx)
	return err
}

// InfoCheckoutRedirect converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCheckoutRedirect(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCheckoutRedirect(ctx)
	return err
}

// InfoClaimAccount converts echo context to params.
func (w *ServerInterfaceWrapper) InfoClaimAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoClaimAccount(ctx)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCredit converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCredit(ctx)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// InfoDirector converts echo context to params.
func (w *ServerInterfaceWrapper) InfoDirector(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoDirectorParams
	// ------------- Optional query parameter "report" -------------

	err = runtime.BindQueryParameter("form", true, false, "report", ctx.QueryParams(), &params.Report)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter report: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoDirector(ctx, params)
	return err
}

// InfoEnterprise converts echo context to params.
func (w *ServerInterfaceWrapper) InfoEnterprise(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoEnterpriseParams
	// ------------- Optional query parameter "eid" -------------

	err = runtime.BindQueryParameter("form", true, false, "eid", ctx.QueryParams(), &params.Eid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eid: %s", err))
	}

	// ------------- Optional query parameter "bid" -------------

	err = runtime.BindQueryParameter("form", true, false, "bid", ctx.QueryParams(), &params.Bid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bid: %s", err))
	}

	// ------------- Optional query parameter "subdomain" -------------

	err = runtime.BindQueryParameter("form", true, false, "subdomain", ctx.QueryParams(), &params.Subdomain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subdomain: %s", err))
	}

	// ------------- Optional query parameter "branch_code" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch_code", ctx.QueryParams(), &params.BranchCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoEnterprise(ctx, params)
	return err
}

// InfoEnterpriseRole converts echo context to params.
func (w *ServerInterfaceWrapper) InfoEnterpriseRole(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoEnterpriseRole(ctx)
	return err
}

// GetInfoEntity converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfoEntity(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInfoEntityParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Required query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, true, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInfoEntity(ctx, params)
	return err
}

// InfoExampleJob converts echo context to params.
func (w *ServerInterfaceWrapper) InfoExampleJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoExampleJob(ctx)
	return err
}

// InfoGhost converts echo context to params.
func (w *ServerInterfaceWrapper) InfoGhost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoGhost(ctx)
	return err
}

// InfoHealth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoHealth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoHealth(ctx)
	return err
}

// InfoIP converts echo context to params.
func (w *ServerInterfaceWrapper) InfoIP(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoIP(ctx)
	return err
}

// InfoLead converts echo context to params.
func (w *ServerInterfaceWrapper) InfoLead(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoLeadParams
	// ------------- Optional query parameter "eid" -------------

	err = runtime.BindQueryParameter("form", true, false, "eid", ctx.QueryParams(), &params.Eid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eid: %s", err))
	}

	// ------------- Optional query parameter "bid" -------------

	err = runtime.BindQueryParameter("form", true, false, "bid", ctx.QueryParams(), &params.Bid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bid: %s", err))
	}

	// ------------- Optional query parameter "subdomain" -------------

	err = runtime.BindQueryParameter("form", true, false, "subdomain", ctx.QueryParams(), &params.Subdomain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subdomain: %s", err))
	}

	// ------------- Optional query parameter "branch_code" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch_code", ctx.QueryParams(), &params.BranchCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoLead(ctx, params)
	return err
}

// InfoLegacyRedirect converts echo context to params.
func (w *ServerInterfaceWrapper) InfoLegacyRedirect(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoLegacyRedirect(ctx)
	return err
}

// InfoOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) InfoOnboarding(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoOnboarding(ctx)
	return err
}

// InfoPartnerBranding converts echo context to params.
func (w *ServerInterfaceWrapper) InfoPartnerBranding(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoPartnerBrandingParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoPartnerBranding(ctx, params)
	return err
}

// InfoPassword converts echo context to params.
func (w *ServerInterfaceWrapper) InfoPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoPassword(ctx)
	return err
}

// InfoQuery converts echo context to params.
func (w *ServerInterfaceWrapper) InfoQuery(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoQuery(ctx)
	return err
}

// InfoRate converts echo context to params.
func (w *ServerInterfaceWrapper) InfoRate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoRateParams
	// ------------- Optional query parameter "cid" -------------

	err = runtime.BindQueryParameter("form", true, false, "cid", ctx.QueryParams(), &params.Cid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoRate(ctx, params)
	return err
}

// InfoSession converts echo context to params.
func (w *ServerInterfaceWrapper) InfoSession(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoSession(ctx)
	return err
}

// InfoStats converts echo context to params.
func (w *ServerInterfaceWrapper) InfoStats(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoStatsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoStats(ctx, params)
	return err
}

// InfoTradeSummary converts echo context to params.
func (w *ServerInterfaceWrapper) InfoTradeSummary(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoTradeSummaryParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoTradeSummary(ctx, params)
	return err
}

// InfoValidateEmail converts echo context to params.
func (w *ServerInterfaceWrapper) InfoValidateEmail(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoValidateEmailParams
	// ------------- Required query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, true, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoValidateEmail(ctx, params)
	return err
}

// InfoVerify converts echo context to params.
func (w *ServerInterfaceWrapper) InfoVerify(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoVerify(ctx)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx, params)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// PayoutsJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayoutsJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PayoutsJobParams
	// ------------- Optional query parameter "job_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "job_type", ctx.QueryParams(), &params.JobType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayoutsJob(ctx, params)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ApplyJob converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyJob(ctx, id)
	return err
}

// ApproveJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) ApproveJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApproveJobSatNote(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// CheckJob converts echo context to params.
func (w *ServerInterfaceWrapper) CheckJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckJob(ctx, id)
	return err
}

// JobCheckoutLink converts echo context to params.
func (w *ServerInterfaceWrapper) JobCheckoutLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JobCheckoutLink(ctx, id)
	return err
}

// JobCompanyInfo converts echo context to params.
func (w *ServerInterfaceWrapper) JobCompanyInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JobCompanyInfo(ctx, id)
	return err
}

// CompleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CompleteJob(ctx, id)
	return err
}

// DelayJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) DelayJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DelayJobSatNote(ctx, id)
	return err
}

// LenderReviewJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) LenderReviewJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LenderReviewJobSatNote(ctx, id)
	return err
}

// OverrideJob converts echo context to params.
func (w *ServerInterfaceWrapper) OverrideJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverrideJob(ctx, id)
	return err
}

// PayJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayJob(ctx, id)
	return err
}

// PayoutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayoutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayoutJob(ctx, id)
	return err
}

// QuoteJob converts echo context to params.
func (w *ServerInterfaceWrapper) QuoteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuoteJob(ctx, id)
	return err
}

// ReapplyJob converts echo context to params.
func (w *ServerInterfaceWrapper) ReapplyJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReapplyJob(ctx, id)
	return err
}

// ResendJob converts echo context to params.
func (w *ServerInterfaceWrapper) ResendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResendJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// SignJobSateNote converts echo context to params.
func (w *ServerInterfaceWrapper) SignJobSateNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignJobSateNote(ctx, id)
	return err
}

// UnarchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) UnarchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnarchiveJob(ctx, id)
	return err
}

// ViewJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) ViewJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewJobSatNote(ctx, id)
	return err
}

// GetLeads converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeads(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLeads(ctx, params)
	return err
}

// PostLead converts echo context to params.
func (w *ServerInterfaceWrapper) PostLead(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLead(ctx, params)
	return err
}

// DeleteLead converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLead(ctx, id, params)
	return err
}

// GetLead converts echo context to params.
func (w *ServerInterfaceWrapper) GetLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLead(ctx, id, params)
	return err
}

// PutLead converts echo context to params.
func (w *ServerInterfaceWrapper) PutLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutLead(ctx, id, params)
	return err
}

// AcceptedJobSummaryLead converts echo context to params.
func (w *ServerInterfaceWrapper) AcceptedJobSummaryLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AcceptedJobSummaryLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AcceptedJobSummaryLead(ctx, id, params)
	return err
}

// ApplyInviteLead converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyInviteLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ApplyInviteLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyInviteLead(ctx, id, params)
	return err
}

// BudgetLead converts echo context to params.
func (w *ServerInterfaceWrapper) BudgetLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params BudgetLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BudgetLead(ctx, id, params)
	return err
}

// ConnectTradesLead converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectTradesLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConnectTradesLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectTradesLead(ctx, id, params)
	return err
}

// MatchTradesLead converts echo context to params.
func (w *ServerInterfaceWrapper) MatchTradesLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params MatchTradesLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MatchTradesLead(ctx, id, params)
	return err
}

// QuoteLead converts echo context to params.
func (w *ServerInterfaceWrapper) QuoteLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuoteLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuoteLead(ctx, id, params)
	return err
}

// ReferLead converts echo context to params.
func (w *ServerInterfaceWrapper) ReferLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReferLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReferLead(ctx, id, params)
	return err
}

// SendLeadJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendLeadJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SendLeadJobParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendLeadJob(ctx, id, params)
	return err
}

// TradeLead converts echo context to params.
func (w *ServerInterfaceWrapper) TradeLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TradeLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TradeLead(ctx, id, params)
	return err
}

// TradeQuoteApprovalLead converts echo context to params.
func (w *ServerInterfaceWrapper) TradeQuoteApprovalLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TradeQuoteApprovalLeadParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x_kanda_bid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_bid")]; found {
		var XKandaBid XKandaBid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_bid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_bid", runtime.ParamLocationHeader, valueList[0], &XKandaBid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_bid: %s", err))
		}

		params.XKandaBid = &XKandaBid
	}
	// ------------- Optional header parameter "x_kanda_cid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_cid")]; found {
		var XKandaCid XKandaCid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_cid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_cid", runtime.ParamLocationHeader, valueList[0], &XKandaCid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_cid: %s", err))
		}

		params.XKandaCid = &XKandaCid
	}
	// ------------- Optional header parameter "x_kanda_eid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_eid")]; found {
		var XKandaEid XKandaEid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_eid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_eid", runtime.ParamLocationHeader, valueList[0], &XKandaEid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_eid: %s", err))
		}

		params.XKandaEid = &XKandaEid
	}
	// ------------- Optional header parameter "x_kanda_tid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_tid")]; found {
		var XKandaTid XKandaTid
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_tid, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_tid", runtime.ParamLocationHeader, valueList[0], &XKandaTid)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_tid: %s", err))
		}

		params.XKandaTid = &XKandaTid
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TradeQuoteApprovalLead(ctx, id, params)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PostMe converts echo context to params.
func (w *ServerInterfaceWrapper) PostMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostMeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x_kanda_protected" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x_kanda_protected")]; found {
		var XKandaProtected PostMeParamsXKandaProtected
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x_kanda_protected, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x_kanda_protected", runtime.ParamLocationHeader, valueList[0], &XKandaProtected)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x_kanda_protected: %s", err))
		}

		params.XKandaProtected = XKandaProtected
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x_kanda_protected is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMe(ctx, params)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetMonitors converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitors(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonitorsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMonitors(ctx, params)
	return err
}

// PostMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMonitor(ctx)
	return err
}

// DeleteMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMonitor(ctx, id)
	return err
}

// GetMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMonitor(ctx, id)
	return err
}

// PutMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PutMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMonitor(ctx, id)
	return err
}

// PostMonitorFlag converts echo context to params.
func (w *ServerInterfaceWrapper) PostMonitorFlag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMonitorFlag(ctx, id)
	return err
}

// GetOnboardings converts echo context to params.
func (w *ServerInterfaceWrapper) GetOnboardings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOnboardingsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOnboardings(ctx, params)
	return err
}

// PostOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) PostOnboarding(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOnboarding(ctx)
	return err
}

// DeleteOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOnboarding(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOnboarding(ctx, id)
	return err
}

// GetOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) GetOnboarding(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOnboarding(ctx, id)
	return err
}

// PutOnboarding converts echo context to params.
func (w *ServerInterfaceWrapper) PutOnboarding(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutOnboarding(ctx, id)
	return err
}

// PostOnboardingDecision converts echo context to params.
func (w *ServerInterfaceWrapper) PostOnboardingDecision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOnboardingDecision(ctx, id)
	return err
}

// GetPartners converts echo context to params.
func (w *ServerInterfaceWrapper) GetPartners(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPartnersParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPartners(ctx, params)
	return err
}

// PostPartner converts echo context to params.
func (w *ServerInterfaceWrapper) PostPartner(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPartner(ctx)
	return err
}

// DeletePartner converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePartner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePartner(ctx, id)
	return err
}

// GetPartner converts echo context to params.
func (w *ServerInterfaceWrapper) GetPartner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPartner(ctx, id)
	return err
}

// PutPartner converts echo context to params.
func (w *ServerInterfaceWrapper) PutPartner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPartner(ctx, id)
	return err
}

// PostPartnerReferrals converts echo context to params.
func (w *ServerInterfaceWrapper) PostPartnerReferrals(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPartnerReferrals(ctx, id)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaymentsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx, params)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// MarkPayment converts echo context to params.
func (w *ServerInterfaceWrapper) MarkPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "status" -------------
	var status MarkPaymentParamsStatus

	err = runtime.BindStyledParameterWithLocation("simple", false, "status", runtime.ParamLocationPath, ctx.Param("status"), &status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkPayment(ctx, id, status)
	return err
}

// GetRates converts echo context to params.
func (w *ServerInterfaceWrapper) GetRates(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRatesParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRates(ctx, params)
	return err
}

// PostRate converts echo context to params.
func (w *ServerInterfaceWrapper) PostRate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRate(ctx)
	return err
}

// DeleteRate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRate(ctx, id)
	return err
}

// GetRate converts echo context to params.
func (w *ServerInterfaceWrapper) GetRate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRate(ctx, id)
	return err
}

// PutRate converts echo context to params.
func (w *ServerInterfaceWrapper) PutRate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRate(ctx, id)
	return err
}

// Runner converts echo context to params.
func (w *ServerInterfaceWrapper) Runner(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RunnerParams
	// ------------- Required query parameter "event" -------------

	err = runtime.BindQueryParameter("form", true, true, "event", ctx.QueryParams(), &params.Event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	// ------------- Required query parameter "task" -------------

	err = runtime.BindQueryParameter("form", true, true, "task", ctx.QueryParams(), &params.Task)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Runner(ctx, params)
	return err
}

// GetSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriptions(ctx, params)
	return err
}

// PostSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSubscription(ctx)
	return err
}

// DeleteSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSubscription(ctx, id)
	return err
}

// GetSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscription(ctx, id)
	return err
}

// PutSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PutSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSubscription(ctx, id)
	return err
}

// PendingSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PendingSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingSubscription(ctx, id)
	return err
}

// GetTrainings converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrainings(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrainings(ctx, params)
	return err
}

// PostTraining converts echo context to params.
func (w *ServerInterfaceWrapper) PostTraining(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTraining(ctx)
	return err
}

// DeleteTraining converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTraining(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTraining(ctx, id)
	return err
}

// GetTraining converts echo context to params.
func (w *ServerInterfaceWrapper) GetTraining(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTraining(ctx, id)
	return err
}

// PutTraining converts echo context to params.
func (w *ServerInterfaceWrapper) PutTraining(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTraining(ctx, id)
	return err
}

// ProviderCheckWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderCheckWebhook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider ProviderCheckWebhookParamsProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, ctx.Param("provider"), &provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProviderCheckWebhook(ctx, provider)
	return err
}

// ProviderWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderWebhook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider ProviderWebhookParamsProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, ctx.Param("provider"), &provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProviderWebhook(ctx, provider)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.POST(baseURL+"/api/company/:id/approve", wrapper.ApproveCompany)
	router.POST(baseURL+"/api/company/:id/billing", wrapper.PostCompanyBilling)
	router.POST(baseURL+"/api/company/:id/billing-success", wrapper.PostCompanyBillingSuccess)
	router.POST(baseURL+"/api/company/:id/decline", wrapper.DeclineCompany)
	router.POST(baseURL+"/api/company/:id/director", wrapper.DirectorCompany)
	router.GET(baseURL+"/api/company/:id/director-verification", wrapper.GetCompanyDirectorVerification)
	router.POST(baseURL+"/api/company/:id/director-verification", wrapper.PostCompanyDirectorVerification)
	router.POST(baseURL+"/api/company/:id/referrals", wrapper.PostCompanyReferrals)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.POST(baseURL+"/api/credit/:id/check", wrapper.CheckCredit)
	router.POST(baseURL+"/api/credit/:id/consent-migrate", wrapper.ConsentMigrateCredit)
	router.POST(baseURL+"/api/credit/:id/migrate", wrapper.MigrateCredit)
	router.POST(baseURL+"/api/credit/:id/quote", wrapper.QuoteCredit)
	router.POST(baseURL+"/api/credit/:id/sign", wrapper.SignCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.GET(baseURL+"/api/enterprise", wrapper.GetEnterprises)
	router.POST(baseURL+"/api/enterprise", wrapper.PostEnterprise)
	router.DELETE(baseURL+"/api/enterprise/:id", wrapper.DeleteEnterprise)
	router.GET(baseURL+"/api/enterprise/:id", wrapper.GetEnterprise)
	router.PUT(baseURL+"/api/enterprise/:id", wrapper.PutEnterprise)
	router.GET(baseURL+"/api/enterprise/:id/branch", wrapper.GetEnterpriseBranches)
	router.POST(baseURL+"/api/enterprise/:id/branch", wrapper.PostEnterpriseBranches)
	router.POST(baseURL+"/api/event", wrapper.PostEvent)
	router.PUT(baseURL+"/api/info/auth", wrapper.InfoAuth)
	router.DELETE(baseURL+"/api/info/cache", wrapper.InfoDeleteCache)
	router.GET(baseURL+"/api/info/cache", wrapper.InfoGetCache)
	router.PUT(baseURL+"/api/info/cache", wrapper.InfoPutCache)
	router.PUT(baseURL+"/api/info/checkout-redirect", wrapper.InfoCheckoutRedirect)
	router.PUT(baseURL+"/api/info/claim-account", wrapper.InfoClaimAccount)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.PUT(baseURL+"/api/info/credit", wrapper.InfoCredit)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.PUT(baseURL+"/api/info/director", wrapper.InfoDirector)
	router.GET(baseURL+"/api/info/enterprise", wrapper.InfoEnterprise)
	router.PUT(baseURL+"/api/info/enterprise-role", wrapper.InfoEnterpriseRole)
	router.GET(baseURL+"/api/info/entity", wrapper.GetInfoEntity)
	router.PUT(baseURL+"/api/info/example-job", wrapper.InfoExampleJob)
	router.PUT(baseURL+"/api/info/ghost", wrapper.InfoGhost)
	router.GET(baseURL+"/api/info/health", wrapper.InfoHealth)
	router.GET(baseURL+"/api/info/ip", wrapper.InfoIP)
	router.PUT(baseURL+"/api/info/lead", wrapper.InfoLead)
	router.PUT(baseURL+"/api/info/legacy-redirect", wrapper.InfoLegacyRedirect)
	router.GET(baseURL+"/api/info/onboarding", wrapper.InfoOnboarding)
	router.GET(baseURL+"/api/info/partner-branding", wrapper.InfoPartnerBranding)
	router.PUT(baseURL+"/api/info/password", wrapper.InfoPassword)
	router.PUT(baseURL+"/api/info/query", wrapper.InfoQuery)
	router.GET(baseURL+"/api/info/rate", wrapper.InfoRate)
	router.PUT(baseURL+"/api/info/session", wrapper.InfoSession)
	router.GET(baseURL+"/api/info/stats", wrapper.InfoStats)
	router.GET(baseURL+"/api/info/trade-summary", wrapper.InfoTradeSummary)
	router.GET(baseURL+"/api/info/validate-email", wrapper.InfoValidateEmail)
	router.PUT(baseURL+"/api/info/verify", wrapper.InfoVerify)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.POST(baseURL+"/api/job/all/payouts", wrapper.PayoutsJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/apply", wrapper.ApplyJob)
	router.POST(baseURL+"/api/job/:id/approve", wrapper.ApproveJobSatNote)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/check", wrapper.CheckJob)
	router.POST(baseURL+"/api/job/:id/checkoutLink", wrapper.JobCheckoutLink)
	router.POST(baseURL+"/api/job/:id/companyInfo", wrapper.JobCompanyInfo)
	router.POST(baseURL+"/api/job/:id/complete", wrapper.CompleteJob)
	router.POST(baseURL+"/api/job/:id/delay", wrapper.DelayJobSatNote)
	router.POST(baseURL+"/api/job/:id/lender-review", wrapper.LenderReviewJobSatNote)
	router.POST(baseURL+"/api/job/:id/override", wrapper.OverrideJob)
	router.POST(baseURL+"/api/job/:id/pay", wrapper.PayJob)
	router.POST(baseURL+"/api/job/:id/payout", wrapper.PayoutJob)
	router.POST(baseURL+"/api/job/:id/quote", wrapper.QuoteJob)
	router.POST(baseURL+"/api/job/:id/reapply", wrapper.ReapplyJob)
	router.POST(baseURL+"/api/job/:id/resend", wrapper.ResendJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.POST(baseURL+"/api/job/:id/signSatNote", wrapper.SignJobSateNote)
	router.POST(baseURL+"/api/job/:id/unarchive", wrapper.UnarchiveJob)
	router.POST(baseURL+"/api/job/:id/viewSatNote", wrapper.ViewJobSatNote)
	router.GET(baseURL+"/api/lead", wrapper.GetLeads)
	router.POST(baseURL+"/api/lead", wrapper.PostLead)
	router.DELETE(baseURL+"/api/lead/:id", wrapper.DeleteLead)
	router.GET(baseURL+"/api/lead/:id", wrapper.GetLead)
	router.PUT(baseURL+"/api/lead/:id", wrapper.PutLead)
	router.POST(baseURL+"/api/lead/:id/accepted-job-summary", wrapper.AcceptedJobSummaryLead)
	router.POST(baseURL+"/api/lead/:id/apply-invite", wrapper.ApplyInviteLead)
	router.POST(baseURL+"/api/lead/:id/budget", wrapper.BudgetLead)
	router.POST(baseURL+"/api/lead/:id/connect-trades", wrapper.ConnectTradesLead)
	router.POST(baseURL+"/api/lead/:id/match-trades", wrapper.MatchTradesLead)
	router.POST(baseURL+"/api/lead/:id/quote", wrapper.QuoteLead)
	router.POST(baseURL+"/api/lead/:id/refer", wrapper.ReferLead)
	router.POST(baseURL+"/api/lead/:id/send-job", wrapper.SendLeadJob)
	router.POST(baseURL+"/api/lead/:id/trade", wrapper.TradeLead)
	router.POST(baseURL+"/api/lead/:id/trade-quote-approval", wrapper.TradeQuoteApprovalLead)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.POST(baseURL+"/api/me", wrapper.PostMe)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/monitor", wrapper.GetMonitors)
	router.POST(baseURL+"/api/monitor", wrapper.PostMonitor)
	router.DELETE(baseURL+"/api/monitor/:id", wrapper.DeleteMonitor)
	router.GET(baseURL+"/api/monitor/:id", wrapper.GetMonitor)
	router.PUT(baseURL+"/api/monitor/:id", wrapper.PutMonitor)
	router.POST(baseURL+"/api/monitor/:id/flag", wrapper.PostMonitorFlag)
	router.GET(baseURL+"/api/onboarding", wrapper.GetOnboardings)
	router.POST(baseURL+"/api/onboarding", wrapper.PostOnboarding)
	router.DELETE(baseURL+"/api/onboarding/:id", wrapper.DeleteOnboarding)
	router.GET(baseURL+"/api/onboarding/:id", wrapper.GetOnboarding)
	router.PUT(baseURL+"/api/onboarding/:id", wrapper.PutOnboarding)
	router.POST(baseURL+"/api/onboarding/:id/decision", wrapper.PostOnboardingDecision)
	router.GET(baseURL+"/api/partner", wrapper.GetPartners)
	router.POST(baseURL+"/api/partner", wrapper.PostPartner)
	router.DELETE(baseURL+"/api/partner/:id", wrapper.DeletePartner)
	router.GET(baseURL+"/api/partner/:id", wrapper.GetPartner)
	router.PUT(baseURL+"/api/partner/:id", wrapper.PutPartner)
	router.POST(baseURL+"/api/partner/:id/referrals", wrapper.PostPartnerReferrals)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)
	router.POST(baseURL+"/api/payment/:id/:status", wrapper.MarkPayment)
	router.GET(baseURL+"/api/rate", wrapper.GetRates)
	router.POST(baseURL+"/api/rate", wrapper.PostRate)
	router.DELETE(baseURL+"/api/rate/:id", wrapper.DeleteRate)
	router.GET(baseURL+"/api/rate/:id", wrapper.GetRate)
	router.PUT(baseURL+"/api/rate/:id", wrapper.PutRate)
	router.GET(baseURL+"/api/runner", wrapper.Runner)
	router.GET(baseURL+"/api/subscription", wrapper.GetSubscriptions)
	router.POST(baseURL+"/api/subscription", wrapper.PostSubscription)
	router.DELETE(baseURL+"/api/subscription/:id", wrapper.DeleteSubscription)
	router.GET(baseURL+"/api/subscription/:id", wrapper.GetSubscription)
	router.PUT(baseURL+"/api/subscription/:id", wrapper.PutSubscription)
	router.POST(baseURL+"/api/subscription/:id/pending", wrapper.PendingSubscription)
	router.GET(baseURL+"/api/training", wrapper.GetTrainings)
	router.POST(baseURL+"/api/training", wrapper.PostTraining)
	router.DELETE(baseURL+"/api/training/:id", wrapper.DeleteTraining)
	router.GET(baseURL+"/api/training/:id", wrapper.GetTraining)
	router.PUT(baseURL+"/api/training/:id", wrapper.PutTraining)
	router.GET(baseURL+"/api/webhook/:provider", wrapper.ProviderCheckWebhook)
	router.POST(baseURL+"/api/webhook/:provider", wrapper.ProviderWebhook)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/OZPj//0eHF9cf3/BQAA///AqRLr1aMCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
