// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CheckoutOption.
const (
	ApplyForFinance CheckoutOption = "apply_for_finance"
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyBilling.
const (
	CompanyBillingCancelled               CompanyBilling = "cancelled"
	CompanyBillingLegacy                  CompanyBilling = "legacy"
	CompanyBillingPending                 CompanyBilling = "pending"
	CompanyBillingRecurringPaymentFailed1 CompanyBilling = "recurring_payment_failed_1"
	CompanyBillingRecurringPaymentFailed2 CompanyBilling = "recurring_payment_failed_2"
	CompanyBillingRecurringPaymentFailed3 CompanyBilling = "recurring_payment_failed_3"
	CompanyBillingReferred                CompanyBilling = "referred"
	CompanyBillingSubscribed              CompanyBilling = "subscribed"
	CompanyBillingSuspended               CompanyBilling = "suspended"
	CompanyBillingTrial                   CompanyBilling = "trial"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup       CompanyLifecycle = "completed_setup"
	CompanyLifecycleDeclined             CompanyLifecycle = "declined"
	CompanyLifecycleDirectorInfoProvided CompanyLifecycle = "director_info_provided"
	CompanyLifecycleInsuranceUploaded    CompanyLifecycle = "insurance_uploaded"
	CompanyLifecycleOnboarded            CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered           CompanyLifecycle = "registered"
	CompanyLifecycleSubscribed           CompanyLifecycle = "subscribed"
	CompanyLifecycleVerified             CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyAcrib   CompanyInfoTradeBody = "acrib"
	CompanyInfoTradeBodyAphc    CompanyInfoTradeBody = "aphc"
	CompanyInfoTradeBodyAssure  CompanyInfoTradeBody = "assure"
	CompanyInfoTradeBodyCertass CompanyInfoTradeBody = "certass"
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyFensa   CompanyInfoTradeBody = "fensa"
	CompanyInfoTradeBodyFeta    CompanyInfoTradeBody = "feta"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyHetas   CompanyInfoTradeBody = "hetas"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNfrc    CompanyInfoTradeBody = "nfrc"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyNone    CompanyInfoTradeBody = "none"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	BatteryStorage               CompanyInfoTradeType = "battery_storage"
	BlindsAndShutters            CompanyInfoTradeType = "blinds_and_shutters"
	Carpentry                    CompanyInfoTradeType = "carpentry"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	Conservatories               CompanyInfoTradeType = "conservatories"
	Decking                      CompanyInfoTradeType = "decking"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fencing                      CompanyInfoTradeType = "fencing"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FittedBedroomFurniture       CompanyInfoTradeType = "fitted_bedroom_furniture"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GardenRooms                  CompanyInfoTradeType = "garden_rooms"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	Gates                        CompanyInfoTradeType = "gates"
	HeatPumps                    CompanyInfoTradeType = "heat_pumps"
	HeatingSystems               CompanyInfoTradeType = "heating_systems"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Plumbing                     CompanyInfoTradeType = "plumbing"
	ResinDriveways               CompanyInfoTradeType = "resin_driveways"
	RoofingExcludingFlatRoofs    CompanyInfoTradeType = "roofing__excluding_flat_roofs"
	SecuritySystems              CompanyInfoTradeType = "security_systems"
	Tiler                        CompanyInfoTradeType = "tiler"
	Verandas                     CompanyInfoTradeType = "verandas"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for ContractAgreementAgreedTermsAndConditions.
const (
	ContractAgreementAgreedTermsAndConditionsNo  ContractAgreementAgreedTermsAndConditions = "no"
	ContractAgreementAgreedTermsAndConditionsYes ContractAgreementAgreedTermsAndConditions = "yes"
)

// Defines values for ContractAgreementAgreedToBecomeIarOfKanda.
const (
	ContractAgreementAgreedToBecomeIarOfKandaNo  ContractAgreementAgreedToBecomeIarOfKanda = "no"
	ContractAgreementAgreedToBecomeIarOfKandaYes ContractAgreementAgreedToBecomeIarOfKanda = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindCharge CreditKind = "charge"
	CreditKindJob    CreditKind = "job"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateCancelled      CreditState = "cancelled"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsGender.
const (
	Female CustomerDetailsGender = "female"
	Male   CustomerDetailsGender = "male"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	ArmedForces                      CustomerDetailsResidentialStatus = "armed_forces"
	CouncilTenant                    CustomerDetailsResidentialStatus = "council_tenant"
	HomeownerBuyToLetLivingElsewhere CustomerDetailsResidentialStatus = "homeowner_buy_to_let_living_elsewhere"
	HomeownerSharedOwnership         CustomerDetailsResidentialStatus = "homeowner_shared_ownership"
	LivingWithParents                CustomerDetailsResidentialStatus = "living_with_parents"
	Lodger                           CustomerDetailsResidentialStatus = "lodger"
	Owner                            CustomerDetailsResidentialStatus = "owner"
	OwnerWithoutMortgage             CustomerDetailsResidentialStatus = "owner_without_mortgage"
	Tenant                           CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for CustomerDetailsTitle.
const (
	Dr   CustomerDetailsTitle = "dr"
	Miss CustomerDetailsTitle = "miss"
	Mr   CustomerDetailsTitle = "mr"
	Mrs  CustomerDetailsTitle = "mrs"
	Ms   CustomerDetailsTitle = "ms"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	NotVerified           DirectorInfoVerificationStatus = "not_verified"
	VerificationDeclined  DirectorInfoVerificationStatus = "verification_declined"
	VerificationSubmitted DirectorInfoVerificationStatus = "verification_submitted"
	Verified              DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmployedDetailsEmployedType.
const (
	EmployedDetailsEmployedTypeFullTime EmployedDetailsEmployedType = "full_time"
	EmployedDetailsEmployedTypePartTime EmployedDetailsEmployedType = "part_time"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for ExpenditureExpenditureType.
const (
	ChildSupportAgency ExpenditureExpenditureType = "child_support_agency"
	Clothes            ExpenditureExpenditureType = "clothes"
	CouncilTaxAndBills ExpenditureExpenditureType = "council_tax_and_bills"
	CreditCard         ExpenditureExpenditureType = "credit_card"
	Healthcare         ExpenditureExpenditureType = "healthcare"
	Holidays           ExpenditureExpenditureType = "holidays"
	Mortgage           ExpenditureExpenditureType = "mortgage"
	Rent               ExpenditureExpenditureType = "rent"
)

// Defines values for FinanceDetailsBankrupcyOrIvaInLast5Years.
const (
	FinanceDetailsBankrupcyOrIvaInLast5YearsNo  FinanceDetailsBankrupcyOrIvaInLast5Years = "no"
	FinanceDetailsBankrupcyOrIvaInLast5YearsYes FinanceDetailsBankrupcyOrIvaInLast5Years = "yes"
)

// Defines values for FinanceProvider.
const (
	Allium    FinanceProvider = "allium"
	Omni      FinanceProvider = "omni"
	Propensio FinanceProvider = "propensio"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinanceCancelled   FinanceStatus = "finance_cancelled"
	FinanceStatusFinanceNotApproved FinanceStatus = "finance_not_approved"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusNotApplied         FinanceStatus = "not_applied"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusPayoutPending      FinanceStatus = "payout_pending"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for IncomeIncomeType.
const (
	IncomeIncomeTypeBenefits             IncomeIncomeType = "benefits"
	IncomeIncomeTypeEarningAfterTax      IncomeIncomeType = "earning_after_tax"
	IncomeIncomeTypeOtherSourcesOfIncome IncomeIncomeType = "other_sources_of_income"
	IncomeIncomeTypePensions             IncomeIncomeType = "pensions"
)

// Defines values for IncomeIncomeTypeInfo.
const (
	Applicant    IncomeIncomeTypeInfo = "applicant"
	Household    IncomeIncomeTypeInfo = "household"
	NotSpecified IncomeIncomeTypeInfo = "not_specified"
)

// Defines values for InfoValidationEmailVerdict.
const (
	Invalid InfoValidationEmailVerdict = "invalid"
	Risky   InfoValidationEmailVerdict = "risky"
	Valid   InfoValidationEmailVerdict = "valid"
)

// Defines values for JobArchived.
const (
	JobArchivedNo  JobArchived = "no"
	JobArchivedYes JobArchived = "yes"
)

// Defines values for JobDepositType.
const (
	FixedDeposit   JobDepositType = "fixed_deposit"
	NoDeposit      JobDepositType = "no_deposit"
	PartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobJobType.
const (
	Solar    JobJobType = "solar"
	Standard JobJobType = "standard"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusFinished JobStatus = "finished"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobCreditStateCurrentStatus.
const (
	Accepted                JobCreditStateCurrentStatus = "accepted"
	AcceptedDepositRequired JobCreditStateCurrentStatus = "accepted_deposit_required"
	AcceptedSignDocument    JobCreditStateCurrentStatus = "accepted_sign_document"
	ActionCustomer          JobCreditStateCurrentStatus = "action_customer"
	ActionLender            JobCreditStateCurrentStatus = "action_lender"
	Cancelled               JobCreditStateCurrentStatus = "cancelled"
	Declined                JobCreditStateCurrentStatus = "declined"
	Finished                JobCreditStateCurrentStatus = "finished"
	NotSubmitted            JobCreditStateCurrentStatus = "not_submitted"
	PaidOut                 JobCreditStateCurrentStatus = "paid_out"
	Pending                 JobCreditStateCurrentStatus = "pending"
	Referred                JobCreditStateCurrentStatus = "referred"
)

// Defines values for JobItemStyle.
const (
	JobItemStyleCustom JobItemStyle = "custom"
	JobItemStyleKanda  JobItemStyle = "kanda"
)

// Defines values for JobItemVatRate.
const (
	Custom    JobItemVatRate = "custom"
	Exempted  JobItemVatRate = "exempted"
	N0        JobItemVatRate = "0%"
	N20       JobItemVatRate = "20%"
	N5        JobItemVatRate = "5%"
	VatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for JobOverrideAction.
const (
	MarkJobAsAccepted  JobOverrideAction = "mark_job_as_accepted"
	MarkJobAsCancelled JobOverrideAction = "mark_job_as_cancelled"
	MarkJobAsDeclined  JobOverrideAction = "mark_job_as_declined"
	MarkJobAsPending   JobOverrideAction = "mark_job_as_pending"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for NotEmployedDetailsSourceOfIncome.
const (
	NotEmployedDetailsSourceOfIncomeBenefits      NotEmployedDetailsSourceOfIncome = "benefits"
	NotEmployedDetailsSourceOfIncomeDisabled      NotEmployedDetailsSourceOfIncome = "disabled"
	NotEmployedDetailsSourceOfIncomeFulltimeCarer NotEmployedDetailsSourceOfIncome = "fulltime_carer"
	NotEmployedDetailsSourceOfIncomeHomemaker     NotEmployedDetailsSourceOfIncome = "homemaker"
	NotEmployedDetailsSourceOfIncomeMaintenance   NotEmployedDetailsSourceOfIncome = "maintenance"
	NotEmployedDetailsSourceOfIncomeOther         NotEmployedDetailsSourceOfIncome = "other"
	NotEmployedDetailsSourceOfIncomePartner       NotEmployedDetailsSourceOfIncome = "partner"
	NotEmployedDetailsSourceOfIncomePermanentDla  NotEmployedDetailsSourceOfIncome = "permanent_dla"
	NotEmployedDetailsSourceOfIncomeStudent       NotEmployedDetailsSourceOfIncome = "student"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"
	PaymentKindJob    PaymentKind = "job"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for PaymentOptionPaymentMethod.
const (
	Card PaymentOptionPaymentMethod = "card"
	Cash PaymentOptionPaymentMethod = "cash"
	Loan PaymentOptionPaymentMethod = "loan"
)

// Defines values for SatNoteQAdvice.
const (
	TheyCompletedTheApplicationForMe         SatNoteQAdvice = "They completed the application for me"
	TheyHelpedMeWorkOutMyPotentialRepayments SatNoteQAdvice = "They helped me work out my potential repayments"
	TheyJustSentMeALinkToApply               SatNoteQAdvice = "They just sent me a link to apply"
	TheyToldMeWhatRatesWhereAvailable        SatNoteQAdvice = "They told me what rates where available"
)

// Defines values for SatNoteQApplication.
const (
	ICompletedTheApplicationMyself          SatNoteQApplication = "I completed the application myself"
	SomeoneCompletedTheAppliationOnMyBehalf SatNoteQApplication = "Someone completed the appliation on my behalf"
)

// Defines values for SatNoteQAvailability.
const (
	IFoundOutWhenTheInstallerSentMeALinkViaKanda SatNoteQAvailability = "I found out when the installer sent me a link via Kanda"
	ISawItAdvertisedByTheInstaller               SatNoteQAvailability = "I saw it advertised by the installer"
	TheInstallerToldMeWhenQuotingMe              SatNoteQAvailability = "The installer told me when quoting me"
)

// Defines values for SatNoteQEasiness.
const (
	SatNoteQEasinessNo       SatNoteQEasiness = "no"
	SatNoteQEasinessSomewhat SatNoteQEasiness = "somewhat"
	SatNoteQEasinessYes      SatNoteQEasiness = "yes"
)

// Defines values for SatNoteQPressure.
const (
	SatNoteQPressureNo       SatNoteQPressure = "no"
	SatNoteQPressureSomewhat SatNoteQPressure = "somewhat"
	SatNoteQPressureYes      SatNoteQPressure = "yes"
)

// Defines values for SatNoteQSaving.
const (
	NoIDoNotUnderstand SatNoteQSaving = "No I do not understand"
	YesIUnderstand     SatNoteQSaving = "Yes I understand"
)

// Defines values for SelfEmployedDetailsSelfEmployedType.
const (
	SelfEmployedDetailsSelfEmployedTypeFullTime SelfEmployedDetailsSelfEmployedType = "full_time"
	SelfEmployedDetailsSelfEmployedTypePartTime SelfEmployedDetailsSelfEmployedType = "part_time"
)

// Defines values for SignatureSigned.
const (
	No  SignatureSigned = "no"
	Yes SignatureSigned = "yes"
)

// Defines values for SolarCompanyInfoElectricalTradeAssociation.
const (
	Napit  SolarCompanyInfoElectricalTradeAssociation = "napit"
	Niceic SolarCompanyInfoElectricalTradeAssociation = "niceic"
	None   SolarCompanyInfoElectricalTradeAssociation = "none"
)

// Defines values for SolarCompanyInfoSolarTradeAssociation.
const (
	Heis SolarCompanyInfoSolarTradeAssociation = "heis"
	Msc  SolarCompanyInfoSolarTradeAssociation = "msc"
	Recc SolarCompanyInfoSolarTradeAssociation = "recc"
)

// Defines values for SubscriptionInterval.
const (
	Monthly SubscriptionInterval = "monthly"
	Yearly  SubscriptionInterval = "yearly"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// ApplicantDetails defines model for ApplicantDetails.
type ApplicantDetails struct {
	AdditionalEmploymentDetails *[]EmploymentDetails `json:"additional_employment_details,omitempty"`
	BankAccount                 BankAccount          `json:"bank_account"`
	CustomerDetails             CustomerDetails      `json:"customer_details"`
	EmploymentDetails           EmploymentDetails    `json:"employment_details"`
	FinanceDetails              FinanceDetails       `json:"finance_details"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
	Verified bool                `json:"verified"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled  bool            `json:"enabled"`
	Fee      int             `json:"fee"`
	Name     string          `json:"name"`
	Provider FinanceProvider `json:"provider"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	MonthsHeld    *int32 `json:"months_held,omitempty"`
	SortCode      string `json:"sort_code"`
}

// checkout option picked by customer, updated only via custom action
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	Aid                *string                 `json:"aid,omitempty"`
	AvailableRates     *[]AvailableRate        `json:"available_rates,omitempty"`
	BankAccount        *BankAccount            `json:"bank_account,omitempty"`
	Billing            *CompanyBilling         `json:"billing,omitempty"`
	Cid                *string                 `json:"cid,omitempty"`
	CompanyInfo        *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo        *Document               `json:"company_logo,omitempty"`
	CompanyType        CompanyCompanyType      `json:"company_type"`
	ContactInfo        *ContactInfo            `json:"contact_info,omitempty"`
	Emails             *[]openapi_types.Email  `json:"emails,omitempty"`
	Id                 *string                 `json:"id,omitempty"`
	Lifecycle          *CompanyLifecycle       `json:"lifecycle,omitempty"`
	LimitedCompanyInfo *LimitedCompanyInfo     `json:"limited_company_info,omitempty"`
	Metadata           *Metadata               `json:"metadata,omitempty"`
	Oid                *string                 `json:"oid,omitempty"`
	QuotePreference    *CompanyQuotePreference `json:"quote_preference,omitempty"`
	RedirectUrls       *RedirectURLs           `json:"redirect_urls,omitempty"`
	ReferralCode       *string                 `json:"referral_code,omitempty"`
	SkipDeposit        *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	SolarCompanyInfo   *SolarCompanyInfo       `json:"solar_company_info,omitempty"`
	SoleTraderInfo     *SoleTraderInfo         `json:"sole_trader_info,omitempty"`
	Users              *[]UserType             `json:"users,omitempty"`
}

// CompanyBilling defines model for Company.Billing.
type CompanyBilling string

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    Pence                       `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	ContractAgreement  *ContractAgreement          `json:"contract_agreement,omitempty"`
	InsuranceDocument  *Document                   `json:"insurance_document,omitempty"`
	TradeBody          CompanyInfoTradeBody        `json:"trade_body"`
	TradeBodyName      string                      `json:"trade_body_name"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	TradeTypeName      string                      `json:"trade_type_name"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// ContactInfo defines model for ContactInfo.
type ContactInfo struct {
	ContactAddress *Address             `json:"contact_address,omitempty"`
	ContactEmail   *openapi_types.Email `json:"contact_email,omitempty"`
	ContactName    *string              `json:"contact_name,omitempty"`
	ContactPhone   *string              `json:"contact_phone,omitempty"`
	TradingName    *string              `json:"trading_name,omitempty"`
}

// ContractAgreement defines model for ContractAgreement.
type ContractAgreement struct {
	AgreedTermsAndConditions *ContractAgreementAgreedTermsAndConditions `json:"agreed_terms_and_conditions,omitempty"`
	AgreedToBecomeIarOfKanda *ContractAgreementAgreedToBecomeIarOfKanda `json:"agreed_to_become_iar_of_kanda,omitempty"`
	Contract                 *Document                                  `json:"contract,omitempty"`
	PrintName                *string                                    `json:"print_name,omitempty"`
	SignedAt                 *time.Time                                 `json:"signed_at,omitempty"`
}

// ContractAgreementAgreedTermsAndConditions defines model for ContractAgreement.AgreedTermsAndConditions.
type ContractAgreementAgreedTermsAndConditions string

// ContractAgreementAgreedToBecomeIarOfKanda defines model for ContractAgreement.AgreedToBecomeIarOfKanda.
type ContractAgreementAgreedToBecomeIarOfKanda string

// Credit defines model for Credit.
type Credit struct {
	AdditionalEmploymentDetails *[]EmploymentDetails `json:"additional_employment_details,omitempty"`
	Aid                         *string              `json:"aid,omitempty"`
	Amount                      *Money               `json:"amount,omitempty"`
	BankAccount                 BankAccount          `json:"bank_account"`
	Cid                         *string              `json:"cid,omitempty"`
	CreditDocuments             *[]Document          `json:"credit_documents,omitempty"`
	CustomerDetails             CustomerDetails      `json:"customer_details"`
	DepositValue                *Money               `json:"deposit_value,omitempty"`
	EmploymentDetails           EmploymentDetails    `json:"employment_details"`
	ExtraApplicants             *[]ApplicantDetails  `json:"extra_applicants,omitempty"`
	FinanceDetails              *FinanceDetails      `json:"finance_details,omitempty"`

	// finance option
	FinanceOption *string          `json:"finance_option,omitempty"`
	Id            *string          `json:"id,omitempty"`
	Kid           *string          `json:"kid,omitempty"`
	Kind          *CreditKind      `json:"kind,omitempty"`
	Metadata      *Metadata        `json:"metadata,omitempty"`
	Oid           *string          `json:"oid,omitempty"`
	Provider      *FinanceProvider `json:"provider,omitempty"`
	Signature     *Signature       `json:"signature,omitempty"`
	State         *CreditState     `json:"state,omitempty"`
	Xid           *string          `json:"xid,omitempty"`
	Xref          *string          `json:"xref,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `dd/mm/yyyy`
	DateOfBirth          time.Time                        `json:"date_of_birth"`
	Email                openapi_types.Email              `json:"email"`
	FirstName            string                           `json:"first_name"`
	Gender               CustomerDetailsGender            `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`
	Title                CustomerDetailsTitle             `json:"title"`
}

// CustomerDetailsGender defines model for CustomerDetails.Gender.
type CustomerDetailsGender string

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerDetailsTitle defines model for CustomerDetails.Title.
type CustomerDetailsTitle string

// CustomerOptions defines model for CustomerOptions.
type CustomerOptions struct {
	// checkout option picked by customer, updated only via custom action
	CheckoutOption CheckoutOption `json:"checkout_option"`
	DepositValue   *Money         `json:"deposit_value,omitempty"`

	// finance option
	FinanceOption string `json:"finance_option"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	DateOfBirth        *string                         `json:"date_of_birth,omitempty"`
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// DirectorVerification defines model for DirectorVerification.
type DirectorVerification struct {
	DateOfBirth *time.Time          `json:"date_of_birth,omitempty"`
	Email       openapi_types.Email `json:"email"`
	FirstName   string              `json:"first_name"`
	HomeAddress Address             `json:"home_address"`
	LastName    string              `json:"last_name"`
	Mobile      string              `json:"mobile"`
}

// Document defines model for Document.
type Document struct {
	Aid      *string   `json:"aid,omitempty"`
	Cid      *string   `json:"cid,omitempty"`
	Content  *string   `json:"content,omitempty"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// EmployedDetails defines model for EmployedDetails.
type EmployedDetails struct {
	EmployedType   *EmployedDetailsEmployedType `json:"employed_type,omitempty"`
	EmployerName   string                       `json:"employer_name"`
	MainOccupation string                       `json:"main_occupation"`
	MonthsEmployed int32                        `json:"months_employed"`
}

// EmployedDetailsEmployedType defines model for EmployedDetails.EmployedType.
type EmployedDetailsEmployedType string

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	EmployedDetails       *EmployedDetails                  `json:"employed_details,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome *Money                            `json:"household_annual_income,omitempty"`
	NotEmployedDetails    *NotEmployedDetails               `json:"not_employed_details,omitempty"`
	SelfEmployedDetails   *SelfEmployedDetails              `json:"self_employed_details,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expenditure defines model for Expenditure.
type Expenditure struct {
	ExpenditureType *ExpenditureExpenditureType `json:"expenditure_type,omitempty"`
	MonthlyAmount   *Money                      `json:"monthly_amount,omitempty"`
}

// ExpenditureExpenditureType defines model for Expenditure.ExpenditureType.
type ExpenditureExpenditureType string

// FinanceDetails defines model for FinanceDetails.
type FinanceDetails struct {
	BankrupcyOrIvaInLast5Years *FinanceDetailsBankrupcyOrIvaInLast5Years `json:"bankrupcy_or_iva_in_last_5_years,omitempty"`
	Expenditures               *[]Expenditure                            `json:"expenditures,omitempty"`
	Incomes                    *[]Income                                 `json:"incomes,omitempty"`
}

// FinanceDetailsBankrupcyOrIvaInLast5Years defines model for FinanceDetails.BankrupcyOrIvaInLast5Years.
type FinanceDetailsBankrupcyOrIvaInLast5Years string

// FinanceProvider defines model for FinanceProvider.
type FinanceProvider string

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// Income defines model for Income.
type Income struct {
	IncomeType     *IncomeIncomeType     `json:"income_type,omitempty"`
	IncomeTypeInfo *IncomeIncomeTypeInfo `json:"income_type_info,omitempty"`
	MonthlyAmount  *Money                `json:"monthly_amount,omitempty"`
}

// IncomeIncomeType defines model for Income.IncomeType.
type IncomeIncomeType string

// IncomeIncomeTypeInfo defines model for Income.IncomeTypeInfo.
type IncomeIncomeTypeInfo string

// InfoAuth defines model for InfoAuth.
type InfoAuth struct {
	ContinueUrl *string             `json:"continue_url,omitempty"`
	Email       openapi_types.Email `json:"email"`
}

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType         `json:"directors,omitempty"`
	Id             *string             `json:"id,omitempty"`
	LimitedCompany *LimitedCompanyInfo `json:"limited_company,omitempty"`
	Metadata       *Metadata           `json:"metadata,omitempty"`
	SoleTrader     *SoleTraderInfo     `json:"sole_trader,omitempty"`
}

// InfoGhost defines model for InfoGhost.
type InfoGhost struct {
	BearerToken *string             `json:"bearer_token,omitempty"`
	CustomRole  *string             `json:"custom_role,omitempty"`
	CustomToken *string             `json:"custom_token,omitempty"`
	Email       openapi_types.Email `json:"email"`
}

// InfoIP defines model for InfoIP.
type InfoIP struct {
	Ipv4 string `json:"ipv4"`
}

// InfoLegacyRedirect defines model for InfoLegacyRedirect.
type InfoLegacyRedirect struct {
	Deposit *Pence `json:"deposit,omitempty"`

	// The description of the goods.
	DescriptionOfGoods string `json:"description_of_goods"`

	// The email of the customer applying for the loan
	Email openapi_types.Email `json:"email"`

	// specified the enabled rates for the loan
	EnabledRates *[]string `json:"enabled_rates,omitempty"`

	// Your enterprise ID
	EnterpriseId string `json:"enterprise_id"`

	// The first name of the customer applying for the loan
	FirstName *string `json:"first_name,omitempty"`

	// The last name of the customer applying for the loan
	LastName *string `json:"last_name,omitempty"`

	// The mobile number of the customer applying for the loan
	Mobile       *string       `json:"mobile,omitempty"`
	Price        Pence         `json:"price"`
	RedirectUrls *RedirectURLs `json:"redirect_urls,omitempty"`

	// The reference for the loan application. Is mainly used for tracking loan applications
	Reference string `json:"reference"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Name     *string              `json:"name,omitempty"`
	Phone    *string              `json:"phone,omitempty"`
	PhotoURL *string              `json:"photoURL,omitempty"`
}

// InfoSession defines model for InfoSession.
type InfoSession struct {
	Code        string  `json:"code"`
	CustomToken *string `json:"custom_token,omitempty"`
}

// InfoValidationEmail defines model for InfoValidationEmail.
type InfoValidationEmail struct {
	Email      *openapi_types.Email        `json:"email,omitempty"`
	Source     *string                     `json:"source,omitempty"`
	Suggestion *string                     `json:"suggestion,omitempty"`
	Verdict    *InfoValidationEmailVerdict `json:"verdict,omitempty"`
}

// InfoValidationEmailVerdict defines model for InfoValidationEmail.Verdict.
type InfoValidationEmailVerdict string

// Job defines model for Job.
type Job struct {
	Aid             *string           `json:"aid,omitempty"`
	Archived        *JobArchived      `json:"archived,omitempty"`
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	CustomerOptions *CustomerOptions  `json:"customer_options,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobDocuments    *[]Document       `json:"job_documents,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	JobType         *JobJobType       `json:"job_type,omitempty"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Payments        *[]Payment        `json:"payments,omitempty"`
	RedirectUrls    *RedirectURLs     `json:"redirect_urls,omitempty"`
	SatNote         *SatNote          `json:"sat_note,omitempty"`
	SatNoteTimeline *SatNoteTimeline  `json:"sat_note_timeline,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
	Xid             *string           `json:"xid,omitempty"`
	Xref            *string           `json:"xref,omitempty"`
}

// JobArchived defines model for Job.Archived.
type JobArchived string

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobJobType defines model for Job.JobType.
type JobJobType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobCompanyInfo defines model for JobCompanyInfo.
type JobCompanyInfo struct {
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	CompanyLogo *Document    `json:"company_logo,omitempty"`
	CompanyName *string      `json:"company_name,omitempty"`
	ContactInfo *ContactInfo `json:"contact_info,omitempty"`
	VatNumber   *string      `json:"vat_number,omitempty"`
}

// JobCreditState defines model for JobCreditState.
type JobCreditState struct {
	CurrentStatus         *JobCreditStateCurrentStatus `json:"current_status,omitempty"`
	HasFinanceApplication *bool                        `json:"has_finance_application,omitempty"`
	Id                    *string                      `json:"id,omitempty"`
}

// JobCreditStateCurrentStatus defines model for JobCreditState.CurrentStatus.
type JobCreditStateCurrentStatus string

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Style         *JobItemStyle   `json:"style,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemStyle defines model for JobItem.Style.
type JobItemStyle string

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// JobOverride defines model for JobOverride.
type JobOverride struct {
	Action JobOverrideAction `json:"action"`
}

// JobOverrideAction defines model for JobOverride.Action.
type JobOverrideAction string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// NotEmployedDetails defines model for NotEmployedDetails.
type NotEmployedDetails struct {
	SourceOfIncome NotEmployedDetailsSourceOfIncome `json:"source_of_income"`
}

// NotEmployedDetailsSourceOfIncome defines model for NotEmployedDetails.SourceOfIncome.
type NotEmployedDetailsSourceOfIncome string

// Payment defines model for Payment.
type Payment struct {
	Aid           *string        `json:"aid,omitempty"`
	Cid           *string        `json:"cid,omitempty"`
	Id            *string        `json:"id,omitempty"`
	Kid           *string        `json:"kid,omitempty"`
	Kind          *PaymentKind   `json:"kind,omitempty"`
	Metadata      *Metadata      `json:"metadata,omitempty"`
	Oid           *string        `json:"oid,omitempty"`
	PaymentOption PaymentOption  `json:"payment_option"`
	Status        *PaymentStatus `json:"status,omitempty"`
	Xid           *string        `json:"xid,omitempty"`
	Xref          *string        `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentOption defines model for PaymentOption.
type PaymentOption struct {
	Amount        Money                      `json:"amount"`
	PaymentMethod PaymentOptionPaymentMethod `json:"payment_method"`
}

// PaymentOptionPaymentMethod defines model for PaymentOption.PaymentMethod.
type PaymentOptionPaymentMethod string

// Pence defines model for Pence.
type Pence int32

// RedirectURLs defines model for RedirectURLs.
type RedirectURLs struct {
	CheckoutUrl *string `json:"checkout_url,omitempty"`
	FailureUrl  *string `json:"failure_url,omitempty"`
	SuccessUrl  *string `json:"success_url,omitempty"`
	WebhookUrl  *string `json:"webhook_url,omitempty"`
}

// SatNote defines model for SatNote.
type SatNote struct {
	Certificate   Document             `json:"certificate"`
	QAdvice       SatNoteQAdvice       `json:"q_advice"`
	QApplication  SatNoteQApplication  `json:"q_application"`
	QAvailability SatNoteQAvailability `json:"q_availability"`
	QEasiness     SatNoteQEasiness     `json:"q_easiness"`
	QPressure     SatNoteQPressure     `json:"q_pressure"`
	QSaving       *SatNoteQSaving      `json:"q_saving,omitempty"`
	Signature     Signature            `json:"signature"`
}

// SatNoteQAdvice defines model for SatNote.QAdvice.
type SatNoteQAdvice string

// SatNoteQApplication defines model for SatNote.QApplication.
type SatNoteQApplication string

// SatNoteQAvailability defines model for SatNote.QAvailability.
type SatNoteQAvailability string

// SatNoteQEasiness defines model for SatNote.QEasiness.
type SatNoteQEasiness string

// SatNoteQPressure defines model for SatNote.QPressure.
type SatNoteQPressure string

// SatNoteQSaving defines model for SatNote.QSaving.
type SatNoteQSaving string

// SatNoteTimeline defines model for SatNoteTimeline.
type SatNoteTimeline struct {
	SentAt   *time.Time `json:"sent_at,omitempty"`
	SignedAt *time.Time `json:"signed_at,omitempty"`
	ViewedAt *time.Time `json:"viewed_at,omitempty"`
}

// SelfEmployedDetails defines model for SelfEmployedDetails.
type SelfEmployedDetails struct {
	BusinessName       string                               `json:"business_name"`
	MonthsSelfEmployed int32                                `json:"months_self_employed"`
	SelfEmployedType   *SelfEmployedDetailsSelfEmployedType `json:"self_employed_type,omitempty"`
	TypeOfBusiness     string                               `json:"type_of_business"`
}

// SelfEmployedDetailsSelfEmployedType defines model for SelfEmployedDetails.SelfEmployedType.
type SelfEmployedDetailsSelfEmployedType string

// SignDocument defines model for SignDocument.
type SignDocument struct {
	Quote     Document  `json:"quote"`
	Signature Signature `json:"signature"`
}

// Signature defines model for Signature.
type Signature struct {
	Fingerprint string          `json:"fingerprint"`
	Signed      SignatureSigned `json:"signed"`
}

// SignatureSigned defines model for Signature.Signed.
type SignatureSigned string

// SolarCompanyInfo defines model for SolarCompanyInfo.
type SolarCompanyInfo struct {
	ElectricalTradeAssociation       SolarCompanyInfoElectricalTradeAssociation `json:"electrical_trade_association"`
	ElectricalTradeAssociationNumber *string                                    `json:"electrical_trade_association_number,omitempty"`
	EpvsRegistrationNumber           string                                     `json:"epvs_registration_number"`
	SolarTradeAssociation            SolarCompanyInfoSolarTradeAssociation      `json:"solar_trade_association"`
	SolarTradeAssociationNumber      string                                     `json:"solar_trade_association_number"`
}

// SolarCompanyInfoElectricalTradeAssociation defines model for SolarCompanyInfo.ElectricalTradeAssociation.
type SolarCompanyInfoElectricalTradeAssociation string

// SolarCompanyInfoSolarTradeAssociation defines model for SolarCompanyInfo.SolarTradeAssociation.
type SolarCompanyInfoSolarTradeAssociation string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber *string `json:"national_insurance_number,omitempty"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	Aid              *string               `json:"aid,omitempty"`
	Amount           *Money                `json:"amount,omitempty"`
	AuthorisationUrl *string               `json:"authorisation_url,omitempty"`
	Billing          *string               `json:"billing,omitempty"`
	BillingStatus    *string               `json:"billing_status,omitempty"`
	Cid              *string               `json:"cid,omitempty"`
	DayOfMonth       *int32                `json:"day_of_month,omitempty"`
	Id               *string               `json:"id,omitempty"`
	Interval         *SubscriptionInterval `json:"interval,omitempty"`
	Mandate          *string               `json:"mandate,omitempty"`
	MandateStatus    *string               `json:"mandate_status,omitempty"`
	Metadata         *Metadata             `json:"metadata,omitempty"`
	Oid              *string               `json:"oid,omitempty"`
	Xid              *string               `json:"xid,omitempty"`
	Xref             *string               `json:"xref,omitempty"`
}

// SubscriptionInterval defines model for Subscription.Interval.
type SubscriptionInterval string

// Tally defines model for Tally.
type Tally struct {
	Failure *string `json:"failure,omitempty"`
	Id      string  `json:"id"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// DeclineCompanyParams defines parameters for DeclineCompany.
type DeclineCompanyParams struct {
	// reject or decline reason
	Reason DeclineCompanyParamsReason `form:"reason" json:"reason"`
}

// DeclineCompanyParamsReason defines parameters for DeclineCompany.
type DeclineCompanyParamsReason string

// GetCompanyDirectorVerificationParams defines parameters for GetCompanyDirectorVerification.
type GetCompanyDirectorVerificationParams struct {
	// filter owner / director by email
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PostCompanyDirectorVerificationJSONBody defines parameters for PostCompanyDirectorVerification.
type PostCompanyDirectorVerificationJSONBody DirectorVerification

// PostCompanyDirectorVerificationParams defines parameters for PostCompanyDirectorVerification.
type PostCompanyDirectorVerificationParams struct {
	// owner / director email
	Email string `form:"email" json:"email"`
}

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// SignCreditJSONBody defines parameters for SignCredit.
type SignCreditJSONBody SignDocument

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoAuthJSONBody defines parameters for InfoAuth.
type InfoAuthJSONBody InfoAuth

// InfoClaimAccountJSONBody defines parameters for InfoClaimAccount.
type InfoClaimAccountJSONBody InfoAuth

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// InfoGhostJSONBody defines parameters for InfoGhost.
type InfoGhostJSONBody InfoGhost

// InfoLegacyRedirectJSONBody defines parameters for InfoLegacyRedirect.
type InfoLegacyRedirectJSONBody InfoLegacyRedirect

// InfoPasswordJSONBody defines parameters for InfoPassword.
type InfoPasswordJSONBody InfoAuth

// InfoSessionJSONBody defines parameters for InfoSession.
type InfoSessionJSONBody InfoSession

// InfoValidateEmailParams defines parameters for InfoValidateEmail.
type InfoValidateEmailParams struct {
	// validate this given email
	Email openapi_types.Email `form:"email" json:"email"`
}

// InfoVerifyJSONBody defines parameters for InfoVerify.
type InfoVerifyJSONBody InfoAuth

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PayoutsJobParams defines parameters for PayoutsJob.
type PayoutsJobParams struct {
	// optional job type for clearing particular payouts
	JobType *PayoutsJobParamsJobType `form:"job_type,omitempty" json:"job_type,omitempty"`
}

// PayoutsJobParamsJobType defines parameters for PayoutsJob.
type PayoutsJobParamsJobType string

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// ApplyJobJSONBody defines parameters for ApplyJob.
type ApplyJobJSONBody CustomerOptions

// OverrideJobJSONBody defines parameters for OverrideJob.
type OverrideJobJSONBody JobOverride

// PayJobJSONBody defines parameters for PayJob.
type PayJobJSONBody PaymentOption

// SignJobSateNoteJSONBody defines parameters for SignJobSateNote.
type SignJobSateNoteJSONBody SatNote

// PostMeJSONBody defines parameters for PostMe.
type PostMeJSONBody InfoMe

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// MarkPaymentParamsStatus defines parameters for MarkPayment.
type MarkPaymentParamsStatus string

// RunnerParams defines parameters for Runner.
type RunnerParams struct {
	// runner event type
	Event RunnerParamsEvent `form:"event" json:"event"`

	// runner task name
	Task RunnerParamsTask `form:"task" json:"task"`
}

// RunnerParamsEvent defines parameters for Runner.
type RunnerParamsEvent string

// RunnerParamsTask defines parameters for Runner.
type RunnerParamsTask string

// PostSubscriptionJSONBody defines parameters for PostSubscription.
type PostSubscriptionJSONBody Subscription

// PutSubscriptionJSONBody defines parameters for PutSubscription.
type PutSubscriptionJSONBody Subscription

// ProviderWebhookParamsProvider defines parameters for ProviderWebhook.
type ProviderWebhookParamsProvider string

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCompanyDirectorVerificationJSONRequestBody defines body for PostCompanyDirectorVerification for application/json ContentType.
type PostCompanyDirectorVerificationJSONRequestBody PostCompanyDirectorVerificationJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// SignCreditJSONRequestBody defines body for SignCredit for application/json ContentType.
type SignCreditJSONRequestBody SignCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// InfoAuthJSONRequestBody defines body for InfoAuth for application/json ContentType.
type InfoAuthJSONRequestBody InfoAuthJSONBody

// InfoClaimAccountJSONRequestBody defines body for InfoClaimAccount for application/json ContentType.
type InfoClaimAccountJSONRequestBody InfoClaimAccountJSONBody

// InfoGhostJSONRequestBody defines body for InfoGhost for application/json ContentType.
type InfoGhostJSONRequestBody InfoGhostJSONBody

// InfoLegacyRedirectJSONRequestBody defines body for InfoLegacyRedirect for application/json ContentType.
type InfoLegacyRedirectJSONRequestBody InfoLegacyRedirectJSONBody

// InfoPasswordJSONRequestBody defines body for InfoPassword for application/json ContentType.
type InfoPasswordJSONRequestBody InfoPasswordJSONBody

// InfoSessionJSONRequestBody defines body for InfoSession for application/json ContentType.
type InfoSessionJSONRequestBody InfoSessionJSONBody

// InfoVerifyJSONRequestBody defines body for InfoVerify for application/json ContentType.
type InfoVerifyJSONRequestBody InfoVerifyJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ApplyJobJSONRequestBody defines body for ApplyJob for application/json ContentType.
type ApplyJobJSONRequestBody ApplyJobJSONBody

// OverrideJobJSONRequestBody defines body for OverrideJob for application/json ContentType.
type OverrideJobJSONRequestBody OverrideJobJSONBody

// PayJobJSONRequestBody defines body for PayJob for application/json ContentType.
type PayJobJSONRequestBody PayJobJSONBody

// SignJobSateNoteJSONRequestBody defines body for SignJobSateNote for application/json ContentType.
type SignJobSateNoteJSONRequestBody SignJobSateNoteJSONBody

// PostMeJSONRequestBody defines body for PostMe for application/json ContentType.
type PostMeJSONRequestBody PostMeJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// PostSubscriptionJSONRequestBody defines body for PostSubscription for application/json ContentType.
type PostSubscriptionJSONRequestBody PostSubscriptionJSONBody

// PutSubscriptionJSONRequestBody defines body for PutSubscription for application/json ContentType.
type PutSubscriptionJSONRequestBody PutSubscriptionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// kanda staff to approve and verify company users and mark its lifecycle verified only allowed when company has already gone through company setup
	// (POST /api/company/{id}/approve)
	ApproveCompany(ctx echo.Context, id string) error
	// kanda staff to reject or decline company and mark its lifecycle declined, apart from improper insurance document, all declines will disable company and suspend and disable all users associated with the company. for improper insurance document, document will be removed and lifecycle  re-calculated so tradesperson can upload a correct one again.
	// (POST /api/company/{id}/decline)
	DeclineCompany(ctx echo.Context, id string, params DeclineCompanyParams) error
	// send verification email to all non-verified directors for the company
	// (POST /api/company/{id}/director)
	DirectorCompany(ctx echo.Context, id string) error
	// get owner / director info from company
	// (GET /api/company/{id}/director-verification)
	GetCompanyDirectorVerification(ctx echo.Context, id string, params GetCompanyDirectorVerificationParams) error
	// owner / director to submit ID verification
	// (POST /api/company/{id}/director-verification)
	PostCompanyDirectorVerification(ctx echo.Context, id string, params PostCompanyDirectorVerificationParams) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// check existing credit and refresh documents, only allowed when credit state is set
	// (POST /api/credit/{id}/check)
	CheckCredit(ctx echo.Context, id string) error
	// quote existing credit
	// (POST /api/credit/{id}/quote)
	QuoteCredit(ctx echo.Context, id string) error
	// sign existing credit documents, only allowed when credit state is accepted
	// (POST /api/credit/{id}/sign)
	SignCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// put auth info by email, send sign-in magic link
	// (PUT /api/info/auth)
	InfoAuth(ctx echo.Context) error
	// put claim account info by email for legacy user, send verification magic link
	// (PUT /api/info/claim-account)
	InfoClaimAccount(ctx echo.Context) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// info ghost mode to return custom token, only available to Kanda staff
	// (PUT /api/info/ghost)
	InfoGhost(ctx echo.Context) error
	// query system health
	// (GET /api/info/health)
	InfoHealth(ctx echo.Context) error
	// query request IPv4 address or fallback to server IP
	// (GET /api/info/ip)
	InfoIP(ctx echo.Context) error
	// request a new checkout link based on given data for redirect flow
	// (PUT /api/info/legacy-redirect)
	InfoLegacyRedirect(ctx echo.Context) error
	// put password info by email, send password reset magic link
	// (PUT /api/info/password)
	InfoPassword(ctx echo.Context) error
	// request a new session token for use in checkout
	// (PUT /api/info/session)
	InfoSession(ctx echo.Context) error
	// validate email info
	// (GET /api/info/validate-email)
	InfoValidateEmail(ctx echo.Context, params InfoValidateEmailParams) error
	// put verify info by email, send verification magic link
	// (PUT /api/info/verify)
	InfoVerify(ctx echo.Context) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// kanda staff to approve all payouts for job, only allowed when provider approved sat note and job status is finished and is financed
	// (POST /api/job/all/payouts)
	PayoutsJob(ctx echo.Context, params PayoutsJobParams) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// customer to apply existing job with selected options, only allowed when job status is sent
	// (POST /api/job/{id}/apply)
	ApplyJob(ctx echo.Context, id string) error
	// kanda staff to approve signed completed job with satisfaction note, only allowed when sat note is signed and job status is finished and is financed
	// (POST /api/job/{id}/approve)
	ApproveJobSatNote(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// check existing job credit state, only allowed when job is financed
	// (POST /api/job/{id}/check)
	CheckJob(ctx echo.Context, id string) error
	// get existing job company info
	// (POST /api/job/{id}/companyInfo)
	JobCompanyInfo(ctx echo.Context, id string) error
	// complete existing accepted job, only allowed when job status is accepted
	// (POST /api/job/{id}/complete)
	CompleteJob(ctx echo.Context, id string) error
	// kanda staff to override a job status and trigger comms to be sent (if applicable), only allowed when job is applied for finance or financed.
	// (POST /api/job/{id}/override)
	OverrideJob(ctx echo.Context, id string) error
	// customer to pay existing job,  only allowed when job status is beyond sent
	// (POST /api/job/{id}/pay)
	PayJob(ctx echo.Context, id string) error
	// kanda staff to approve a payout for job, only allowed when provider approved sat note and job status is finished and is financed
	// (POST /api/job/{id}/payout)
	PayoutJob(ctx echo.Context, id string) error
	// resend existing job
	// (POST /api/job/{id}/resend)
	ResendJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// customer to sign completed job with satisfaction note, only allowed when job status is finished and is financed
	// (POST /api/job/{id}/signSatNote)
	SignJobSateNote(ctx echo.Context, id string) error
	// unarchive existing already archived job
	// (POST /api/job/{id}/unarchive)
	UnarchiveJob(ctx echo.Context, id string) error
	// customer to view completed job with satisfaction note, only allowed when job status is finished and is financed
	// (POST /api/job/{id}/viewSatNote)
	ViewJobSatNote(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// post me info
	// (POST /api/me)
	PostMe(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
	// company to mark existing payment as given status, only allowed when payment method is cash
	// (POST /api/payment/{id}/{status})
	MarkPayment(ctx echo.Context, id string, status MarkPaymentParamsStatus) error
	// runner for task event
	// (GET /api/runner)
	Runner(ctx echo.Context, params RunnerParams) error
	// get all subscriptions
	// (GET /api/subscription)
	GetSubscriptions(ctx echo.Context) error
	// post new subscription
	// (POST /api/subscription)
	PostSubscription(ctx echo.Context) error
	// delete existing subscription
	// (DELETE /api/subscription/{id})
	DeleteSubscription(ctx echo.Context, id string) error
	// get existing subscription
	// (GET /api/subscription/{id})
	GetSubscription(ctx echo.Context, id string) error
	// put existing subscription
	// (PUT /api/subscription/{id})
	PutSubscription(ctx echo.Context, id string) error
	// pending existing subscription
	// (POST /api/subscription/{id}/pending)
	PendingSubscription(ctx echo.Context, id string) error
	// provider webhook
	// (POST /api/webhook/{provider})
	ProviderWebhook(ctx echo.Context, provider ProviderWebhookParamsProvider) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// ApproveCompany converts echo context to params.
func (w *ServerInterfaceWrapper) ApproveCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApproveCompany(ctx, id)
	return err
}

// DeclineCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeclineCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeclineCompanyParams
	// ------------- Required query parameter "reason" -------------

	err = runtime.BindQueryParameter("form", true, true, "reason", ctx.QueryParams(), &params.Reason)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reason: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeclineCompany(ctx, id, params)
	return err
}

// DirectorCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DirectorCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DirectorCompany(ctx, id)
	return err
}

// GetCompanyDirectorVerification converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyDirectorVerification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyDirectorVerificationParams
	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanyDirectorVerification(ctx, id, params)
	return err
}

// PostCompanyDirectorVerification converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyDirectorVerification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCompanyDirectorVerificationParams
	// ------------- Required query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, true, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompanyDirectorVerification(ctx, id, params)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// CheckCredit converts echo context to params.
func (w *ServerInterfaceWrapper) CheckCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckCredit(ctx, id)
	return err
}

// QuoteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) QuoteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuoteCredit(ctx, id)
	return err
}

// SignCredit converts echo context to params.
func (w *ServerInterfaceWrapper) SignCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoAuth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoAuth(ctx)
	return err
}

// InfoClaimAccount converts echo context to params.
func (w *ServerInterfaceWrapper) InfoClaimAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoClaimAccount(ctx)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// InfoGhost converts echo context to params.
func (w *ServerInterfaceWrapper) InfoGhost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoGhost(ctx)
	return err
}

// InfoHealth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoHealth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoHealth(ctx)
	return err
}

// InfoIP converts echo context to params.
func (w *ServerInterfaceWrapper) InfoIP(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoIP(ctx)
	return err
}

// InfoLegacyRedirect converts echo context to params.
func (w *ServerInterfaceWrapper) InfoLegacyRedirect(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoLegacyRedirect(ctx)
	return err
}

// InfoPassword converts echo context to params.
func (w *ServerInterfaceWrapper) InfoPassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoPassword(ctx)
	return err
}

// InfoSession converts echo context to params.
func (w *ServerInterfaceWrapper) InfoSession(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoSession(ctx)
	return err
}

// InfoValidateEmail converts echo context to params.
func (w *ServerInterfaceWrapper) InfoValidateEmail(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoValidateEmailParams
	// ------------- Required query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, true, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoValidateEmail(ctx, params)
	return err
}

// InfoVerify converts echo context to params.
func (w *ServerInterfaceWrapper) InfoVerify(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoVerify(ctx)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// PayoutsJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayoutsJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PayoutsJobParams
	// ------------- Optional query parameter "job_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "job_type", ctx.QueryParams(), &params.JobType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayoutsJob(ctx, params)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ApplyJob converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyJob(ctx, id)
	return err
}

// ApproveJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) ApproveJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApproveJobSatNote(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// CheckJob converts echo context to params.
func (w *ServerInterfaceWrapper) CheckJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckJob(ctx, id)
	return err
}

// JobCompanyInfo converts echo context to params.
func (w *ServerInterfaceWrapper) JobCompanyInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JobCompanyInfo(ctx, id)
	return err
}

// CompleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CompleteJob(ctx, id)
	return err
}

// OverrideJob converts echo context to params.
func (w *ServerInterfaceWrapper) OverrideJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverrideJob(ctx, id)
	return err
}

// PayJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayJob(ctx, id)
	return err
}

// PayoutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayoutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayoutJob(ctx, id)
	return err
}

// ResendJob converts echo context to params.
func (w *ServerInterfaceWrapper) ResendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResendJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// SignJobSateNote converts echo context to params.
func (w *ServerInterfaceWrapper) SignJobSateNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignJobSateNote(ctx, id)
	return err
}

// UnarchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) UnarchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnarchiveJob(ctx, id)
	return err
}

// ViewJobSatNote converts echo context to params.
func (w *ServerInterfaceWrapper) ViewJobSatNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewJobSatNote(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PostMe converts echo context to params.
func (w *ServerInterfaceWrapper) PostMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMe(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// MarkPayment converts echo context to params.
func (w *ServerInterfaceWrapper) MarkPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "status" -------------
	var status MarkPaymentParamsStatus

	err = runtime.BindStyledParameterWithLocation("simple", false, "status", runtime.ParamLocationPath, ctx.Param("status"), &status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkPayment(ctx, id, status)
	return err
}

// Runner converts echo context to params.
func (w *ServerInterfaceWrapper) Runner(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RunnerParams
	// ------------- Required query parameter "event" -------------

	err = runtime.BindQueryParameter("form", true, true, "event", ctx.QueryParams(), &params.Event)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event: %s", err))
	}

	// ------------- Required query parameter "task" -------------

	err = runtime.BindQueryParameter("form", true, true, "task", ctx.QueryParams(), &params.Task)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Runner(ctx, params)
	return err
}

// GetSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriptions(ctx)
	return err
}

// PostSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSubscription(ctx)
	return err
}

// DeleteSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSubscription(ctx, id)
	return err
}

// GetSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscription(ctx, id)
	return err
}

// PutSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PutSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSubscription(ctx, id)
	return err
}

// PendingSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PendingSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingSubscription(ctx, id)
	return err
}

// ProviderWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderWebhook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider ProviderWebhookParamsProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, ctx.Param("provider"), &provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProviderWebhook(ctx, provider)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.POST(baseURL+"/api/company/:id/approve", wrapper.ApproveCompany)
	router.POST(baseURL+"/api/company/:id/decline", wrapper.DeclineCompany)
	router.POST(baseURL+"/api/company/:id/director", wrapper.DirectorCompany)
	router.GET(baseURL+"/api/company/:id/director-verification", wrapper.GetCompanyDirectorVerification)
	router.POST(baseURL+"/api/company/:id/director-verification", wrapper.PostCompanyDirectorVerification)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.POST(baseURL+"/api/credit/:id/check", wrapper.CheckCredit)
	router.POST(baseURL+"/api/credit/:id/quote", wrapper.QuoteCredit)
	router.POST(baseURL+"/api/credit/:id/sign", wrapper.SignCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.PUT(baseURL+"/api/info/auth", wrapper.InfoAuth)
	router.PUT(baseURL+"/api/info/claim-account", wrapper.InfoClaimAccount)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.PUT(baseURL+"/api/info/ghost", wrapper.InfoGhost)
	router.GET(baseURL+"/api/info/health", wrapper.InfoHealth)
	router.GET(baseURL+"/api/info/ip", wrapper.InfoIP)
	router.PUT(baseURL+"/api/info/legacy-redirect", wrapper.InfoLegacyRedirect)
	router.PUT(baseURL+"/api/info/password", wrapper.InfoPassword)
	router.PUT(baseURL+"/api/info/session", wrapper.InfoSession)
	router.GET(baseURL+"/api/info/validate-email", wrapper.InfoValidateEmail)
	router.PUT(baseURL+"/api/info/verify", wrapper.InfoVerify)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.POST(baseURL+"/api/job/all/payouts", wrapper.PayoutsJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/apply", wrapper.ApplyJob)
	router.POST(baseURL+"/api/job/:id/approve", wrapper.ApproveJobSatNote)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/check", wrapper.CheckJob)
	router.POST(baseURL+"/api/job/:id/companyInfo", wrapper.JobCompanyInfo)
	router.POST(baseURL+"/api/job/:id/complete", wrapper.CompleteJob)
	router.POST(baseURL+"/api/job/:id/override", wrapper.OverrideJob)
	router.POST(baseURL+"/api/job/:id/pay", wrapper.PayJob)
	router.POST(baseURL+"/api/job/:id/payout", wrapper.PayoutJob)
	router.POST(baseURL+"/api/job/:id/resend", wrapper.ResendJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.POST(baseURL+"/api/job/:id/signSatNote", wrapper.SignJobSateNote)
	router.POST(baseURL+"/api/job/:id/unarchive", wrapper.UnarchiveJob)
	router.POST(baseURL+"/api/job/:id/viewSatNote", wrapper.ViewJobSatNote)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.POST(baseURL+"/api/me", wrapper.PostMe)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)
	router.POST(baseURL+"/api/payment/:id/:status", wrapper.MarkPayment)
	router.GET(baseURL+"/api/runner", wrapper.Runner)
	router.GET(baseURL+"/api/subscription", wrapper.GetSubscriptions)
	router.POST(baseURL+"/api/subscription", wrapper.PostSubscription)
	router.DELETE(baseURL+"/api/subscription/:id", wrapper.DeleteSubscription)
	router.GET(baseURL+"/api/subscription/:id", wrapper.GetSubscription)
	router.PUT(baseURL+"/api/subscription/:id", wrapper.PutSubscription)
	router.POST(baseURL+"/api/subscription/:id/pending", wrapper.PendingSubscription)
	router.POST(baseURL+"/api/webhook/:provider", wrapper.ProviderWebhook)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
