// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CheckoutOption.
const (
	ApplyForFinance CheckoutOption = "apply_for_finance"
	DeclineJob      CheckoutOption = "decline_job"
	PayOnCompletion CheckoutOption = "pay_on_completion"
)

// Defines values for CompanyCompanyType.
const (
	LimitedCompany CompanyCompanyType = "limited_company"
	SoleTrader     CompanyCompanyType = "sole_trader"
)

// Defines values for CompanyLifecycle.
const (
	CompanyLifecycleCompletedSetup CompanyLifecycle = "completed_setup"
	CompanyLifecycleOnboarded      CompanyLifecycle = "onboarded"
	CompanyLifecycleRegistered     CompanyLifecycle = "registered"
	CompanyLifecycleVerified       CompanyLifecycle = "verified"
)

// Defines values for CompanyQuotePreference.
const (
	CompanyQuotePreferenceCustom       CompanyQuotePreference = "custom"
	CompanyQuotePreferenceKanda        CompanyQuotePreference = "kanda"
	CompanyQuotePreferenceNoPreference CompanyQuotePreference = "no_preference"
)

// Defines values for CompanySkipDeposit.
const (
	CompanySkipDepositNo  CompanySkipDeposit = "No"
	CompanySkipDepositYes CompanySkipDeposit = "Yes"
)

// Defines values for CompanyInfoTradeBody.
const (
	CompanyInfoTradeBodyElecsa  CompanyInfoTradeBody = "elecsa"
	CompanyInfoTradeBodyGasSafe CompanyInfoTradeBody = "gas_safe"
	CompanyInfoTradeBodyNapit   CompanyInfoTradeBody = "napit"
	CompanyInfoTradeBodyNiceic  CompanyInfoTradeBody = "niceic"
	CompanyInfoTradeBodyOther   CompanyInfoTradeBody = "other"
)

// Defines values for CompanyInfoTradeType.
const (
	AirConditioning              CompanyInfoTradeType = "air_conditioning"
	Bathrooms                    CompanyInfoTradeType = "bathrooms"
	CctvAndSecurityInstallations CompanyInfoTradeType = "cctv_and_security_installations"
	DrivewaysAndPatios           CompanyInfoTradeType = "driveways_and_patios"
	Electrician                  CompanyInfoTradeType = "electrician"
	EvChargerInstaller           CompanyInfoTradeType = "ev_charger_installer"
	Fireplaces                   CompanyInfoTradeType = "fireplaces"
	FloorLayer                   CompanyInfoTradeType = "floor_layer"
	GarageDoors                  CompanyInfoTradeType = "garage_doors"
	GasEngineer                  CompanyInfoTradeType = "gas_engineer"
	KitchenFitter                CompanyInfoTradeType = "kitchen_fitter"
	Landscaping                  CompanyInfoTradeType = "landscaping"
	MultiTrade                   CompanyInfoTradeType = "multi_trade"
	OtherTrade                   CompanyInfoTradeType = "other_trade"
	Tiler                        CompanyInfoTradeType = "tiler"
	WindowsAndDoors              CompanyInfoTradeType = "windows_and_doors"
)

// Defines values for CompanyInfoUseSubcontractor.
const (
	CompanyInfoUseSubcontractorNo  CompanyInfoUseSubcontractor = "no"
	CompanyInfoUseSubcontractorYes CompanyInfoUseSubcontractor = "yes"
)

// Defines values for CreditKind.
const (
	CreditKindCharge CreditKind = "charge"
	CreditKindJob    CreditKind = "job"
)

// Defines values for CreditProvider.
const (
	Omni CreditProvider = "omni"
)

// Defines values for CreditState.
const (
	CreditStateAccepted       CreditState = "accepted"
	CreditStateActionCustomer CreditState = "action_customer"
	CreditStateActionLender   CreditState = "action_lender"
	CreditStateDeclined       CreditState = "declined"
	CreditStateFinished       CreditState = "finished"
	CreditStatePaidOut        CreditState = "paid_out"
	CreditStatePending        CreditState = "pending"
	CreditStateReferred       CreditState = "referred"
)

// Defines values for CustomerDetailsGender.
const (
	Female CustomerDetailsGender = "female"
	Male   CustomerDetailsGender = "male"
)

// Defines values for CustomerDetailsMaritalStatus.
const (
	CustomerDetailsMaritalStatusCohabiting  CustomerDetailsMaritalStatus = "cohabiting"
	CustomerDetailsMaritalStatusDivorced    CustomerDetailsMaritalStatus = "divorced"
	CustomerDetailsMaritalStatusMarried     CustomerDetailsMaritalStatus = "married"
	CustomerDetailsMaritalStatusOther       CustomerDetailsMaritalStatus = "other"
	CustomerDetailsMaritalStatusSeparated   CustomerDetailsMaritalStatus = "separated"
	CustomerDetailsMaritalStatusSingle      CustomerDetailsMaritalStatus = "single"
	CustomerDetailsMaritalStatusToBeMarried CustomerDetailsMaritalStatus = "to_be_married"
	CustomerDetailsMaritalStatusWidowed     CustomerDetailsMaritalStatus = "widowed"
)

// Defines values for CustomerDetailsResidentialStatus.
const (
	CouncilTenant     CustomerDetailsResidentialStatus = "council tenant"
	LivingWithParents CustomerDetailsResidentialStatus = "living with parents"
	Owner             CustomerDetailsResidentialStatus = "owner"
	Tenant            CustomerDetailsResidentialStatus = "tenant"
)

// Defines values for CustomerDetailsTitle.
const (
	Dr   CustomerDetailsTitle = "dr"
	Miss CustomerDetailsTitle = "miss"
	Mr   CustomerDetailsTitle = "mr"
	Mrs  CustomerDetailsTitle = "mrs"
	Ms   CustomerDetailsTitle = "ms"
)

// Defines values for DirectorInfoVerificationStatus.
const (
	DirectorInfoVerificationStatusNotVerified DirectorInfoVerificationStatus = "not_verified"
	DirectorInfoVerificationStatusVerified    DirectorInfoVerificationStatus = "verified"
)

// Defines values for EmploymentDetailsEmploymentStatus.
const (
	Employed     EmploymentDetailsEmploymentStatus = "employed"
	NotEmployed  EmploymentDetailsEmploymentStatus = "not_employed"
	Retired      EmploymentDetailsEmploymentStatus = "retired"
	SelfEmployed EmploymentDetailsEmploymentStatus = "self_employed"
)

// Defines values for FinanceStatus.
const (
	FinanceStatusAppliedForFinance  FinanceStatus = "applied_for_finance"
	FinanceStatusFinacneNotApproved FinanceStatus = "finacne_not_approved"
	FinanceStatusFinanced           FinanceStatus = "financed"
	FinanceStatusNotApplied         FinanceStatus = "not_applied"
	FinanceStatusPaid               FinanceStatus = "paid"
	FinanceStatusSatNoteSent        FinanceStatus = "sat_note_sent"
	FinanceStatusSatNoteSigned      FinanceStatus = "sat_note_signed"
	FinanceStatusSatNoteViewed      FinanceStatus = "sat_note_viewed"
	FinanceStatusUnderReview        FinanceStatus = "under_review"
)

// Defines values for JobArchived.
const (
	JobArchivedNo  JobArchived = "no"
	JobArchivedYes JobArchived = "yes"
)

// Defines values for JobDepositType.
const (
	FixedDeposit   JobDepositType = "fixed_deposit"
	NoDeposit      JobDepositType = "no_deposit"
	PartialDeposit JobDepositType = "partial_deposit"
)

// Defines values for JobStatus.
const (
	JobStatusAccepted JobStatus = "accepted"
	JobStatusDeclined JobStatus = "declined"
	JobStatusDraft    JobStatus = "draft"
	JobStatusFinished JobStatus = "finished"
	JobStatusSent     JobStatus = "sent"
)

// Defines values for JobItemStyle.
const (
	JobItemStyleCustom JobItemStyle = "custom"
	JobItemStyleKanda  JobItemStyle = "kanda"
)

// Defines values for JobItemVatRate.
const (
	Custom    JobItemVatRate = "custom"
	Exempted  JobItemVatRate = "exempted"
	N0        JobItemVatRate = "0%"
	N20       JobItemVatRate = "20%"
	N5        JobItemVatRate = "5%"
	VatNotSet JobItemVatRate = "vat_not_set"
)

// Defines values for MoneyCurrency.
const (
	GBP MoneyCurrency = "GBP"
)

// Defines values for NotEmployedDetailsSourceOfIncome.
const (
	Benefits    NotEmployedDetailsSourceOfIncome = "benefits"
	Maintenance NotEmployedDetailsSourceOfIncome = "maintenance"
	Other       NotEmployedDetailsSourceOfIncome = "other"
	Partner     NotEmployedDetailsSourceOfIncome = "partner"
)

// Defines values for NotificationChannel.
const (
	Email NotificationChannel = "email"
	Sms   NotificationChannel = "sms"
	Web   NotificationChannel = "web"
)

// Defines values for PaymentKind.
const (
	PaymentKindCharge PaymentKind = "charge"
	PaymentKindJob    PaymentKind = "job"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCancelled PaymentStatus = "cancelled"
	PaymentStatusDisputed  PaymentStatus = "disputed"
	PaymentStatusPaid      PaymentStatus = "paid"
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusUnpaid    PaymentStatus = "unpaid"
)

// Defines values for PaymentOptionPaymentMethod.
const (
	Card PaymentOptionPaymentMethod = "card"
	Cash PaymentOptionPaymentMethod = "cash"
	Loan PaymentOptionPaymentMethod = "loan"
)

// Defines values for SignatureSigned.
const (
	SignatureSignedNo  SignatureSigned = "no"
	SignatureSignedYes SignatureSigned = "yes"
)

// Defines values for UserTypeRole.
const (
	CompanyAdmin   UserTypeRole = "company-admin"
	CompanyManager UserTypeRole = "company-manager"
	CompanyStaff   UserTypeRole = "company-staff"
)

// Address defines model for Address.
type Address struct {
	BuildingName    *string `json:"building_name,omitempty"`
	BuildingNumber  *string `json:"building_number,omitempty"`
	City            string  `json:"city"`
	Country         string  `json:"country"`
	County          *string `json:"county,omitempty"`
	Line1           string  `json:"line_1"`
	Line2           *string `json:"line_2,omitempty"`
	MonthsAtAddress *int32  `json:"months_at_address,omitempty"`
	Postcode        string  `json:"postcode"`
}

// AuthUser defines model for AuthUser.
type AuthUser struct {
	Audience *string             `json:"audience,omitempty"`
	Disabled *bool               `json:"disabled,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Id       *string             `json:"id,omitempty"`
	Issuer   *string             `json:"issuer,omitempty"`
	Name     string              `json:"name"`
	Phone    *string             `json:"phone,omitempty"`
	PhotoURL *string             `json:"photoURL,omitempty"`
	Provider *string             `json:"provider,omitempty"`
	Role     *string             `json:"role,omitempty"`
	Subject  *string             `json:"subject,omitempty"`
	Token    *string             `json:"token,omitempty"`
}

// AvailableRate defines model for AvailableRate.
type AvailableRate struct {
	Enabled bool   `json:"enabled"`
	Fee     int    `json:"fee"`
	Name    string `json:"name"`
}

// BankAccount defines model for BankAccount.
type BankAccount struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	SortCode      string `json:"sort_code"`
}

// checkout option picked by customer, updated only via custom action
type CheckoutOption string

// Company defines model for Company.
type Company struct {
	AvailableRates     *[]AvailableRate        `json:"available_rates,omitempty"`
	BankAccount        *BankAccount            `json:"bank_account,omitempty"`
	Cid                *string                 `json:"cid,omitempty"`
	CompanyInfo        *CompanyInfo            `json:"company_info,omitempty"`
	CompanyLogo        *Document               `json:"company_logo,omitempty"`
	CompanyType        CompanyCompanyType      `json:"company_type"`
	ContactInfo        *ContactInfo            `json:"contact_info,omitempty"`
	Emails             *[]openapi_types.Email  `json:"emails,omitempty"`
	Id                 *string                 `json:"id,omitempty"`
	Lifecycle          *CompanyLifecycle       `json:"lifecycle,omitempty"`
	LimitedCompanyInfo *LimitedCompanyInfo     `json:"limited_company_info,omitempty"`
	Metadata           *Metadata               `json:"metadata,omitempty"`
	Oid                *string                 `json:"oid,omitempty"`
	QuotePreference    *CompanyQuotePreference `json:"quote_preference,omitempty"`
	SkipDeposit        *CompanySkipDeposit     `json:"skip_deposit,omitempty"`
	SoleTraderInfo     *SoleTraderInfo         `json:"sole_trader_info,omitempty"`
	Users              *[]UserType             `json:"users,omitempty"`
}

// CompanyCompanyType defines model for Company.CompanyType.
type CompanyCompanyType string

// CompanyLifecycle defines model for Company.Lifecycle.
type CompanyLifecycle string

// CompanyQuotePreference defines model for Company.QuotePreference.
type CompanyQuotePreference string

// CompanySkipDeposit defines model for Company.SkipDeposit.
type CompanySkipDeposit string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	AverageJobValue    Pence                       `json:"average_job_value"`
	AverageMonthlyJobs int                         `json:"average_monthly_jobs"`
	InsuranceDocument  Document                    `json:"insurance_document"`
	TradeBody          *CompanyInfoTradeBody       `json:"trade_body,omitempty"`
	TradeBodyNumber    *string                     `json:"trade_body_number,omitempty"`
	TradeType          CompanyInfoTradeType        `json:"trade_type"`
	UseSubcontractor   CompanyInfoUseSubcontractor `json:"use_subcontractor"`
	WarrantyLength     int                         `json:"warranty_length"`
}

// CompanyInfoTradeBody defines model for CompanyInfo.TradeBody.
type CompanyInfoTradeBody string

// CompanyInfoTradeType defines model for CompanyInfo.TradeType.
type CompanyInfoTradeType string

// CompanyInfoUseSubcontractor defines model for CompanyInfo.UseSubcontractor.
type CompanyInfoUseSubcontractor string

// ContactInfo defines model for ContactInfo.
type ContactInfo struct {
	ContactAddress *Address             `json:"contact_address,omitempty"`
	ContactEmail   *openapi_types.Email `json:"contact_email,omitempty"`
	ContactName    *string              `json:"contact_name,omitempty"`
	ContactPhone   *string              `json:"contact_phone,omitempty"`
}

// Credit defines model for Credit.
type Credit struct {
	Amount            Money             `json:"amount"`
	BankAccount       BankAccount       `json:"bank_account"`
	Cid               *string           `json:"cid,omitempty"`
	CreditDocuments   *[]Document       `json:"credit_documents,omitempty"`
	CustomerDetails   CustomerDetails   `json:"customer_details"`
	DepositValue      Money             `json:"deposit_value"`
	EmploymentDetails EmploymentDetails `json:"employment_details"`

	// finance option
	FinanceOption *string         `json:"finance_option,omitempty"`
	Id            *string         `json:"id,omitempty"`
	Kid           *string         `json:"kid,omitempty"`
	Kind          *CreditKind     `json:"kind,omitempty"`
	Metadata      *Metadata       `json:"metadata,omitempty"`
	Oid           *string         `json:"oid,omitempty"`
	Provider      *CreditProvider `json:"provider,omitempty"`
	Signature     *Signature      `json:"signature,omitempty"`
	State         *CreditState    `json:"state,omitempty"`
	Xid           *string         `json:"xid,omitempty"`
	Xref          *string         `json:"xref,omitempty"`
}

// CreditKind defines model for Credit.Kind.
type CreditKind string

// CreditProvider defines model for Credit.Provider.
type CreditProvider string

// CreditState defines model for Credit.State.
type CreditState string

// Customer defines model for Customer.
type Customer struct {
	Address   *Address            `json:"address,omitempty"`
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"first_name"`
	LastName  string              `json:"last_name"`
	Phone     string              `json:"phone"`
}

// CustomerDetails defines model for CustomerDetails.
type CustomerDetails struct {
	CurrentAddress Address `json:"current_address"`

	// Customer's date of birth. Format to use: `dd/mm/yyyy`
	DateOfBirth          time.Time                        `json:"date_of_birth"`
	Email                openapi_types.Email              `json:"email"`
	FirstName            string                           `json:"first_name"`
	Gender               CustomerDetailsGender            `json:"gender"`
	GoodsDeliveryAddress *Address                         `json:"goods_delivery_address,omitempty"`
	LastName             string                           `json:"last_name"`
	MaidenName           *string                          `json:"maiden_name,omitempty"`
	MaritalStatus        CustomerDetailsMaritalStatus     `json:"marital_status"`
	MiddleName           *string                          `json:"middle_name,omitempty"`
	Mobile               *string                          `json:"mobile,omitempty"`
	MonthlyRentAmount    *Money                           `json:"monthly_rent_amount,omitempty"`
	NumberOfDependants   int32                            `json:"number_of_dependants"`
	PreviousAddressOne   *Address                         `json:"previous_address_one,omitempty"`
	PreviousAddressTwo   *Address                         `json:"previous_address_two,omitempty"`
	ResidentialStatus    CustomerDetailsResidentialStatus `json:"residential_status"`
	Telephone            *string                          `json:"telephone,omitempty"`
	Title                CustomerDetailsTitle             `json:"title"`
}

// CustomerDetailsGender defines model for CustomerDetails.Gender.
type CustomerDetailsGender string

// CustomerDetailsMaritalStatus defines model for CustomerDetails.MaritalStatus.
type CustomerDetailsMaritalStatus string

// CustomerDetailsResidentialStatus defines model for CustomerDetails.ResidentialStatus.
type CustomerDetailsResidentialStatus string

// CustomerDetailsTitle defines model for CustomerDetails.Title.
type CustomerDetailsTitle string

// CustomerOptions defines model for CustomerOptions.
type CustomerOptions struct {
	// checkout option picked by customer, updated only via custom action
	CheckoutOption CheckoutOption `json:"checkout_option"`
	DepositValue   *Money         `json:"deposit_value,omitempty"`

	// finance option
	FinanceOption string `json:"finance_option"`
}

// DirectorInfo defines model for DirectorInfo.
type DirectorInfo struct {
	HomeAddress        Address                         `json:"home_address"`
	VerificationStatus *DirectorInfoVerificationStatus `json:"verification_status,omitempty"`
}

// DirectorInfoVerificationStatus defines model for DirectorInfo.VerificationStatus.
type DirectorInfoVerificationStatus string

// Document defines model for Document.
type Document struct {
	Cid      *string   `json:"cid,omitempty"`
	Content  *string   `json:"content,omitempty"`
	Id       *string   `json:"id,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Mimetype *string   `json:"mimetype,omitempty"`
	Name     string    `json:"name"`
	Oid      *string   `json:"oid,omitempty"`
}

// EmployedDetails defines model for EmployedDetails.
type EmployedDetails struct {
	EmployerName   string `json:"employer_name"`
	MainOccupation string `json:"main_occupation"`
	MonthsEmployed int32  `json:"months_employed"`
}

// EmploymentDetails defines model for EmploymentDetails.
type EmploymentDetails struct {
	EmployedDetails       *EmployedDetails                  `json:"employed_details,omitempty"`
	EmploymentStatus      EmploymentDetailsEmploymentStatus `json:"employment_status"`
	GrossAnnualIncome     Money                             `json:"gross_annual_income"`
	HouseholdAnnualIncome Money                             `json:"household_annual_income"`
	NotEmployedDetails    *NotEmployedDetails               `json:"not_employed_details,omitempty"`
	SelfEmployedDetails   *SelfEmployedDetails              `json:"self_employed_details,omitempty"`
}

// EmploymentDetailsEmploymentStatus defines model for EmploymentDetails.EmploymentStatus.
type EmploymentDetailsEmploymentStatus string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FinanceStatus defines model for FinanceStatus.
type FinanceStatus string

// InfoAuth defines model for InfoAuth.
type InfoAuth struct {
	ContinueUrl *string             `json:"continue_url,omitempty"`
	Email       openapi_types.Email `json:"email"`
}

// InfoCompany defines model for InfoCompany.
type InfoCompany struct {
	Directors      *[]UserType        `json:"directors,omitempty"`
	Id             *string            `json:"id,omitempty"`
	LimitedCompany LimitedCompanyInfo `json:"limited_company"`
	Metadata       *Metadata          `json:"metadata,omitempty"`
}

// InfoMe defines model for InfoMe.
type InfoMe struct {
	Name     *string `json:"name,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	PhotoURL *string `json:"photoURL,omitempty"`
}

// Job defines model for Job.
type Job struct {
	Archived        *JobArchived      `json:"archived,omitempty"`
	CheckoutOptions *[]CheckoutOption `json:"checkout_options,omitempty"`
	Cid             *string           `json:"cid,omitempty"`
	Customer        *Customer         `json:"customer,omitempty"`
	CustomerOptions *CustomerOptions  `json:"customer_options,omitempty"`
	DepositType     JobDepositType    `json:"deposit_type"`
	DepositValue    Money             `json:"deposit_value"`
	Description     *string           `json:"description,omitempty"`
	FinanceOptions  *[]string         `json:"finance_options,omitempty"`
	FinanceStatus   *FinanceStatus    `json:"finance_status,omitempty"`
	Id              *string           `json:"id,omitempty"`
	JobItems        []JobItem         `json:"job_items"`
	Metadata        *Metadata         `json:"metadata,omitempty"`
	Notes           *[]string         `json:"notes,omitempty"`
	Oid             *string           `json:"oid,omitempty"`
	Payments        *[]Payment        `json:"payments,omitempty"`
	Status          *JobStatus        `json:"status,omitempty"`
	Title           string            `json:"title"`
	Total           *MoneyTotal       `json:"total,omitempty"`
}

// JobArchived defines model for Job.Archived.
type JobArchived string

// JobDepositType defines model for Job.DepositType.
type JobDepositType string

// JobStatus defines model for Job.Status.
type JobStatus string

// JobCompanyInfo defines model for JobCompanyInfo.
type JobCompanyInfo struct {
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	CompanyLogo *Document    `json:"company_logo,omitempty"`
	CompanyName *string      `json:"company_name,omitempty"`
	ContactInfo *ContactInfo `json:"contact_info,omitempty"`
	VatNumber   *string      `json:"vat_number,omitempty"`
}

// JobItem defines model for JobItem.
type JobItem struct {
	Description   *string         `json:"description,omitempty"`
	Price         Money           `json:"price"`
	Quantity      Pence           `json:"quantity"`
	QuoteDocument *Document       `json:"quote_document,omitempty"`
	Style         *JobItemStyle   `json:"style,omitempty"`
	Title         string          `json:"title"`
	Vat           Money           `json:"vat"`
	VatRate       *JobItemVatRate `json:"vat_rate,omitempty"`
}

// JobItemStyle defines model for JobItem.Style.
type JobItemStyle string

// JobItemVatRate defines model for JobItem.VatRate.
type JobItemVatRate string

// LimitedCompanyInfo defines model for LimitedCompanyInfo.
type LimitedCompanyInfo struct {
	CompanyAddress Address  `json:"company_address"`
	CompanyName    string   `json:"company_name"`
	CompanyNumber  string   `json:"company_number"`
	TradingAddress *Address `json:"trading_address,omitempty"`
	VatNumber      *string  `json:"vat_number,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Liveness  *bool      `json:"liveness,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Money defines model for Money.
type Money struct {
	Amount   Pence          `json:"amount"`
	Currency *MoneyCurrency `json:"currency,omitempty"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// MoneyTotal defines model for MoneyTotal.
type MoneyTotal struct {
	AmountVat          *Money `json:"amount_vat,omitempty"`
	AmountVatExclusive *Money `json:"amount_vat_exclusive,omitempty"`
	AmountVatInclusive *Money `json:"amount_vat_inclusive,omitempty"`
}

// NotEmployedDetails defines model for NotEmployedDetails.
type NotEmployedDetails struct {
	SourceOfIncome NotEmployedDetailsSourceOfIncome `json:"source_of_income"`
}

// NotEmployedDetailsSourceOfIncome defines model for NotEmployedDetails.SourceOfIncome.
type NotEmployedDetailsSourceOfIncome string

// Notification defines model for Notification.
type Notification struct {
	Action              *string                `json:"action,omitempty"`
	Cid                 *string                `json:"cid,omitempty"`
	Content             *string                `json:"content,omitempty"`
	Id                  *string                `json:"id,omitempty"`
	Metadata            *Metadata              `json:"metadata,omitempty"`
	NotificationChannel *[]NotificationChannel `json:"notification_channel,omitempty"`
	Oid                 *string                `json:"oid,omitempty"`
	Redirect            *string                `json:"redirect,omitempty"`
	Views               *[]openapi_types.Email `json:"views,omitempty"`
}

// NotificationChannel defines model for NotificationChannel.
type NotificationChannel string

// Payment defines model for Payment.
type Payment struct {
	Cid           *string        `json:"cid,omitempty"`
	Id            *string        `json:"id,omitempty"`
	Kid           *string        `json:"kid,omitempty"`
	Kind          *PaymentKind   `json:"kind,omitempty"`
	Metadata      *Metadata      `json:"metadata,omitempty"`
	Oid           *string        `json:"oid,omitempty"`
	PaymentOption PaymentOption  `json:"payment_option"`
	Status        *PaymentStatus `json:"status,omitempty"`
	Xid           *string        `json:"xid,omitempty"`
	Xref          *string        `json:"xref,omitempty"`
}

// PaymentKind defines model for Payment.Kind.
type PaymentKind string

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentOption defines model for PaymentOption.
type PaymentOption struct {
	Amount        Money                      `json:"amount"`
	PaymentMethod PaymentOptionPaymentMethod `json:"payment_method"`
}

// PaymentOptionPaymentMethod defines model for PaymentOption.PaymentMethod.
type PaymentOptionPaymentMethod string

// Pence defines model for Pence.
type Pence int32

// SelfEmployedDetails defines model for SelfEmployedDetails.
type SelfEmployedDetails struct {
	BusinessName       string `json:"business_name"`
	MonthsSelfEmployed int32  `json:"months_self_employed"`
	TypeOfBusiness     string `json:"type_of_business"`
}

// Signature defines model for Signature.
type Signature struct {
	Fingerprint string          `json:"fingerprint"`
	Signed      SignatureSigned `json:"signed"`
}

// SignatureSigned defines model for Signature.Signed.
type SignatureSigned string

// SoleTraderInfo defines model for SoleTraderInfo.
type SoleTraderInfo struct {
	NationalInsuranceNumber *string `json:"national_insurance_number,omitempty"`
	TradingAddress          Address `json:"trading_address"`
	TradingName             string  `json:"trading_name"`
}

// UserType defines model for UserType.
type UserType struct {
	DirectorInfo *DirectorInfo       `json:"director_info,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    string              `json:"first_name"`
	LastName     *string             `json:"last_name,omitempty"`
	Mobile       *string             `json:"mobile,omitempty"`
	Role         UserTypeRole        `json:"role"`
}

// UserTypeRole defines model for UserType.Role.
type UserTypeRole string

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// PutCompanyJSONBody defines parameters for PutCompany.
type PutCompanyJSONBody Company

// PostCreditJSONBody defines parameters for PostCredit.
type PostCreditJSONBody Credit

// PutCreditJSONBody defines parameters for PutCredit.
type PutCreditJSONBody Credit

// SignCreditJSONBody defines parameters for SignCredit.
type SignCreditJSONBody Signature

// PostDocumentJSONBody defines parameters for PostDocument.
type PostDocumentJSONBody Document

// PutDocumentJSONBody defines parameters for PutDocument.
type PutDocumentJSONBody Document

// InfoAuthJSONBody defines parameters for InfoAuth.
type InfoAuthJSONBody InfoAuth

// InfoCompanyParams defines parameters for InfoCompany.
type InfoCompanyParams struct {
	// query keyword of company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// exact company number match
	CompanyNumber *string `form:"company_number,omitempty" json:"company_number,omitempty"`

	// include directors info?
	Directors *bool `form:"directors,omitempty" json:"directors,omitempty"`
}

// InfoCustomerParams defines parameters for InfoCustomer.
type InfoCustomerParams struct {
	// query keyword of loosely matched customer
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// PostJobJSONBody defines parameters for PostJob.
type PostJobJSONBody Job

// PutJobJSONBody defines parameters for PutJob.
type PutJobJSONBody Job

// ApplyJobJSONBody defines parameters for ApplyJob.
type ApplyJobJSONBody CustomerOptions

// PayJobJSONBody defines parameters for PayJob.
type PayJobJSONBody PaymentOption

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody InfoMe

// PostNotificationJSONBody defines parameters for PostNotification.
type PostNotificationJSONBody Notification

// PutNotificationJSONBody defines parameters for PutNotification.
type PutNotificationJSONBody Notification

// PostPaymentJSONBody defines parameters for PostPayment.
type PostPaymentJSONBody Payment

// PutPaymentJSONBody defines parameters for PutPayment.
type PutPaymentJSONBody Payment

// MarkPaymentParamsStatus defines parameters for MarkPayment.
type MarkPaymentParamsStatus string

// ProviderWebhookParamsProvider defines parameters for ProviderWebhook.
type ProviderWebhookParamsProvider string

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// PutCompanyJSONRequestBody defines body for PutCompany for application/json ContentType.
type PutCompanyJSONRequestBody PutCompanyJSONBody

// PostCreditJSONRequestBody defines body for PostCredit for application/json ContentType.
type PostCreditJSONRequestBody PostCreditJSONBody

// PutCreditJSONRequestBody defines body for PutCredit for application/json ContentType.
type PutCreditJSONRequestBody PutCreditJSONBody

// SignCreditJSONRequestBody defines body for SignCredit for application/json ContentType.
type SignCreditJSONRequestBody SignCreditJSONBody

// PostDocumentJSONRequestBody defines body for PostDocument for application/json ContentType.
type PostDocumentJSONRequestBody PostDocumentJSONBody

// PutDocumentJSONRequestBody defines body for PutDocument for application/json ContentType.
type PutDocumentJSONRequestBody PutDocumentJSONBody

// InfoAuthJSONRequestBody defines body for InfoAuth for application/json ContentType.
type InfoAuthJSONRequestBody InfoAuthJSONBody

// PostJobJSONRequestBody defines body for PostJob for application/json ContentType.
type PostJobJSONRequestBody PostJobJSONBody

// PutJobJSONRequestBody defines body for PutJob for application/json ContentType.
type PutJobJSONRequestBody PutJobJSONBody

// ApplyJobJSONRequestBody defines body for ApplyJob for application/json ContentType.
type ApplyJobJSONRequestBody ApplyJobJSONBody

// PayJobJSONRequestBody defines body for PayJob for application/json ContentType.
type PayJobJSONRequestBody PayJobJSONBody

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostNotificationJSONRequestBody defines body for PostNotification for application/json ContentType.
type PostNotificationJSONRequestBody PostNotificationJSONBody

// PutNotificationJSONRequestBody defines body for PutNotification for application/json ContentType.
type PutNotificationJSONRequestBody PutNotificationJSONBody

// PostPaymentJSONRequestBody defines body for PostPayment for application/json ContentType.
type PostPaymentJSONRequestBody PostPaymentJSONBody

// PutPaymentJSONRequestBody defines body for PutPayment for application/json ContentType.
type PutPaymentJSONRequestBody PutPaymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all companies
	// (GET /api/company)
	GetCompanies(ctx echo.Context) error
	// post new company
	// (POST /api/company)
	PostCompany(ctx echo.Context) error
	// delete existing company
	// (DELETE /api/company/{id})
	DeleteCompany(ctx echo.Context, id string) error
	// get existing company
	// (GET /api/company/{id})
	GetCompany(ctx echo.Context, id string) error
	// put existing company
	// (PUT /api/company/{id})
	PutCompany(ctx echo.Context, id string) error
	// get all credits
	// (GET /api/credit)
	GetCredits(ctx echo.Context) error
	// post new credit
	// (POST /api/credit)
	PostCredit(ctx echo.Context) error
	// delete existing credit
	// (DELETE /api/credit/{id})
	DeleteCredit(ctx echo.Context, id string) error
	// get existing credit
	// (GET /api/credit/{id})
	GetCredit(ctx echo.Context, id string) error
	// put existing credit
	// (PUT /api/credit/{id})
	PutCredit(ctx echo.Context, id string) error
	// apply existing credit
	// (POST /api/credit/{id}/apply)
	ApplyCredit(ctx echo.Context, id string) error
	// check existing credit and refresh documents
	// (POST /api/credit/{id}/check)
	CheckCredit(ctx echo.Context, id string) error
	// quote existing credit
	// (POST /api/credit/{id}/quote)
	QuoteCredit(ctx echo.Context, id string) error
	// sign existing credit documents
	// (POST /api/credit/{id}/sign)
	SignCredit(ctx echo.Context, id string) error
	// get all documents
	// (GET /api/document)
	GetDocuments(ctx echo.Context) error
	// post new document
	// (POST /api/document)
	PostDocument(ctx echo.Context) error
	// delete existing document
	// (DELETE /api/document/{id})
	DeleteDocument(ctx echo.Context, id string) error
	// get existing document
	// (GET /api/document/{id})
	GetDocument(ctx echo.Context, id string) error
	// put existing document
	// (PUT /api/document/{id})
	PutDocument(ctx echo.Context, id string) error
	// put auth info by email, send sign-in magic link
	// (PUT /api/info/auth)
	InfoAuth(ctx echo.Context) error
	// query company info with its directors
	// (GET /api/info/company)
	InfoCompany(ctx echo.Context, params InfoCompanyParams) error
	// query customer info with loose query
	// (GET /api/info/customer)
	InfoCustomer(ctx echo.Context, params InfoCustomerParams) error
	// get all jobs
	// (GET /api/job)
	GetJobs(ctx echo.Context) error
	// post new job
	// (POST /api/job)
	PostJob(ctx echo.Context) error
	// delete existing job
	// (DELETE /api/job/{id})
	DeleteJob(ctx echo.Context, id string) error
	// get existing job
	// (GET /api/job/{id})
	GetJob(ctx echo.Context, id string) error
	// put existing job
	// (PUT /api/job/{id})
	PutJob(ctx echo.Context, id string) error
	// customer to apply existing job with selected options, only allowed when job status is sent
	// (POST /api/job/{id}/apply)
	ApplyJob(ctx echo.Context, id string) error
	// archive existing job
	// (POST /api/job/{id}/archive)
	ArchiveJob(ctx echo.Context, id string) error
	// get existing job company info
	// (POST /api/job/{id}/companyInfo)
	JobCompanyInfo(ctx echo.Context, id string) error
	// pay existing job, only allowed when job status is beyond sent
	// (POST /api/job/{id}/pay)
	PayJob(ctx echo.Context, id string) error
	// send existing job
	// (POST /api/job/{id}/send)
	SendJob(ctx echo.Context, id string) error
	// get me info
	// (GET /api/me)
	Me(ctx echo.Context) error
	// put me info
	// (PUT /api/me)
	PutMe(ctx echo.Context) error
	// get all notifications
	// (GET /api/notification)
	GetNotifications(ctx echo.Context) error
	// post new notification
	// (POST /api/notification)
	PostNotification(ctx echo.Context) error
	// delete existing notification
	// (DELETE /api/notification/{id})
	DeleteNotification(ctx echo.Context, id string) error
	// get existing notification
	// (GET /api/notification/{id})
	GetNotification(ctx echo.Context, id string) error
	// put existing notification
	// (PUT /api/notification/{id})
	PutNotification(ctx echo.Context, id string) error
	// viewed existing notification
	// (POST /api/notification/{id}/viewed)
	ViewedNotification(ctx echo.Context, id string) error
	// get all payments
	// (GET /api/payment)
	GetPayments(ctx echo.Context) error
	// post new payment
	// (POST /api/payment)
	PostPayment(ctx echo.Context) error
	// delete existing payment
	// (DELETE /api/payment/{id})
	DeletePayment(ctx echo.Context, id string) error
	// get existing payment
	// (GET /api/payment/{id})
	GetPayment(ctx echo.Context, id string) error
	// put existing payment
	// (PUT /api/payment/{id})
	PutPayment(ctx echo.Context, id string) error
	// company to mark existing payment as given status, only allowed when payment method is cash
	// (POST /api/payment/{id}/{status})
	MarkPayment(ctx echo.Context, id string, status MarkPaymentParamsStatus) error
	// provider webhook
	// (POST /api/webhook/{provider})
	ProviderWebhook(ctx echo.Context, provider ProviderWebhookParamsProvider) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanies(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx, id)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx, id)
	return err
}

// PutCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCompany(ctx, id)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// DeleteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredit(ctx, id)
	return err
}

// GetCredit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredit(ctx, id)
	return err
}

// PutCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PutCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCredit(ctx, id)
	return err
}

// ApplyCredit converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyCredit(ctx, id)
	return err
}

// CheckCredit converts echo context to params.
func (w *ServerInterfaceWrapper) CheckCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckCredit(ctx, id)
	return err
}

// QuoteCredit converts echo context to params.
func (w *ServerInterfaceWrapper) QuoteCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuoteCredit(ctx, id)
	return err
}

// SignCredit converts echo context to params.
func (w *ServerInterfaceWrapper) SignCredit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignCredit(ctx, id)
	return err
}

// GetDocuments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocuments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocuments(ctx)
	return err
}

// PostDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PostDocument(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDocument(ctx)
	return err
}

// DeleteDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDocument(ctx, id)
	return err
}

// GetDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocument(ctx, id)
	return err
}

// PutDocument converts echo context to params.
func (w *ServerInterfaceWrapper) PutDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDocument(ctx, id)
	return err
}

// InfoAuth converts echo context to params.
func (w *ServerInterfaceWrapper) InfoAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoAuth(ctx)
	return err
}

// InfoCompany converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCompanyParams
	// ------------- Optional query parameter "company_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_name", ctx.QueryParams(), &params.CompanyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_name: %s", err))
	}

	// ------------- Optional query parameter "company_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_number", ctx.QueryParams(), &params.CompanyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_number: %s", err))
	}

	// ------------- Optional query parameter "directors" -------------

	err = runtime.BindQueryParameter("form", true, false, "directors", ctx.QueryParams(), &params.Directors)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter directors: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCompany(ctx, params)
	return err
}

// InfoCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) InfoCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoCustomerParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InfoCustomer(ctx, params)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobs(ctx)
	return err
}

// PostJob converts echo context to params.
func (w *ServerInterfaceWrapper) PostJob(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, id)
	return err
}

// GetJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJob(ctx, id)
	return err
}

// PutJob converts echo context to params.
func (w *ServerInterfaceWrapper) PutJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutJob(ctx, id)
	return err
}

// ApplyJob converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApplyJob(ctx, id)
	return err
}

// ArchiveJob converts echo context to params.
func (w *ServerInterfaceWrapper) ArchiveJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ArchiveJob(ctx, id)
	return err
}

// JobCompanyInfo converts echo context to params.
func (w *ServerInterfaceWrapper) JobCompanyInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JobCompanyInfo(ctx, id)
	return err
}

// PayJob converts echo context to params.
func (w *ServerInterfaceWrapper) PayJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PayJob(ctx, id)
	return err
}

// SendJob converts echo context to params.
func (w *ServerInterfaceWrapper) SendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SendJob(ctx, id)
	return err
}

// Me converts echo context to params.
func (w *ServerInterfaceWrapper) Me(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Me(ctx)
	return err
}

// PutMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMe(ctx)
	return err
}

// GetNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotifications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotifications(ctx)
	return err
}

// PostNotification converts echo context to params.
func (w *ServerInterfaceWrapper) PostNotification(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNotification(ctx)
	return err
}

// DeleteNotification converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNotification(ctx, id)
	return err
}

// GetNotification converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotification(ctx, id)
	return err
}

// PutNotification converts echo context to params.
func (w *ServerInterfaceWrapper) PutNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutNotification(ctx, id)
	return err
}

// ViewedNotification converts echo context to params.
func (w *ServerInterfaceWrapper) ViewedNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewedNotification(ctx, id)
	return err
}

// GetPayments converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayments(ctx)
	return err
}

// PostPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostPayment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPayment(ctx)
	return err
}

// DeletePayment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePayment(ctx, id)
	return err
}

// GetPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPayment(ctx, id)
	return err
}

// PutPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PutPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPayment(ctx, id)
	return err
}

// MarkPayment converts echo context to params.
func (w *ServerInterfaceWrapper) MarkPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "status" -------------
	var status MarkPaymentParamsStatus

	err = runtime.BindStyledParameterWithLocation("simple", false, "status", runtime.ParamLocationPath, ctx.Param("status"), &status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkPayment(ctx, id, status)
	return err
}

// ProviderWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderWebhook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider ProviderWebhookParamsProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, ctx.Param("provider"), &provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProviderWebhook(ctx, provider)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/company", wrapper.GetCompanies)
	router.POST(baseURL+"/api/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/api/company/:id", wrapper.DeleteCompany)
	router.GET(baseURL+"/api/company/:id", wrapper.GetCompany)
	router.PUT(baseURL+"/api/company/:id", wrapper.PutCompany)
	router.GET(baseURL+"/api/credit", wrapper.GetCredits)
	router.POST(baseURL+"/api/credit", wrapper.PostCredit)
	router.DELETE(baseURL+"/api/credit/:id", wrapper.DeleteCredit)
	router.GET(baseURL+"/api/credit/:id", wrapper.GetCredit)
	router.PUT(baseURL+"/api/credit/:id", wrapper.PutCredit)
	router.POST(baseURL+"/api/credit/:id/apply", wrapper.ApplyCredit)
	router.POST(baseURL+"/api/credit/:id/check", wrapper.CheckCredit)
	router.POST(baseURL+"/api/credit/:id/quote", wrapper.QuoteCredit)
	router.POST(baseURL+"/api/credit/:id/sign", wrapper.SignCredit)
	router.GET(baseURL+"/api/document", wrapper.GetDocuments)
	router.POST(baseURL+"/api/document", wrapper.PostDocument)
	router.DELETE(baseURL+"/api/document/:id", wrapper.DeleteDocument)
	router.GET(baseURL+"/api/document/:id", wrapper.GetDocument)
	router.PUT(baseURL+"/api/document/:id", wrapper.PutDocument)
	router.PUT(baseURL+"/api/info/auth", wrapper.InfoAuth)
	router.GET(baseURL+"/api/info/company", wrapper.InfoCompany)
	router.GET(baseURL+"/api/info/customer", wrapper.InfoCustomer)
	router.GET(baseURL+"/api/job", wrapper.GetJobs)
	router.POST(baseURL+"/api/job", wrapper.PostJob)
	router.DELETE(baseURL+"/api/job/:id", wrapper.DeleteJob)
	router.GET(baseURL+"/api/job/:id", wrapper.GetJob)
	router.PUT(baseURL+"/api/job/:id", wrapper.PutJob)
	router.POST(baseURL+"/api/job/:id/apply", wrapper.ApplyJob)
	router.POST(baseURL+"/api/job/:id/archive", wrapper.ArchiveJob)
	router.POST(baseURL+"/api/job/:id/companyInfo", wrapper.JobCompanyInfo)
	router.POST(baseURL+"/api/job/:id/pay", wrapper.PayJob)
	router.POST(baseURL+"/api/job/:id/send", wrapper.SendJob)
	router.GET(baseURL+"/api/me", wrapper.Me)
	router.PUT(baseURL+"/api/me", wrapper.PutMe)
	router.GET(baseURL+"/api/notification", wrapper.GetNotifications)
	router.POST(baseURL+"/api/notification", wrapper.PostNotification)
	router.DELETE(baseURL+"/api/notification/:id", wrapper.DeleteNotification)
	router.GET(baseURL+"/api/notification/:id", wrapper.GetNotification)
	router.PUT(baseURL+"/api/notification/:id", wrapper.PutNotification)
	router.POST(baseURL+"/api/notification/:id/viewed", wrapper.ViewedNotification)
	router.GET(baseURL+"/api/payment", wrapper.GetPayments)
	router.POST(baseURL+"/api/payment", wrapper.PostPayment)
	router.DELETE(baseURL+"/api/payment/:id", wrapper.DeletePayment)
	router.GET(baseURL+"/api/payment/:id", wrapper.GetPayment)
	router.PUT(baseURL+"/api/payment/:id", wrapper.PutPayment)
	router.POST(baseURL+"/api/payment/:id/:status", wrapper.MarkPayment)
	router.POST(baseURL+"/api/webhook/:provider", wrapper.ProviderWebhook)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kSl8JS+yAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
